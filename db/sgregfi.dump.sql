-- MySQL dump 10.13  Distrib 5.5.62, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: sgregfi
-- ------------------------------------------------------
-- Server version	5.5.62-0+deb8u1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `blog_category`
--

DROP TABLE IF EXISTS `blog_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL,
  `link` varchar(64) NOT NULL,
  `description` varchar(100) DEFAULT NULL,
  `image` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `link` (`link`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_category`
--

LOCK TABLES `blog_category` WRITE;
/*!40000 ALTER TABLE `blog_category` DISABLE KEYS */;
INSERT INTO `blog_category` VALUES (1,'8bit Microcontroller','8bit-microcontroller','','fsg fsg-chip-small'),(2,'PCB Design','pcb-design','','fsg fsg-pcb'),(3,'Data Communication','data-communication','','fa fa-tty'),(4,'32bit Microcontroller','32bit-microcontroller','','fsg fsg-chip-big'),(5,'Android','android','','fa fa-android');
/*!40000 ALTER TABLE `blog_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_category_map`
--

DROP TABLE IF EXISTS `blog_category_map`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_category_map` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `blog_entry_id` int(11) NOT NULL,
  `blog_category_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `category_map` (`blog_entry_id`,`blog_category_id`),
  KEY `blog_category_id` (`blog_category_id`)
) ENGINE=MyISAM AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_category_map`
--

LOCK TABLES `blog_category_map` WRITE;
/*!40000 ALTER TABLE `blog_category_map` DISABLE KEYS */;
INSERT INTO `blog_category_map` VALUES (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,4),(6,5,3),(7,5,5),(8,6,1),(9,7,1),(10,8,4),(11,9,1),(12,9,3);
/*!40000 ALTER TABLE `blog_category_map` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_comment`
--

DROP TABLE IF EXISTS `blog_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `blog_entry_id` int(11) NOT NULL,
  `author` varchar(64) NOT NULL,
  `email` varchar(64) DEFAULT NULL,
  `address` varchar(100) DEFAULT NULL,
  `content` text NOT NULL,
  `created` datetime NOT NULL,
  `is_chef` tinyint(1) DEFAULT '0',
  `published` tinyint(1) DEFAULT '0',
  `ip` varchar(50) DEFAULT NULL,
  `useragent` varchar(100) DEFAULT NULL,
  `referer` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `blog_entry_id` (`blog_entry_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_comment`
--

LOCK TABLES `blog_comment` WRITE;
/*!40000 ALTER TABLE `blog_comment` DISABLE KEYS */;
/*!40000 ALTER TABLE `blog_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_entry`
--

DROP TABLE IF EXISTS `blog_entry`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_entry` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `link` varchar(100) NOT NULL,
  `preview` varchar(255) DEFAULT '',
  `preview_image` varchar(100) DEFAULT '',
  `content` text NOT NULL,
  `parsed` text NOT NULL,
  `created` datetime NOT NULL,
  `published` tinyint(1) DEFAULT '1',
  `indexed` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`id`),
  UNIQUE KEY `title` (`title`),
  UNIQUE KEY `link` (`link`)
) ENGINE=MyISAM AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_entry`
--

LOCK TABLES `blog_entry` WRITE;
/*!40000 ALTER TABLE `blog_entry` DISABLE KEYS */;
INSERT INTO `blog_entry` VALUES (1,'Illuminating a shot glass tray for fun and Prosit!','illuminating-a-shot-glass-tray-for-fun-and-prosit','Build a wooden shot glass tray, add a couple of RGB LEDs, a button and a microcontroller and you will have a nice mood light for the next party. Throw in some extra code and you end up with a drinking game as easy and effective as Heads or Tails.','battletray_grey.jpg','It all began with an upcoming bachelor party. A friend had the idea to create a self-made shot glass tray and asked if I could add some LEDs into it to have some nice lighting effects along with it ..and who doesn\'t like LEDs anyway? So I figured, sure, some PWM and multiplexing - been there, done that, don\'t see a problem. Let\'s do that. So I went on and started pondering over color patterns, when it hit me. We need a drinking game along with all that! Two people drinking against each other, randomly selected by lighting up each person\'s personal glass. A battle of the shot glass tray. [*Battletray*](https://github.com/sgreg/battletray).\r\n\r\n![Opaque lighted Battletray](/images/battletray_opaque_lighted.jpg \"Battletray lighted up with some opaque liquids\")\r\n\r\n## Lighting it up\r\n\r\nSo as I said, the basic concept seemed straight forward, [Pulse-width Modulation (PWM)](https://en.wikipedia.org/wiki/Pulse-width_modulation) to control the red, green and blue amount of each RGB LED, and Multiplexing to select each LED individually. In our case, the tray will have 10 RGB LEDs, which means\r\n* 3 lines for each red, green and blue\r\n* 10 lines for the common cathode of each LED\r\n\r\nUsing an ATmega328 in a PDIP28 package provided enough I/O pins for the task, no need for actual multiplexer components such as a 4051. Also the PWM ended up as software PWM instead of using the ATmega\'s hardware PWM unit (I need the timers for other tasks anyway, and admittedly, I haven\'t managed yet to use the hardware PWM properly for multiplexed RGB LEDs)\r\n\r\n\r\n### Hardware\r\n\r\nAs mentioned, it\'s all build around an ATmega328 microcontroller since this is my default go to microcontroller. Using the multiplexed design, which means only one LED is lighted up at the same time, we only need three resistors for the commonly shared red, green and blue diodes. The LED itself has a common cathode, so connecting it to ground will actually enable the LED. Leaving the line floating will turn it off.\r\n\r\nThe ATmega\'s I/O pins are quite limited in the amount of current it can source (i.e. ground it) and I didn\'t want to risk anything here. So instead of going straight to the I/O pin, I used NPN transistors to switch each LED to ground.\r\n\r\nOther than that, it\'s a switch, a resistor and capacitor for hardware debouncing and the usual decouple capacitor for the microcontroller\'s power. Summarized, for a 10 LED version, our components are:\r\n* 1 ATmega328 controller\r\n* 10 common cathode RGB LEDs\r\n* 10 NPN transistors (I had some 2N3904 lying around, so I took those)\r\n* 2 100nF capacitors for button debounce and decoupling\r\n* 1 1k0 resistor for button debounce\r\n* 1 180R resistor for the red diode (may vary with other LEDs)\r\n* 2 120R resistors for the blue and green diode (again, may vary)\r\n\r\n![Battletray PCB](/images/battletray_pcb.jpg \"Battletray PCB\")\r\n\r\nKiCad project and PDF schematic can be found [on Github](https://github.com/sgreg/battletray/tree/master/hardware). As you can see, I used a perfboard, so naturally there\'s no PCB layout available, at least at this point.\r\n\r\n### Firmware\r\nThe microcontroller is mostly busy doing the PWM and multiplexing for each LED over and over again. To give a basic idea how that looks like for 10 LEDs displaying all the same color, here\'s some code:\r\n```c\r\n#define LEDS 10\r\n#define MAX_VALUE 64 /* PWM steps */\r\nchar rgb[3] = {0, 32, 63}; /* PWM duty cycle based on 64 steps */\r\n\r\nfor (i = 0; i < LEDS; i++) {\r\n    led_on(i); /* turn on a single LED */\r\n    for (value = 0; value < MAX_VALUE; value++) {\r\n        /* simple software PWM for each color */\r\n        red   = (rgb[0] > value) ? 1 : 0;\r\n        green = (rgb[1] > value) ? 1 : 0;\r\n        blue  = (rgb[2] > value) ? 1 : 0;\r\n    }\r\n    led_off(i); /* turn off the LED */\r\n}\r\n```\r\nThis is obviously a very simplified version, but it should give the basic idea. The full implementation can be seen in the ```run_light()``` function in the [source code](https://github.com/sgreg/battletray/blob/master/firmware/led.c).\r\n\r\nUsing 64 steps for the PWM means each red, green and blue diode can have 64 different intensity levels (including being off), so a theoretical total of 64\\*64\\*64 = 256k colors can be achieved. This however is really more theoretical than anything close to the real world since you won\'t notice every single step difference.\r\n\r\nThe 64 itself was rather arbitrarily chosen. Using less steps will make color transitions less smooth while using more might end up in too long loop times, resulting in flickering. Since it\'s the laziness of our eyes that will make each LED appear to be turned on all of the time (a camera lens is more sensitive to this), the proper frame rate / loop times need to be used. Running at 8MHz, 10 LEDs with 64 steps is no problem.\r\n\r\n## Add some funky lighting\r\nNow, displaying every LED with one single color is a bit boring - we wouldn\'t even need a microcontroller for that. Instead, I wanted to have different color patterns in different modes with smooth color transitions - and let\'s not forget about the drinking game part.\r\n\r\nStarting slowly, let\'s say we want to periodically toggle between two different colors, a cyan and purple shade. We cannot really use the `_delay_ms()` function or its variants since this will also delay the software PWM and we end up with either flickering or no light at all. We could use a simple variable to count until a certain value is reached and toggle the color, but that\'s not very practical, it\'s a trial and error process to find the correct counter value and we need to adjust it every time we change the code.\r\n\r\nWell, the microcontroller\'s timer units can practically do the same in hardware, independent of what the CPU is doing. We just need to calculate the counter value once for the toggle time we want, and let the interrupt handler do the rest.\r\n\r\n```c\r\n#define COLOR_MODE_MAX 2 /* just two modes */\r\nuint8_t color_mode;\r\n\r\nISR(TIMER1_COMPA_vect)\r\n{\r\n    /* timer1 compare match interrupt handler, called every n milliseconds */\r\n    if (++color_mode == COLOR_MODE_MAX) {\r\n        color_mode = 0;\r\n    }\r\n}\r\n\r\nvoid\r\nset_all_leds(uint8_t red, uint8_t green, uint8_t blue)\r\n{\r\n    /* imagine this does the whole multiplexing/PWM stuff */\r\n}\r\n\r\nvoid\r\nset_leds(void)\r\n{\r\n    if (color_mode == 0) {\r\n        set_all_leds(0, 31, 63);\r\n    } else {\r\n        set_all_leds(63, 0, 31);\r\n    }\r\n}\r\n\r\nint\r\nmain(void)\r\n{\r\n    /* imagine here\'s all the I/O port setup, timer initialization etc. */\r\n\r\n    while (1) {\r\n        set_leds();\r\n    }\r\n}\r\n```\r\n\r\nAgain, heavily simplified, but in the very big picture, this is pretty much it: a defined set of color values (or a base for it) and a timer interrupt that will set up the next color value. Though, this still sets every LED to the same color.\r\n\r\nTo light up each LED in a different color, we basically just have to add an array of values and loop through that one instead.\r\n\r\n```c\r\nuint8_t colors[LEDS][3] = {\r\n    63,  0,  0,\r\n     0, 63,  0,\r\n     0,  0, 63,\r\n    63,  0, 63,\r\n    ...\r\n};\r\n\r\nvoid\r\nset_one_led(uint8_t led, uint8_t red, uint8_t green, uint8_t blue)\r\n{\r\n    /*\r\n     * imagine again this does the whole multiplexing/PWM stuff, but this time\r\n     * it only handles a single LED defined by the \"led\" parameter\r\n     */\r\n}\r\n\r\nvoid\r\nset_leds(void)\r\n{\r\n    /* called from the main loop */\r\n    uint8_t i;\r\n\r\n    for (i = 0; i < LEDS; i++) {\r\n        set_one_led(i, colors[i][0], colors[i][1], colors[i][2]);\r\n    }\r\n}\r\n```\r\n\r\nAlright, now every LED has a different color. Let\'s make the colors rotate so that on every timer interrupt, the colors are shifted one position.\r\n\r\n```c\r\nuint8_t offset;\r\n\r\nISR(TIMER1_COMPA_vect)\r\n{\r\n    /* timer compare match interrupt handler */\r\n    if (++offset == LEDS) {\r\n        offset = 0;\r\n    }\r\n}\r\n\r\nvoid\r\nset_leds(void)\r\n{\r\n    /* called from the main loop */\r\n    uint8_t i;\r\n    uint8_t index = 0;\r\n\r\n    for (i = 0; i < LEDS; i++) {\r\n        /* shift the start index according to the offset */\r\n        index = offset + i;\r\n        if (index >= LEDS) {\r\n            index -= LEDS;\r\n        }\r\n        set_one_led(index, colors[i][0], colors[i][1], colors[i][2]);\r\n    }\r\n}\r\n```\r\n\r\nAnd this gives us the basic concept for moving color patterns.\r\n\r\n### Smoothen in up\r\nSo far, the color changes are happening drastically by simply changing the value. This can be okay, but it\'s also nice to have a smooth gradient transition between the color changes.\r\n\r\nInstead of simply setting the color to the defined number of PWM steps, increasing or decreasing the value in single steps until the specified value is reached will get you there.\r\n\r\n### Pack it into modules\r\n\r\nSo, now we have a few random colors rotating around, but why limit it to one single color pattern. If we modularize the main concept, we can implement all kinds of different patterns. In the end, it\'s just a loop that handles the LEDs and a timer interrupt handler that adjusts the LEDs\' values. Replace the direct function calls with function pointers for the setup and interrupt handling, pack it into a struct and it\'s done. Check the `module.c` / `module.h` code for the main concept and any of the `module_*.c` files for direct implementation of that.\r\n\r\n## The Button!\r\n\r\nRight.. I haven\'t really mentioned the button yet. Well, since I just mentioned to concept of having different color patterns implemented, we also need a way to select them. A single button will do just that. Press it and the next defined color pattern module will be activated.\r\n\r\n![Battletray button](/images/battletray_button.jpg \"A button matching the theme\")\r\n\r\nThe button itself is connected to the ATmega\'s external interrupt 0 pin (`INT0`) and is active low, i.e. pressing it will pull it to ground. The interrupt itself is set up to be triggered on falling edge therefore.\r\n\r\nThat covers switching between the different color patterns, but what about the drinking game? Would be good to have that separated from the light modes. Well, just add another timer - the ATmega has three of them. Pressing the button will start a timer. The timer\'s overflow interrupt handler (triggered when the timer counted all its way up to its maximum value and overflows to zero) will check if the button is still pressed, and if so treat it as a long press which toggles between the light and the game mode. Okay, actually it uses the timer and a counter variable in this case to keep the delay for normal button presses short. Triggering the external interrupt on both edges is an alternative here.\r\n\r\n\r\n## Let the battle begin\r\n\r\nNow after covering the basics of getting the LEDs lit up in different colors and patterns (yeah, in a quite abstract way, but just check the [source code](https://github.com/sgreg/battletray/firmware) for the details), it is time to come to the drinking game - which in the end is really just another light pattern mode, only with a bit more complex timer handling.\r\n\r\nThe drinking game itself is simple - not that drinking games are generally known for their complexity anyway. Everyone gets a dedicated glass on the tray which are naturally filled with whatever you prefer. Someone, whoever wants, presses the button and the LEDs start spinning and flashing around and eventually two single LEDs light up in red and blue respectively. If it\'s your glass, you drink. The End.\r\n\r\nSometimes however a second pair of glasses will light up, and every now and then even a third pair. Same rules apply. A variation of the rule is, if you finish last, you have to drink another shot. Also, the glasses are lit up in either red or blue at this point, so teams could be formed as well this way.\r\n\r\n### How it\'s done\r\n\r\nLike I said, in a way, it\'s just another lighting pattern. Instead of toggling through the different available pattern modules, as it\'s the case in the lighting main mode, pressing the button in the drinking game mode will simply restart the module.\r\n\r\nThe timer handling consists of two main stages\r\n1. LED spinning and flashing\r\n2. Displaying the contestants\r\n\r\nThe contestants are determined with a pseudo random number generated provided by the AVR C library that is very unprofessionally seeded with different combinations of timer values. In drinking game mode, another timer next to the LED handling timer and button press timer is active. In different stages and also during button press and release, the timers\' values are stored and later used for seeding the number generator.\r\n\r\nBased on which random numbers are then generated, the initial contestants are chosen and it\'s also defined whether there will be a second or third pair of contestants in that round.\r\n\r\nRather than simply using the generated random number to choose the contestant, all contestants are put in an array and the random numbers walk through the array\'s indices. This adds an even distribution to the selection process.\r\n\r\n```c\r\nuint8_t chosen[LEDS];\r\n\r\nuint8_t setup_next_one(void)\r\n{\r\n    uint8_t next = get_random_number();\r\n    while (chosen[next] == 1) {\r\n        next = get_random_number();\r\n    }\r\n    chosen[next] = 1;\r\n    return next;\r\n}\r\n```\r\nThe actual implementation is a bit different and also adds checks to avoid this ends up in an endless loop.\r\n\r\nAnd for now, this is really all to it.\r\n\r\n## What\'s next\r\n\r\nThe whole firmware is rather messy at the moment. There wasn\'t much time from idea to deadline, so my priority was in functionality over cleanness. Some parts are also rather nastily hacked together so they simply work, lots of room for improvement.\r\n\r\nAs for the general concept, some additional ideas already came up. One is to add either mechanical or optical switches to the glass holders to detect when a glass was taken out and put back in. This way the rule variation of \"last one drinks again\" can be enforced. Another idea is to add buttons for each glass to add extra variations in who will have to drink.\r\n\r\nSo far this was a one-time project with a single prototype that we gave away as present. But my friend is already eager to build another one and add the mentioned improvements to it. Who knows, maybe it even ends up on Kickstarter one day.\r\n','<p>It all began with an upcoming bachelor party. A friend had the idea to create a self-made shot glass tray and asked if I could add some LEDs into it to have some nice lighting effects along with it ..and who doesn\'t like LEDs anyway? So I figured, sure, some PWM and multiplexing - been there, done that, don\'t see a problem. Let\'s do that. So I went on and started pondering over color patterns, when it hit me. We need a drinking game along with all that! Two people drinking against each other, randomly selected by lighting up each person\'s personal glass. A battle of the shot glass tray. <a href=\"https://github.com/sgreg/battletray\"><em>Battletray</em></a>.</p>\n<p><img src=\"/images/battletray_opaque_lighted.jpg\" alt=\"Opaque lighted Battletray\" title=\"Battletray lighted up with some opaque liquids\"></p>\n<h2>Lighting it up</h2>\n<p>So as I said, the basic concept seemed straight forward, <a href=\"https://en.wikipedia.org/wiki/Pulse-width_modulation\">Pulse-width Modulation (PWM)</a> to control the red, green and blue amount of each RGB LED, and Multiplexing to select each LED individually. In our case, the tray will have 10 RGB LEDs, which means</p>\n<ul>\n<li>3 lines for each red, green and blue</li>\n<li>10 lines for the common cathode of each LED</li>\n</ul>\n<p>Using an ATmega328 in a PDIP28 package provided enough I/O pins for the task, no need for actual multiplexer components such as a 4051. Also the PWM ended up as software PWM instead of using the ATmega\'s hardware PWM unit (I need the timers for other tasks anyway, and admittedly, I haven\'t managed yet to use the hardware PWM properly for multiplexed RGB LEDs)</p>\n<h3>Hardware</h3>\n<p>As mentioned, it\'s all build around an ATmega328 microcontroller since this is my default go to microcontroller. Using the multiplexed design, which means only one LED is lighted up at the same time, we only need three resistors for the commonly shared red, green and blue diodes. The LED itself has a common cathode, so connecting it to ground will actually enable the LED. Leaving the line floating will turn it off.</p>\n<p>The ATmega\'s I/O pins are quite limited in the amount of current it can source (i.e. ground it) and I didn\'t want to risk anything here. So instead of going straight to the I/O pin, I used NPN transistors to switch each LED to ground.</p>\n<p>Other than that, it\'s a switch, a resistor and capacitor for hardware debouncing and the usual decouple capacitor for the microcontroller\'s power. Summarized, for a 10 LED version, our components are:</p>\n<ul>\n<li>1 ATmega328 controller</li>\n<li>10 common cathode RGB LEDs</li>\n<li>10 NPN transistors (I had some 2N3904 lying around, so I took those)</li>\n<li>2 100nF capacitors for button debounce and decoupling</li>\n<li>1 1k0 resistor for button debounce</li>\n<li>1 180R resistor for the red diode (may vary with other LEDs)</li>\n<li>2 120R resistors for the blue and green diode (again, may vary)</li>\n</ul>\n<p><img src=\"/images/battletray_pcb.jpg\" alt=\"Battletray PCB\" title=\"Battletray PCB\"></p>\n<p>KiCad project and PDF schematic can be found <a href=\"https://github.com/sgreg/battletray/tree/master/hardware\">on Github</a>. As you can see, I used a perfboard, so naturally there\'s no PCB layout available, at least at this point.</p>\n<h3>Firmware</h3>\n<p>The microcontroller is mostly busy doing the PWM and multiplexing for each LED over and over again. To give a basic idea how that looks like for 10 LEDs displaying all the same color, here\'s some code:</p>\n<pre class=\"lang-c line-numbers\"><code>#define LEDS 10\n#define MAX_VALUE 64 /* PWM steps */\nchar rgb[3] = {0, 32, 63}; /* PWM duty cycle based on 64 steps */\n\nfor (i = 0; i &lt; LEDS; i++) {\n    led_on(i); /* turn on a single LED */\n    for (value = 0; value &lt; MAX_VALUE; value++) {\n        /* simple software PWM for each color */\n        red   = (rgb[0] &gt; value) ? 1 : 0;\n        green = (rgb[1] &gt; value) ? 1 : 0;\n        blue  = (rgb[2] &gt; value) ? 1 : 0;\n    }\n    led_off(i); /* turn off the LED */\n}\n</code></pre>\n<p>This is obviously a very simplified version, but it should give the basic idea. The full implementation can be seen in the <code>run_light()</code> function in the <a href=\"https://github.com/sgreg/battletray/blob/master/firmware/led.c\">source code</a>.</p>\n<p>Using 64 steps for the PWM means each red, green and blue diode can have 64 different intensity levels (including being off), so a theoretical total of 64*64*64 = 256k colors can be achieved. This however is really more theoretical than anything close to the real world since you won\'t notice every single step difference.</p>\n<p>The 64 itself was rather arbitrarily chosen. Using less steps will make color transitions less smooth while using more might end up in too long loop times, resulting in flickering. Since it\'s the laziness of our eyes that will make each LED appear to be turned on all of the time (a camera lens is more sensitive to this), the proper frame rate / loop times need to be used. Running at 8MHz, 10 LEDs with 64 steps is no problem.</p>\n<h2>Add some funky lighting</h2>\n<p>Now, displaying every LED with one single color is a bit boring - we wouldn\'t even need a microcontroller for that. Instead, I wanted to have different color patterns in different modes with smooth color transitions - and let\'s not forget about the drinking game part.</p>\n<p>Starting slowly, let\'s say we want to periodically toggle between two different colors, a cyan and purple shade. We cannot really use the <code>_delay_ms()</code> function or its variants since this will also delay the software PWM and we end up with either flickering or no light at all. We could use a simple variable to count until a certain value is reached and toggle the color, but that\'s not very practical, it\'s a trial and error process to find the correct counter value and we need to adjust it every time we change the code.</p>\n<p>Well, the microcontroller\'s timer units can practically do the same in hardware, independent of what the CPU is doing. We just need to calculate the counter value once for the toggle time we want, and let the interrupt handler do the rest.</p>\n<pre class=\"lang-c line-numbers\"><code>#define COLOR_MODE_MAX 2 /* just two modes */\nuint8_t color_mode;\n\nISR(TIMER1_COMPA_vect)\n{\n    /* timer1 compare match interrupt handler, called every n milliseconds */\n    if (++color_mode == COLOR_MODE_MAX) {\n        color_mode = 0;\n    }\n}\n\nvoid\nset_all_leds(uint8_t red, uint8_t green, uint8_t blue)\n{\n    /* imagine this does the whole multiplexing/PWM stuff */\n}\n\nvoid\nset_leds(void)\n{\n    if (color_mode == 0) {\n        set_all_leds(0, 31, 63);\n    } else {\n        set_all_leds(63, 0, 31);\n    }\n}\n\nint\nmain(void)\n{\n    /* imagine here&#39;s all the I/O port setup, timer initialization etc. */\n\n    while (1) {\n        set_leds();\n    }\n}\n</code></pre>\n<p>Again, heavily simplified, but in the very big picture, this is pretty much it: a defined set of color values (or a base for it) and a timer interrupt that will set up the next color value. Though, this still sets every LED to the same color.</p>\n<p>To light up each LED in a different color, we basically just have to add an array of values and loop through that one instead.</p>\n<pre class=\"lang-c line-numbers\"><code>uint8_t colors[LEDS][3] = {\n    63,  0,  0,\n     0, 63,  0,\n     0,  0, 63,\n    63,  0, 63,\n    ...\n};\n\nvoid\nset_one_led(uint8_t led, uint8_t red, uint8_t green, uint8_t blue)\n{\n    /*\n     * imagine again this does the whole multiplexing/PWM stuff, but this time\n     * it only handles a single LED defined by the &quot;led&quot; parameter\n     */\n}\n\nvoid\nset_leds(void)\n{\n    /* called from the main loop */\n    uint8_t i;\n\n    for (i = 0; i &lt; LEDS; i++) {\n        set_one_led(i, colors[i][0], colors[i][1], colors[i][2]);\n    }\n}\n</code></pre>\n<p>Alright, now every LED has a different color. Let\'s make the colors rotate so that on every timer interrupt, the colors are shifted one position.</p>\n<pre class=\"lang-c line-numbers\"><code>uint8_t offset;\n\nISR(TIMER1_COMPA_vect)\n{\n    /* timer compare match interrupt handler */\n    if (++offset == LEDS) {\n        offset = 0;\n    }\n}\n\nvoid\nset_leds(void)\n{\n    /* called from the main loop */\n    uint8_t i;\n    uint8_t index = 0;\n\n    for (i = 0; i &lt; LEDS; i++) {\n        /* shift the start index according to the offset */\n        index = offset + i;\n        if (index &gt;= LEDS) {\n            index -= LEDS;\n        }\n        set_one_led(index, colors[i][0], colors[i][1], colors[i][2]);\n    }\n}\n</code></pre>\n<p>And this gives us the basic concept for moving color patterns.</p>\n<h3>Smoothen in up</h3>\n<p>So far, the color changes are happening drastically by simply changing the value. This can be okay, but it\'s also nice to have a smooth gradient transition between the color changes.</p>\n<p>Instead of simply setting the color to the defined number of PWM steps, increasing or decreasing the value in single steps until the specified value is reached will get you there.</p>\n<h3>Pack it into modules</h3>\n<p>So, now we have a few random colors rotating around, but why limit it to one single color pattern. If we modularize the main concept, we can implement all kinds of different patterns. In the end, it\'s just a loop that handles the LEDs and a timer interrupt handler that adjusts the LEDs\' values. Replace the direct function calls with function pointers for the setup and interrupt handling, pack it into a struct and it\'s done. Check the <code>module.c</code> / <code>module.h</code> code for the main concept and any of the <code>module_*.c</code> files for direct implementation of that.</p>\n<h2>The Button!</h2>\n<p>Right.. I haven\'t really mentioned the button yet. Well, since I just mentioned to concept of having different color patterns implemented, we also need a way to select them. A single button will do just that. Press it and the next defined color pattern module will be activated.</p>\n<p><img src=\"/images/battletray_button.jpg\" alt=\"Battletray button\" title=\"A button matching the theme\"></p>\n<p>The button itself is connected to the ATmega\'s external interrupt 0 pin (<code>INT0</code>) and is active low, i.e. pressing it will pull it to ground. The interrupt itself is set up to be triggered on falling edge therefore.</p>\n<p>That covers switching between the different color patterns, but what about the drinking game? Would be good to have that separated from the light modes. Well, just add another timer - the ATmega has three of them. Pressing the button will start a timer. The timer\'s overflow interrupt handler (triggered when the timer counted all its way up to its maximum value and overflows to zero) will check if the button is still pressed, and if so treat it as a long press which toggles between the light and the game mode. Okay, actually it uses the timer and a counter variable in this case to keep the delay for normal button presses short. Triggering the external interrupt on both edges is an alternative here.</p>\n<h2>Let the battle begin</h2>\n<p>Now after covering the basics of getting the LEDs lit up in different colors and patterns (yeah, in a quite abstract way, but just check the <a href=\"https://github.com/sgreg/battletray/firmware\">source code</a> for the details), it is time to come to the drinking game - which in the end is really just another light pattern mode, only with a bit more complex timer handling.</p>\n<p>The drinking game itself is simple - not that drinking games are generally known for their complexity anyway. Everyone gets a dedicated glass on the tray which are naturally filled with whatever you prefer. Someone, whoever wants, presses the button and the LEDs start spinning and flashing around and eventually two single LEDs light up in red and blue respectively. If it\'s your glass, you drink. The End.</p>\n<p>Sometimes however a second pair of glasses will light up, and every now and then even a third pair. Same rules apply. A variation of the rule is, if you finish last, you have to drink another shot. Also, the glasses are lit up in either red or blue at this point, so teams could be formed as well this way.</p>\n<h3>How it\'s done</h3>\n<p>Like I said, in a way, it\'s just another lighting pattern. Instead of toggling through the different available pattern modules, as it\'s the case in the lighting main mode, pressing the button in the drinking game mode will simply restart the module.</p>\n<p>The timer handling consists of two main stages</p>\n<ol>\n<li>LED spinning and flashing</li>\n<li>Displaying the contestants</li>\n</ol>\n<p>The contestants are determined with a pseudo random number generated provided by the AVR C library that is very unprofessionally seeded with different combinations of timer values. In drinking game mode, another timer next to the LED handling timer and button press timer is active. In different stages and also during button press and release, the timers\' values are stored and later used for seeding the number generator.</p>\n<p>Based on which random numbers are then generated, the initial contestants are chosen and it\'s also defined whether there will be a second or third pair of contestants in that round.</p>\n<p>Rather than simply using the generated random number to choose the contestant, all contestants are put in an array and the random numbers walk through the array\'s indices. This adds an even distribution to the selection process.</p>\n<pre class=\"lang-c line-numbers\"><code>uint8_t chosen[LEDS];\n\nuint8_t setup_next_one(void)\n{\n    uint8_t next = get_random_number();\n    while (chosen[next] == 1) {\n        next = get_random_number();\n    }\n    chosen[next] = 1;\n    return next;\n}\n</code></pre>\n<p>The actual implementation is a bit different and also adds checks to avoid this ends up in an endless loop.</p>\n<p>And for now, this is really all to it.</p>\n<h2>What\'s next</h2>\n<p>The whole firmware is rather messy at the moment. There wasn\'t much time from idea to deadline, so my priority was in functionality over cleanness. Some parts are also rather nastily hacked together so they simply work, lots of room for improvement.</p>\n<p>As for the general concept, some additional ideas already came up. One is to add either mechanical or optical switches to the glass holders to detect when a glass was taken out and put back in. This way the rule variation of \"last one drinks again\" can be enforced. Another idea is to add buttons for each glass to add extra variations in who will have to drink.</p>\n<p>So far this was a one-time project with a single prototype that we gave away as present. But my friend is already eager to build another one and add the mentioned improvements to it. Who knows, maybe it even ends up on Kickstarter one day.</p>\n','2016-04-17 22:16:28',1,1),(2,'ATmegaX8 protoboard','atmegax8-protoboard','A simple, no fuzz ISP connector board for ATmega48/88/168/328 microcontrollers in DIP28 packages. Works both standalone and with a breadboard, just attach a programmer with 10pin header, such as the USBasp, and off you go.','atmegax8-protoboard.jpg','Let\'s just get the [schematic and PCB layout link](https://github.com/sgreg/atmegax8-protoboard) out right away.\r\n\r\nAt first glance, this may appear nothing more than a breakout board for a DIP component, which is arguably somewhat pointless. But the in-system programming (ISP) connector does add a nice benefit for prototyping with ATmega48/88/168/328 microcontrollers, especially if you\'re using a programmer with a 10 pin connector, for example the nicely cheap and open [USBasp](http://www.fischl.de/usbasp/).\r\n\r\nObviously I do not care for Arduino. But on the other hand, I cannot just state this and not provide an alternative. So once I wrote all about the prototyping board and its evolvement, I\'ll compose a second post about actually using it with basic AVR development tools, mainly [avrdude](http://www.nongnu.org/avrdude/).\r\n\r\n## How it started\r\nIt was one of those nights where I began a new project and built it up from scratch on a breadboard.  I had still some other project ongoing by that time, which wasn\'t too much of a problem logistics wise as I had a spare breadboard lying around. However, what I did not had lying around was a spare ISP adapter. Cutting edge technology like my adapter is hard to come by, so I always had to share my state of the art homebrew adapter for every project.\r\n\r\n![ISP header connector](/images/atmegax8-isp-header-before.jpg \"Cutting edge technology\")\r\n\r\nThe previous project grew over time and by the time I needed the ISP adapter, it was just one lump of wires and components. Applying some faith in one\'s soldering skills (and in Chinese breadboard wire quality), and one gentle pull later it was ready for new adventures. Luckily the previous project moved already to the PCB prototyping stage, so I wouldn\'t need to get the adapter back in that mess of wires.\r\n\r\nStill, there had to be a better way for future endeavors. Also, ignoring anything that could be done with an ATtiny controller, the ATmega328 and its brothers are my go-to microcontroller for any 8bit AVR stuff, so I wouldn\'t necessarily be looking for an all-size-fits-all solution.\r\n\r\n## Finding a better way\r\n\r\nNaturally the first idea was to just build a second ISP adapter. But this was already more of a half-assed solution, and I\'m surprised this one lasted that long in the first place. Plus, come to think of it, I did have some minor stability issues with programming the flash memory every once in a while. Might have been the wiring?\r\n\r\nIt didn\'t take much to end up with a breakout board that comes with an ISP connector attached. And, since I always add my little decoupling capacitor, I just throw that in the design as well. Off to [OSH Park](https://oshpark.com/) with the first revision.\r\n\r\n### Revision A\r\nI was clearly too eager to get a prototype as quick as possible, so I just started designing without really thinking about the dimensions, and definitely not thinking about the impact of the dimension when using it in a breadboard.\r\n\r\n![ATmegaX8 Protoboard Revision A](/images/atmegax8-protoboard-revA.jpg \"Revision A with a lot of space..\")\r\n\r\nConsidering you most likely want to connect something to the controller\'s pins, this is a pretty useless prototyping board. Yeah sure, it will work if you only need a single wire per port, but I wasn\'t going to rely on that.\r\n\r\nTime for a redesign; squeeze the connectors closer to the controller - yes, sacrificing the pin numbering along with it - and reduce the PCB borders. And while I\'m at it, add a jumper to optionally connect analog voltage AVCC to VCC, although I can\'t fully explain why I did that. And off to OSH Park again.\r\n\r\n### Revision B\r\nAfter waiting the usual two weeks - give or take - to get my Perfect Purple PCB to Finland, I was satisfied with the result of my redesign.\r\n\r\n![ATmegaX8 Protoboard Revision B](/images/atmegax8-protoboard-revB.jpg \"Revision B - now actually useful\")\r\n\r\nYes, I am still sacrificing a row on each side, and the actual benefit may seem marginal. After all, it\'s merely more than adding the ISP connector. But I do believe it\'s still worth the sacrifice for a tad smoother prototyping start.\r\n\r\n## Hooking it up\r\n\r\nTime to connect a 10pin ribbon cable to the protoboard holding an ATmega328P and an USBasp programmer plugged into a USB port.\r\n\r\n![ATmegaX8 Protoboard plugged in](/images/atmegax8-protoboard-plugged.jpg \"Plugged in and ready to go\")\r\n\r\nAs you can see, this works even standalone without a breadboard, but it is supposed to be a prototyping board after all, so I\'ll most likely still want the breadboard connecting option.\r\n\r\nSo, the USB hub and USBasp programmer have some LEDs shining, that\'s a good start, let\'s see what avrdude has to say.\r\n\r\n```txt\r\n$ avrdude -p m328p -c usbasp\r\n\r\navrdude: warning: cannot set sck period. please check for usbasp firmware update.\r\navrdude: AVR device initialized and ready to accept instructions\r\navrdude: Device signature = 0x1e950f (probably m328p)\r\n\r\navrdude: safemode: Fuses OK (E:F9, H:DF, L:E2)\r\n\r\navrdude done.  Thank you.\r\n\r\n$\r\n```\r\n\r\nAnd avrdude says that it was able to read the device signature and the fuses, and we didn\'t ask for more, so that\'s perfect. It\'s safe to ignore the warning.\r\n\r\nBut just to be sure, I\'ll try to flash a .hex file to it and see if it succeeds.\r\n\r\n```txt\r\n$ make program \r\navrdude -p atmega328p -c usbasp -U flash:w:4chordmidi.hex\r\n\r\navrdude: warning: cannot set sck period. please check for usbasp firmware update.\r\navrdude: AVR device initialized and ready to accept instructions\r\n\r\nReading | ################################################## | 100% 0.00s\r\n\r\navrdude: Device signature = 0x1e950f (probably m328p)\r\navrdude: NOTE: \"flash\" memory has been specified, an erase cycle will be performed\r\n         To disable this feature, specify the -D option.\r\navrdude: erasing chip\r\navrdude: warning: cannot set sck period. please check for usbasp firmware update.\r\navrdude: reading input file \"4chordmidi.hex\"\r\navrdude: input file 4chordmidi.hex auto detected as Intel Hex\r\navrdude: writing flash (8876 bytes):\r\n\r\nWriting | ################################################## | 100% 7.02s\r\n\r\navrdude: 8876 bytes of flash written\r\navrdude: verifying flash memory against 4chordmidi.hex:\r\navrdude: load data flash data from input file 4chordmidi.hex:\r\navrdude: input file 4chordmidi.hex auto detected as Intel Hex\r\navrdude: input file 4chordmidi.hex contains 8876 bytes\r\navrdude: reading on-chip flash data:\r\n\r\nReading | ################################################## | 100% 4.56s\r\n\r\navrdude: verifying ...\r\navrdude: 8876 bytes of flash verified\r\n\r\navrdude: safemode: Fuses OK (E:F9, H:DF, L:E2)\r\n\r\navrdude done.  Thank you.\r\n\r\n$\r\n```\r\n\r\nYes. Yes it did. The protoboard is ready for ..well, prototyping.\r\n\r\n## What\'s next\r\n\r\nNext step is to actually just use it and focus on other things.\r\n\r\nBut one day I might add more boards for other controllers such as the ATtiny24/44/84 and ATtiny25/45/85. I might also add a board with USB connector and basic components to have a [V-USB](https://www.obdev.at/products/vusb/index.html) prototyping board.\r\n\r\nBut my main intention is to have a no frills board and keep it as simple as possible.','<p>Let\'s just get the <a href=\"https://github.com/sgreg/atmegax8-protoboard\">schematic and PCB layout link</a> out right away.</p>\n<p>At first glance, this may appear nothing more than a breakout board for a DIP component, which is arguably somewhat pointless. But the in-system programming (ISP) connector does add a nice benefit for prototyping with ATmega48/88/168/328 microcontrollers, especially if you\'re using a programmer with a 10 pin connector, for example the nicely cheap and open <a href=\"http://www.fischl.de/usbasp/\">USBasp</a>.</p>\n<p>Obviously I do not care for Arduino. But on the other hand, I cannot just state this and not provide an alternative. So once I wrote all about the prototyping board and its evolvement, I\'ll compose a second post about actually using it with basic AVR development tools, mainly <a href=\"http://www.nongnu.org/avrdude/\">avrdude</a>.</p>\n<h2>How it started</h2>\n<p>It was one of those nights where I began a new project and built it up from scratch on a breadboard.  I had still some other project ongoing by that time, which wasn\'t too much of a problem logistics wise as I had a spare breadboard lying around. However, what I did not had lying around was a spare ISP adapter. Cutting edge technology like my adapter is hard to come by, so I always had to share my state of the art homebrew adapter for every project.</p>\n<p><img src=\"/images/atmegax8-isp-header-before.jpg\" alt=\"ISP header connector\" title=\"Cutting edge technology\"></p>\n<p>The previous project grew over time and by the time I needed the ISP adapter, it was just one lump of wires and components. Applying some faith in one\'s soldering skills (and in Chinese breadboard wire quality), and one gentle pull later it was ready for new adventures. Luckily the previous project moved already to the PCB prototyping stage, so I wouldn\'t need to get the adapter back in that mess of wires.</p>\n<p>Still, there had to be a better way for future endeavors. Also, ignoring anything that could be done with an ATtiny controller, the ATmega328 and its brothers are my go-to microcontroller for any 8bit AVR stuff, so I wouldn\'t necessarily be looking for an all-size-fits-all solution.</p>\n<h2>Finding a better way</h2>\n<p>Naturally the first idea was to just build a second ISP adapter. But this was already more of a half-assed solution, and I\'m surprised this one lasted that long in the first place. Plus, come to think of it, I did have some minor stability issues with programming the flash memory every once in a while. Might have been the wiring?</p>\n<p>It didn\'t take much to end up with a breakout board that comes with an ISP connector attached. And, since I always add my little decoupling capacitor, I just throw that in the design as well. Off to <a href=\"https://oshpark.com/\">OSH Park</a> with the first revision.</p>\n<h3>Revision A</h3>\n<p>I was clearly too eager to get a prototype as quick as possible, so I just started designing without really thinking about the dimensions, and definitely not thinking about the impact of the dimension when using it in a breadboard.</p>\n<p><img src=\"/images/atmegax8-protoboard-revA.jpg\" alt=\"ATmegaX8 Protoboard Revision A\" title=\"Revision A with a lot of space..\"></p>\n<p>Considering you most likely want to connect something to the controller\'s pins, this is a pretty useless prototyping board. Yeah sure, it will work if you only need a single wire per port, but I wasn\'t going to rely on that.</p>\n<p>Time for a redesign; squeeze the connectors closer to the controller - yes, sacrificing the pin numbering along with it - and reduce the PCB borders. And while I\'m at it, add a jumper to optionally connect analog voltage AVCC to VCC, although I can\'t fully explain why I did that. And off to OSH Park again.</p>\n<h3>Revision B</h3>\n<p>After waiting the usual two weeks - give or take - to get my Perfect Purple PCB to Finland, I was satisfied with the result of my redesign.</p>\n<p><img src=\"/images/atmegax8-protoboard-revB.jpg\" alt=\"ATmegaX8 Protoboard Revision B\" title=\"Revision B - now actually useful\"></p>\n<p>Yes, I am still sacrificing a row on each side, and the actual benefit may seem marginal. After all, it\'s merely more than adding the ISP connector. But I do believe it\'s still worth the sacrifice for a tad smoother prototyping start.</p>\n<h2>Hooking it up</h2>\n<p>Time to connect a 10pin ribbon cable to the protoboard holding an ATmega328P and an USBasp programmer plugged into a USB port.</p>\n<p><img src=\"/images/atmegax8-protoboard-plugged.jpg\" alt=\"ATmegaX8 Protoboard plugged in\" title=\"Plugged in and ready to go\"></p>\n<p>As you can see, this works even standalone without a breadboard, but it is supposed to be a prototyping board after all, so I\'ll most likely still want the breadboard connecting option.</p>\n<p>So, the USB hub and USBasp programmer have some LEDs shining, that\'s a good start, let\'s see what avrdude has to say.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ avrdude -p m328p -c usbasp\n\navrdude: warning: cannot set sck period. please check for usbasp firmware update.\navrdude: AVR device initialized and ready to accept instructions\navrdude: Device signature = 0x1e950f (probably m328p)\n\navrdude: safemode: Fuses OK (E:F9, H:DF, L:E2)\n\navrdude done.  Thank you.\n\n$\n</code></pre>\n<p>And avrdude says that it was able to read the device signature and the fuses, and we didn\'t ask for more, so that\'s perfect. It\'s safe to ignore the warning.</p>\n<p>But just to be sure, I\'ll try to flash a .hex file to it and see if it succeeds.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ make program \navrdude -p atmega328p -c usbasp -U flash:w:4chordmidi.hex\n\navrdude: warning: cannot set sck period. please check for usbasp firmware update.\navrdude: AVR device initialized and ready to accept instructions\n\nReading | ################################################## | 100% 0.00s\n\navrdude: Device signature = 0x1e950f (probably m328p)\navrdude: NOTE: &quot;flash&quot; memory has been specified, an erase cycle will be performed\n         To disable this feature, specify the -D option.\navrdude: erasing chip\navrdude: warning: cannot set sck period. please check for usbasp firmware update.\navrdude: reading input file &quot;4chordmidi.hex&quot;\navrdude: input file 4chordmidi.hex auto detected as Intel Hex\navrdude: writing flash (8876 bytes):\n\nWriting | ################################################## | 100% 7.02s\n\navrdude: 8876 bytes of flash written\navrdude: verifying flash memory against 4chordmidi.hex:\navrdude: load data flash data from input file 4chordmidi.hex:\navrdude: input file 4chordmidi.hex auto detected as Intel Hex\navrdude: input file 4chordmidi.hex contains 8876 bytes\navrdude: reading on-chip flash data:\n\nReading | ################################################## | 100% 4.56s\n\navrdude: verifying ...\navrdude: 8876 bytes of flash verified\n\navrdude: safemode: Fuses OK (E:F9, H:DF, L:E2)\n\navrdude done.  Thank you.\n\n$\n</code></pre>\n<p>Yes. Yes it did. The protoboard is ready for ..well, prototyping.</p>\n<h2>What\'s next</h2>\n<p>Next step is to actually just use it and focus on other things.</p>\n<p>But one day I might add more boards for other controllers such as the ATtiny24/44/84 and ATtiny25/45/85. I might also add a board with USB connector and basic components to have a <a href=\"https://www.obdev.at/products/vusb/index.html\">V-USB</a> prototyping board.</p>\n<p>But my main intention is to have a no frills board and keep it as simple as possible.</p>\n','2016-05-15 23:10:06',1,1),(3,'Mixing the SIM800L GSM/GPRS module','mixing-the-sim800l-gsmgprs-module','Insight into the basic operations of the SIM800L low-cost GSM/GPRS module. General setup, make and receive phone calls, send and receive SMS and tackle GRPS data communication. Get one step closer to mastering the GSM module.','sim800l.jpg','It\'s rather ridiculous to think how cheap you can get GSM/GPRS modems nowadays. Take the SIM800L, you\'ll get those from China for a couple of Euros. Sure, that\'s not the fanciest choice, and the breakout module has some serious shortcomings that limit your application options vastly (more on that later), but at least you do have this choice. I remember well how adding a GSM modem to an electronics projects has seemed like an unaccomplishable dream due to their prices.\r\n\r\nI was lucky enough some years back and I had to actually work with some modules for work, and well, not much has changed in actually handling them - mostly some standardized and generally well documented [Hayes commands](https://en.wikipedia.org/wiki/Hayes_command_set).\r\n\r\n## Getting started\r\n\r\nWell naturally, you\'re going to need a SIM card and activate it to fully use the module. Sure, you can use it without one as well, but that\'s obviously going to limit your options what to do with it.\r\n\r\nDepending on where in the world you\'re living, you can just walk into any store, get a prepaid SIM card and are all set. The \"activate the SIM card\" part is nothing more than having it register to its home network for the first time - which means putting the SIM card **the right way around** into the module\'s slot and power it up.\r\n\r\nHowever, for the very first time, I\'d recommend to use a normal mobile phone for that, might be just easier. Plus, you can make sure the SIM card is okay, can make and receive calls etc., so if anything won\'t work with the SIM800L module, at least you\'ll know it\'s not the card.\r\n\r\n![SIM800L breadboard setup](/images/sim800l-setup.jpg \"SIM800L and USB to serial converter setup\")\r\n\r\n### Powering up the SIM800L module\r\n\r\nFor the start, you\'re going to need a power source and a serial port. You can get USB to serial converters that double as power supply for breadboard use ([for example from Olimex](https://www.olimex.com/Products/Breadboarding/BB-CH340T/)), but keep two things in mind:\r\n\r\n#### 1. Power supply voltage\r\nSIM800L itself requires an input voltage between 3.4 and 4.4 volts, some breakout boards come with integrated power regulators that require 5.0 volts. The USB to serial converter mentioned supplies either 3.3 or 5.0 volts, so make sure you match that.\r\n\r\n#### 2. Power supply current\r\nThe module can be a bit power hungry, especially during mobile network activity\r\nIf your power source can\'t keep up, the module will shut down / reset in the middle of the action. Powering from your computer\'s USB port might not be sufficient for all operations! You might have luck placing a capacitor (1000uF and more) parallel to the voltage supply, but an external power supply (USB charger, wall wart, lab power supply) might be a better choice in the end. YMMV of course.\r\n\r\n### Serial port\r\nAs for the serial port, anything goes. If you manage to power the SIM800L module from your USB to serial converter, you\'re all set. If you end up using a separate power supply, make sure of those two things:\r\n1. serial port and SIM800L share the same ground connection\r\n2. do **not** connect any power outputs from the USB to serial connector to anywhere\r\n\r\n![SIM800L connection schematic](/images/sim800l-schematic.png \"Hooking it up\")\r\n\r\n### Connecting the rest\r\n\r\nWell, there\'s nothing else to connect to the module. I mentioned in the beginning some serious shortcomings of the SIM800L module, and while the SIM800L itself has an audio interface, the cheap breakout boards won\'t have the connectors routed out. Not being able to connect a microphone or headphone/loudspeaker makes it pretty much unsuitable for usual telephony applications.\r\n\r\nBut for SMS, GRPS and just having fun with a GSM module, this is still a good choice in my opinion.\r\n\r\n## First steps with the SIM800L\r\n\r\nOpen up your favorite serial communication program and set it up to use the correct serial device, e.g. `/dev/TTYUSB0` at 115200 baud with 8N1 (**8** data bits, **N**o parity check, **1** stop bit)\r\n\r\nWith everything else set up, SIM card inserted, powering up the SIM800L module should show something like this:\r\n```txt\r\nRDY\r\n\r\n+CFUN: 1\r\n\r\n+CPIN: SIM PIN\r\n```\r\n\r\nIf nothing shows up, check if the communication itself is up by typing \"`AT`\" and wait for an \"`OK`\" response. If just garbage show up while typing, your baud rate is is most likely wrong. If nothing happens at all, check your wiring (note that RX connects to TX and the other way around).\r\n```txt\r\n> AT\r\n< OK\r\n```\r\nNote, I\'ll add \"`>`\" for output you type and \"`<`\" for output the SIM800L responses in the next examples to make it all a bit more clear.\r\n\r\n### Some words up front\r\n\r\nThe rest of this post will go through the basic commands and usage of the SIM800L module. Most of it might also apply to other GSM/GRRS modules. For a complete list of commands, please check for the *SIM800 Series AT Command Manual*.\r\n\r\n### Entering the PIN code\r\nIf your SIM card requires a PIN to unlock it, the module will ask for it by displaying a \"`+CPIN: SIM PIN`\" as seen above.  Enter it with a `AT+CPIN=<pin>` command.\r\n```txt\r\n< +CPIN: SIM PIN\r\n> AT+CPIN=1234\r\n< OK\r\n<\r\n< +CPIN: READY\r\n<\r\n< Call Ready\r\n< \r\n< SMS Ready\r\n```\r\n\r\nIf you enter an incorrect PIN, you\'ll get an \"`ERROR`\" response. If you end up getting a \"`+CPIN: SIM PUK`\", you probably done that three times and better have your PUK ready.\r\n\r\n### Check the network\r\n\r\nUsually the SIM card is registered automatically to the home network. You can check this with the \"`AT+COPS?`\" request\r\n```txt\r\n> AT+COPS?\r\n< +COPS: 0,0,\"Elisa Corporation\"\r\n<\r\n< OK\r\n```\r\nAnd you can also check a list of all available operators:\r\n```txt\r\n> AT+COPS=?\r\n< +COPS: (2,\"Elisa Corporation\",\"elisa\",\"24405\"),(3,\"SONERA\",\"SONERA\",\"24491\"),(3,\"FINNET\",\"FINNET\",\"24412\"),,(0-4),(0-2)\r\n<\r\n< OK\r\n```\r\nIt might take a few seconds before the response is displayed - and obviously your responses for both commands is most likely going to be different.\r\n\r\nBefore making the first phone call, let\'s check the signal strength\r\n```txt\r\n> AT+CSQ\r\n< +CSQ: 15,0\r\n<\r\n< OK\r\n```\r\nThat\'s an RSSI of -84dBm and error rate of zero percent, good enough. In general, the higher the first number the better. The second one is preferably always zero.\r\n\r\n## Phone calls\r\n\r\nTime to do some phone calls, send some DTMF tones and check our prepaid balance afterwards.\r\n\r\n### Place a phone call\r\n\r\nEasiest test is of course to call ourselves\r\nLet\'s call to a very fake but theoretically valid local Finnish mobile phone number, 050 123 4567\r\n```txt\r\n> ATD0501234567;\r\n< OK\r\n```\r\nAfter sending the command, nothing else will happen on the serial line, and a few seconds later the phone should start to ring.\r\n\r\nIf that\'s the case, hoorray, everything works. Let\'s hang up\r\n```txt\r\n> ATH\r\n< OK\r\n```\r\n\r\n### Receive a phone call\r\n\r\nLatest now you should have your SIM card\'s phone number, so call it back with your phone and have an eye on the serial console. Eventually, it will show this:\r\n```txt\r\n<\r\n< RING\r\n```\r\nAlso, if your breakout module has a *RING* LED, it will indicate an incoming call. The longer you let it ring, the more \"`RING`\" messages appear. Until you hang up on your phone, which is indicated by a \"`NO CARRIER`\" message.\r\n```txt\r\n...\r\n<\r\n< RING\r\n< \r\n< RING\r\n< \r\n< NO CARRIER\r\n```\r\n\r\nSo far so good. Except we have no clue who\'s actually calling there. If you\'re not interested in that, that\'s okay, but otherwise, it\'s a good idea to enable *Caller Line Identifier Presentation*\r\n```txt\r\n> AT+CLIP=1\r\n< OK\r\n```\r\nAnd now we call again.\r\n```txt\r\n<\r\n< RING\r\n<\r\n< +CLIP: \"+358501234567\",145,\"\",0,\"\",0\r\n<\r\n< RING\r\n<\r\n< +CLIP: \"+358501234567\",145,\"\",0,\"\",0\r\n...\r\n```\r\nNice, now we know. In this case the number is in international format (indicated by the *145* in the second parameter). Once more, check the *SIM800 Series AT Command Manual* for all the details and more information.\r\n\r\n### Play DTMF tones\r\n\r\n[*Dual-tone multi-frequency signaling*](https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling) or DTMF, touch-tone or anything alike are the tones played when pressing dial keys during a phone call. The Wikipedia article will tell you all about it and what it can be used for, but in this case, we\'ll just use it as an alternative to a real phone call, since our audio options are non-existing with the SIM800L module.\r\n\r\nBasic format of DTMF signal command is \"`AT+CLDTMF=<length>,<key>`\", with length being values from 1-100 for each 100ms (so 0.1s to 10s) to generate the tone, and key being the dialpad keys 0-9, A-F, * and #.\r\n\r\nSo, let\'s call the module again, this time answering the call with \"`ATA`\" and simulating pressing the following keys\r\n* 5 for 500ms\r\n* C for 800ms\r\n* # for 2 seconds\r\n\r\nand then we hang up.\r\n\r\n```txt\r\n<\r\n< RING\r\n<\r\n< +CLIP: \"+358501234567\",145,\"\",0,\"\",0\r\n> ATA\r\n< OK\r\n> AT+CLDTMF=5,\"5\"\r\n< OK\r\n> AT+CLDTMF=8,\"C\"\r\n< OK\r\n> AT+CLDTMF=20,\"#\"\r\n< OK\r\n> ATH\r\n< OK\r\n```\r\nYay, music.\r\n\r\n### Sending USSD\r\n[*Unstructured Supplementary Service Data*](https://en.wikipedia.org/wiki/Unstructured_Supplementary_Service_Data) (USSD) is, in short, what you\'re sending when you are \"dialing\" a number enclosed in \\* and # characters. In case of prepaid SIM cards, you can use these to top up and check your balance. The actual USSD message might differ from your network operator, but in my case, \"dialing\" the number \"\\*100#\" will show me the balance.\r\n\r\n```txt\r\n> AT+CUSD=1,\"*100#\"\r\n< OK\r\n<\r\n< +CUSD: 0, \"Saldo 6.00e, Prepaid vanhenee 23.01.2017.\", 15\r\n```\r\n\r\n## Sending and receiving SMS\r\n\r\nAlthough SMS is sort of obsolete nowadays in human communication, it might still offer some use for things like remote automation, and to learn as much as possible about a GSM module.\r\n\r\nUnless you want to learn the hard way about [PDU](https://en.wikipedia.org/wiki/Protocol_data_unit) message formats, it\'s best to set the SMS message format to text mode\r\n```txt\r\n> AT+CMGF=1\r\n< OK\r\n```\r\n\r\nNow SMS can be sent and read in plain text instead of a low level binary protocol. I of course encourage you to set the mode back to PDU via \"`AT+CMGF=0`\" at some point just to have a look at it.\r\n\r\n### Receiving SMS\r\n\r\nLet\'s start this way around. Take your phone and send a SMS to your module. When you look back in your serial console, you should see something like this:\r\n```txt\r\n<\r\n< +CMTI: \"SM\",13\r\n```\r\n\r\nMessage stored in \"**S**IM **M**essage storage\" memory index 13 has been received. The index most likely differs in your case, I still have lots of network messages from the registration stored. Well, let\'s read it.\r\n\r\n```txt\r\n> AT+CMGR=13\r\n< +CMGR: \"REC READ\",\"+358501234567\",\"\",\"16/10/22,22:36:42+12\"\r\n< Hello module \r\n<\r\n< OK\r\n```\r\n\r\nObviously the parameter is the same index number. To list all the SMSs, you can use \"`AT+CMGL=\"ALL\"`\"\r\n\r\nWell, just for shits and giggles, let\'s show the same in PDU mode:\r\n```txt\r\n> AT+CMGF=0\r\n< OK\r\n> AT+CMGR=13\r\n< +CMGR: 1,\"\",31\r\n< 0791534850020280040C915358103254760000610122226324210DC8329BFD06B5DFE43ABB0C02\r\n<\r\n< OK\r\n```\r\n\r\nYes.. now imagine writing a message that way. Although writing a converter might be an interesting project. Still, let\'s stay in text mode for that.\r\n\r\n### Sending message\r\n\r\n```txt\r\n> AT+CMGS=\"0501234567\"\r\n> > Fuck off.^Z\r\n< +CMGS: 0\r\n<\r\n< OK\r\n```\r\n\r\nIt\'s straight forward, but some notes:\r\nIt\'s not a typo or wrong formatted. You send the \"`AT+CMGS`\" command with the number, after which a prompt appears. Here is where you write your message. When you\'re done writing and ready to send, you press CTRL+Z to end the input mode. This allows you to also add line breaks to the message.\r\n\r\n## Mobile data via GPRS\r\n\r\nThe final subject in this post will be an introduction to data communication via GRPS. SIM800L can be set up to use either single connection or multi connection, i.e. keep more than one connection alive at the same time. The main difference is usually that GPRS related commands take an additional parameter in multi connection mode to set the connection ID.\r\n\r\nTo make matters easier in the beginning, we stick to one single connection at a time:\r\n```txt\r\n> AT+CIPMUX=0\r\n< OK\r\n```\r\n\r\nAlso, let\'s check the current GPRS connection status\r\n```txt\r\n> AT+CIPSTATUS\r\n< OK\r\n<\r\n< STATE: IP INITIAL\r\n```\r\nInitial state, i.e. nothing is going on.\r\n\r\n### Setting up GPRS communication\r\n\r\nYou\'re going to need some mobile internet configuration information from your operator for this step. I don\'t know how common it is that they publish this information, in my case, they have it all on [their customer service website](https://elisa.fi/asiakaspalvelu/aihe/matkapuhelinliittymat/ohje/palveluasetukset-jolla-symbian-asha/). You\'ll basically need the access point name and maybe username and password information.\r\n\r\nFor me, it\'s simply access point \"Internet\" without any identification. So setting it up, and checking the connection status afterwards.\r\n\r\n```txt\r\n> AT+CSTT=\"Internet\",\"\",\"\"\r\n< OK\r\n> AT+CIPSTATUS\r\n< OK\r\n<\r\n< STATE: IP START\r\n```\r\n\r\nState has changed, good. Bringing up the module\'s wireless connector next.\r\n\r\n```txt\r\n> AT+CIICR\r\n< OK\r\n> AT+CIPSTATUS\r\n< OK\r\n<\r\n< STATE: IP GPRSACT\r\n```\r\n\r\nWe can now check our module\'s IP address\r\n```txt\r\n> AT+CIFSR\r\n< 10.158.41.180\r\n```\r\n\r\nAnd for fun, let\'s just look up some DNS as well\r\n```txt\r\n> AT+CDNSGIP=\"google.fi\"\r\n< OK\r\n<\r\n< +CDNSGIP: 1,\"google.fi\",\"172.217.22.163\"\r\n```\r\n\r\nExcellent.\r\n\r\n### Connecting to somewhere\r\n\r\nAs last example, we\'re going to receive something via HTTP from a Hollywood movie IP address 350.123.55.218.\r\n\r\n```txt\r\n> AT+CIPSTART=\"TCP\",\"350.123.55.218\",\"80\"\r\n< OK\r\n<\r\n< CONNECT OK\r\n> AT+CIPSEND\r\n> > GET /~sven/test.xxx HTTP/1.0^J^M\r\n> ^J^M\r\n> ^Z\r\n< SEND OK\r\nHTTP/1.1 200 OK\r\nDate: Sat, 22 Oct 2016 21:09:50 GMT\r\nServer: Apache\r\nLast-Modified: Sat, 22 Oct 2016 21:07:38 GMT\r\nETag: \"d-53f7a8c72025b\"\r\nAccept-Ranges: bytes\r\nContent-Length: 13\r\nConnection: close\r\n\r\nyeah, works.\r\n\r\n< CLOSED\r\n```\r\n\r\nSending data is similar to sending a SMS in terms that you just say \"I send now\" and then a prompt appears to actually send the message, and finish it with CONTROL+Z. Where the two differ is in new line handling. You\'ll have to manually add a carriage return `\\r` with CONTROL+M and line feed `\\n` with CONTROL+J.\r\n\r\nIt\'s possible that this actually depends on the serial communication program you\'re using, but in case of *minicom* it looks like there\'s no way around this\r\n\r\n## Moving on from here\r\n\r\nWell, that was that then. Hopefully the basic functionality and way of operation is clear now, and together with the AT command reference, the rest of the SIM800L\'s features can be discovered and explored. There\'s still things like phone book, clock, alarms and a whole bunch of higher level GRPS communication to look into.\r\n\r\n### Adding it to a microcontroller\r\n\r\nWhile it is fun to play around with the module via serial console, and calling people you cannot hear is strangely satisfying, there\'s room for more. So naturally, connecting it to a microcontroller is a next step. I have already a project for that in the queue and it will eventually show up here. ','<p>It\'s rather ridiculous to think how cheap you can get GSM/GPRS modems nowadays. Take the SIM800L, you\'ll get those from China for a couple of Euros. Sure, that\'s not the fanciest choice, and the breakout module has some serious shortcomings that limit your application options vastly (more on that later), but at least you do have this choice. I remember well how adding a GSM modem to an electronics projects has seemed like an unaccomplishable dream due to their prices.</p>\n<p>I was lucky enough some years back and I had to actually work with some modules for work, and well, not much has changed in actually handling them - mostly some standardized and generally well documented <a href=\"https://en.wikipedia.org/wiki/Hayes_command_set\">Hayes commands</a>.</p>\n<h2>Getting started</h2>\n<p>Well naturally, you\'re going to need a SIM card and activate it to fully use the module. Sure, you can use it without one as well, but that\'s obviously going to limit your options what to do with it.</p>\n<p>Depending on where in the world you\'re living, you can just walk into any store, get a prepaid SIM card and are all set. The \"activate the SIM card\" part is nothing more than having it register to its home network for the first time - which means putting the SIM card <strong>the right way around</strong> into the module\'s slot and power it up.</p>\n<p>However, for the very first time, I\'d recommend to use a normal mobile phone for that, might be just easier. Plus, you can make sure the SIM card is okay, can make and receive calls etc., so if anything won\'t work with the SIM800L module, at least you\'ll know it\'s not the card.</p>\n<p><img src=\"/images/sim800l-setup.jpg\" alt=\"SIM800L breadboard setup\" title=\"SIM800L and USB to serial converter setup\"></p>\n<h3>Powering up the SIM800L module</h3>\n<p>For the start, you\'re going to need a power source and a serial port. You can get USB to serial converters that double as power supply for breadboard use (<a href=\"https://www.olimex.com/Products/Breadboarding/BB-CH340T/\">for example from Olimex</a>), but keep two things in mind:</p>\n<h4>1. Power supply voltage</h4>\n<p>SIM800L itself requires an input voltage between 3.4 and 4.4 volts, some breakout boards come with integrated power regulators that require 5.0 volts. The USB to serial converter mentioned supplies either 3.3 or 5.0 volts, so make sure you match that.</p>\n<h4>2. Power supply current</h4>\n<p>The module can be a bit power hungry, especially during mobile network activity\nIf your power source can\'t keep up, the module will shut down / reset in the middle of the action. Powering from your computer\'s USB port might not be sufficient for all operations! You might have luck placing a capacitor (1000uF and more) parallel to the voltage supply, but an external power supply (USB charger, wall wart, lab power supply) might be a better choice in the end. YMMV of course.</p>\n<h3>Serial port</h3>\n<p>As for the serial port, anything goes. If you manage to power the SIM800L module from your USB to serial converter, you\'re all set. If you end up using a separate power supply, make sure of those two things:</p>\n<ol>\n<li>serial port and SIM800L share the same ground connection</li>\n<li>do <strong>not</strong> connect any power outputs from the USB to serial connector to anywhere</li>\n</ol>\n<p><img src=\"/images/sim800l-schematic.png\" alt=\"SIM800L connection schematic\" title=\"Hooking it up\"></p>\n<h3>Connecting the rest</h3>\n<p>Well, there\'s nothing else to connect to the module. I mentioned in the beginning some serious shortcomings of the SIM800L module, and while the SIM800L itself has an audio interface, the cheap breakout boards won\'t have the connectors routed out. Not being able to connect a microphone or headphone/loudspeaker makes it pretty much unsuitable for usual telephony applications.</p>\n<p>But for SMS, GRPS and just having fun with a GSM module, this is still a good choice in my opinion.</p>\n<h2>First steps with the SIM800L</h2>\n<p>Open up your favorite serial communication program and set it up to use the correct serial device, e.g. <code>/dev/TTYUSB0</code> at 115200 baud with 8N1 (<strong>8</strong> data bits, <strong>N</strong>o parity check, <strong>1</strong> stop bit)</p>\n<p>With everything else set up, SIM card inserted, powering up the SIM800L module should show something like this:</p>\n<pre class=\"lang-txt line-numbers\"><code>RDY\n\n+CFUN: 1\n\n+CPIN: SIM PIN\n</code></pre>\n<p>If nothing shows up, check if the communication itself is up by typing \"<code>AT</code>\" and wait for an \"<code>OK</code>\" response. If just garbage show up while typing, your baud rate is is most likely wrong. If nothing happens at all, check your wiring (note that RX connects to TX and the other way around).</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT\n&lt; OK\n</code></pre>\n<p>Note, I\'ll add \"<code>&gt;</code>\" for output you type and \"<code>&lt;</code>\" for output the SIM800L responses in the next examples to make it all a bit more clear.</p>\n<h3>Some words up front</h3>\n<p>The rest of this post will go through the basic commands and usage of the SIM800L module. Most of it might also apply to other GSM/GRRS modules. For a complete list of commands, please check for the <em>SIM800 Series AT Command Manual</em>.</p>\n<h3>Entering the PIN code</h3>\n<p>If your SIM card requires a PIN to unlock it, the module will ask for it by displaying a \"<code>+CPIN: SIM PIN</code>\" as seen above.  Enter it with a <code>AT+CPIN=&lt;pin&gt;</code> command.</p>\n<pre class=\"lang-txt line-numbers\"><code>&lt; +CPIN: SIM PIN\n&gt; AT+CPIN=1234\n&lt; OK\n&lt;\n&lt; +CPIN: READY\n&lt;\n&lt; Call Ready\n&lt; \n&lt; SMS Ready\n</code></pre>\n<p>If you enter an incorrect PIN, you\'ll get an \"<code>ERROR</code>\" response. If you end up getting a \"<code>+CPIN: SIM PUK</code>\", you probably done that three times and better have your PUK ready.</p>\n<h3>Check the network</h3>\n<p>Usually the SIM card is registered automatically to the home network. You can check this with the \"<code>AT+COPS?</code>\" request</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+COPS?\n&lt; +COPS: 0,0,&quot;Elisa Corporation&quot;\n&lt;\n&lt; OK\n</code></pre>\n<p>And you can also check a list of all available operators:</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+COPS=?\n&lt; +COPS: (2,&quot;Elisa Corporation&quot;,&quot;elisa&quot;,&quot;24405&quot;),(3,&quot;SONERA&quot;,&quot;SONERA&quot;,&quot;24491&quot;),(3,&quot;FINNET&quot;,&quot;FINNET&quot;,&quot;24412&quot;),,(0-4),(0-2)\n&lt;\n&lt; OK\n</code></pre>\n<p>It might take a few seconds before the response is displayed - and obviously your responses for both commands is most likely going to be different.</p>\n<p>Before making the first phone call, let\'s check the signal strength</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CSQ\n&lt; +CSQ: 15,0\n&lt;\n&lt; OK\n</code></pre>\n<p>That\'s an RSSI of -84dBm and error rate of zero percent, good enough. In general, the higher the first number the better. The second one is preferably always zero.</p>\n<h2>Phone calls</h2>\n<p>Time to do some phone calls, send some DTMF tones and check our prepaid balance afterwards.</p>\n<h3>Place a phone call</h3>\n<p>Easiest test is of course to call ourselves\nLet\'s call to a very fake but theoretically valid local Finnish mobile phone number, 050 123 4567</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; ATD0501234567;\n&lt; OK\n</code></pre>\n<p>After sending the command, nothing else will happen on the serial line, and a few seconds later the phone should start to ring.</p>\n<p>If that\'s the case, hoorray, everything works. Let\'s hang up</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; ATH\n&lt; OK\n</code></pre>\n<h3>Receive a phone call</h3>\n<p>Latest now you should have your SIM card\'s phone number, so call it back with your phone and have an eye on the serial console. Eventually, it will show this:</p>\n<pre class=\"lang-txt line-numbers\"><code>&lt;\n&lt; RING\n</code></pre>\n<p>Also, if your breakout module has a <em>RING</em> LED, it will indicate an incoming call. The longer you let it ring, the more \"<code>RING</code>\" messages appear. Until you hang up on your phone, which is indicated by a \"<code>NO CARRIER</code>\" message.</p>\n<pre class=\"lang-txt line-numbers\"><code>...\n&lt;\n&lt; RING\n&lt; \n&lt; RING\n&lt; \n&lt; NO CARRIER\n</code></pre>\n<p>So far so good. Except we have no clue who\'s actually calling there. If you\'re not interested in that, that\'s okay, but otherwise, it\'s a good idea to enable <em>Caller Line Identifier Presentation</em></p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CLIP=1\n&lt; OK\n</code></pre>\n<p>And now we call again.</p>\n<pre class=\"lang-txt line-numbers\"><code>&lt;\n&lt; RING\n&lt;\n&lt; +CLIP: &quot;+358501234567&quot;,145,&quot;&quot;,0,&quot;&quot;,0\n&lt;\n&lt; RING\n&lt;\n&lt; +CLIP: &quot;+358501234567&quot;,145,&quot;&quot;,0,&quot;&quot;,0\n...\n</code></pre>\n<p>Nice, now we know. In this case the number is in international format (indicated by the <em>145</em> in the second parameter). Once more, check the <em>SIM800 Series AT Command Manual</em> for all the details and more information.</p>\n<h3>Play DTMF tones</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling\"><em>Dual-tone multi-frequency signaling</em></a> or DTMF, touch-tone or anything alike are the tones played when pressing dial keys during a phone call. The Wikipedia article will tell you all about it and what it can be used for, but in this case, we\'ll just use it as an alternative to a real phone call, since our audio options are non-existing with the SIM800L module.</p>\n<p>Basic format of DTMF signal command is \"<code>AT+CLDTMF=&lt;length&gt;,&lt;key&gt;</code>\", with length being values from 1-100 for each 100ms (so 0.1s to 10s) to generate the tone, and key being the dialpad keys 0-9, A-F, * and #.</p>\n<p>So, let\'s call the module again, this time answering the call with \"<code>ATA</code>\" and simulating pressing the following keys</p>\n<ul>\n<li>5 for 500ms</li>\n<li>C for 800ms</li>\n<li># for 2 seconds</li>\n</ul>\n<p>and then we hang up.</p>\n<pre class=\"lang-txt line-numbers\"><code>&lt;\n&lt; RING\n&lt;\n&lt; +CLIP: &quot;+358501234567&quot;,145,&quot;&quot;,0,&quot;&quot;,0\n&gt; ATA\n&lt; OK\n&gt; AT+CLDTMF=5,&quot;5&quot;\n&lt; OK\n&gt; AT+CLDTMF=8,&quot;C&quot;\n&lt; OK\n&gt; AT+CLDTMF=20,&quot;#&quot;\n&lt; OK\n&gt; ATH\n&lt; OK\n</code></pre>\n<p>Yay, music.</p>\n<h3>Sending USSD</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Unstructured_Supplementary_Service_Data\"><em>Unstructured Supplementary Service Data</em></a> (USSD) is, in short, what you\'re sending when you are \"dialing\" a number enclosed in * and # characters. In case of prepaid SIM cards, you can use these to top up and check your balance. The actual USSD message might differ from your network operator, but in my case, \"dialing\" the number \"*100#\" will show me the balance.</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CUSD=1,&quot;*100#&quot;\n&lt; OK\n&lt;\n&lt; +CUSD: 0, &quot;Saldo 6.00e, Prepaid vanhenee 23.01.2017.&quot;, 15\n</code></pre>\n<h2>Sending and receiving SMS</h2>\n<p>Although SMS is sort of obsolete nowadays in human communication, it might still offer some use for things like remote automation, and to learn as much as possible about a GSM module.</p>\n<p>Unless you want to learn the hard way about <a href=\"https://en.wikipedia.org/wiki/Protocol_data_unit\">PDU</a> message formats, it\'s best to set the SMS message format to text mode</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CMGF=1\n&lt; OK\n</code></pre>\n<p>Now SMS can be sent and read in plain text instead of a low level binary protocol. I of course encourage you to set the mode back to PDU via \"<code>AT+CMGF=0</code>\" at some point just to have a look at it.</p>\n<h3>Receiving SMS</h3>\n<p>Let\'s start this way around. Take your phone and send a SMS to your module. When you look back in your serial console, you should see something like this:</p>\n<pre class=\"lang-txt line-numbers\"><code>&lt;\n&lt; +CMTI: &quot;SM&quot;,13\n</code></pre>\n<p>Message stored in \"<strong>S</strong>IM <strong>M</strong>essage storage\" memory index 13 has been received. The index most likely differs in your case, I still have lots of network messages from the registration stored. Well, let\'s read it.</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CMGR=13\n&lt; +CMGR: &quot;REC READ&quot;,&quot;+358501234567&quot;,&quot;&quot;,&quot;16/10/22,22:36:42+12&quot;\n&lt; Hello module \n&lt;\n&lt; OK\n</code></pre>\n<p>Obviously the parameter is the same index number. To list all the SMSs, you can use \"<code>AT+CMGL=\"ALL\"</code>\"</p>\n<p>Well, just for shits and giggles, let\'s show the same in PDU mode:</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CMGF=0\n&lt; OK\n&gt; AT+CMGR=13\n&lt; +CMGR: 1,&quot;&quot;,31\n&lt; 0791534850020280040C915358103254760000610122226324210DC8329BFD06B5DFE43ABB0C02\n&lt;\n&lt; OK\n</code></pre>\n<p>Yes.. now imagine writing a message that way. Although writing a converter might be an interesting project. Still, let\'s stay in text mode for that.</p>\n<h3>Sending message</h3>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CMGS=&quot;0501234567&quot;\n&gt; &gt; Fuck off.^Z\n&lt; +CMGS: 0\n&lt;\n&lt; OK\n</code></pre>\n<p>It\'s straight forward, but some notes:\nIt\'s not a typo or wrong formatted. You send the \"<code>AT+CMGS</code>\" command with the number, after which a prompt appears. Here is where you write your message. When you\'re done writing and ready to send, you press CTRL+Z to end the input mode. This allows you to also add line breaks to the message.</p>\n<h2>Mobile data via GPRS</h2>\n<p>The final subject in this post will be an introduction to data communication via GRPS. SIM800L can be set up to use either single connection or multi connection, i.e. keep more than one connection alive at the same time. The main difference is usually that GPRS related commands take an additional parameter in multi connection mode to set the connection ID.</p>\n<p>To make matters easier in the beginning, we stick to one single connection at a time:</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CIPMUX=0\n&lt; OK\n</code></pre>\n<p>Also, let\'s check the current GPRS connection status</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CIPSTATUS\n&lt; OK\n&lt;\n&lt; STATE: IP INITIAL\n</code></pre>\n<p>Initial state, i.e. nothing is going on.</p>\n<h3>Setting up GPRS communication</h3>\n<p>You\'re going to need some mobile internet configuration information from your operator for this step. I don\'t know how common it is that they publish this information, in my case, they have it all on <a href=\"https://elisa.fi/asiakaspalvelu/aihe/matkapuhelinliittymat/ohje/palveluasetukset-jolla-symbian-asha/\">their customer service website</a>. You\'ll basically need the access point name and maybe username and password information.</p>\n<p>For me, it\'s simply access point \"Internet\" without any identification. So setting it up, and checking the connection status afterwards.</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CSTT=&quot;Internet&quot;,&quot;&quot;,&quot;&quot;\n&lt; OK\n&gt; AT+CIPSTATUS\n&lt; OK\n&lt;\n&lt; STATE: IP START\n</code></pre>\n<p>State has changed, good. Bringing up the module\'s wireless connector next.</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CIICR\n&lt; OK\n&gt; AT+CIPSTATUS\n&lt; OK\n&lt;\n&lt; STATE: IP GPRSACT\n</code></pre>\n<p>We can now check our module\'s IP address</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CIFSR\n&lt; 10.158.41.180\n</code></pre>\n<p>And for fun, let\'s just look up some DNS as well</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CDNSGIP=&quot;google.fi&quot;\n&lt; OK\n&lt;\n&lt; +CDNSGIP: 1,&quot;google.fi&quot;,&quot;172.217.22.163&quot;\n</code></pre>\n<p>Excellent.</p>\n<h3>Connecting to somewhere</h3>\n<p>As last example, we\'re going to receive something via HTTP from a Hollywood movie IP address 350.123.55.218.</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; AT+CIPSTART=&quot;TCP&quot;,&quot;350.123.55.218&quot;,&quot;80&quot;\n&lt; OK\n&lt;\n&lt; CONNECT OK\n&gt; AT+CIPSEND\n&gt; &gt; GET /~sven/test.xxx HTTP/1.0^J^M\n&gt; ^J^M\n&gt; ^Z\n&lt; SEND OK\nHTTP/1.1 200 OK\nDate: Sat, 22 Oct 2016 21:09:50 GMT\nServer: Apache\nLast-Modified: Sat, 22 Oct 2016 21:07:38 GMT\nETag: &quot;d-53f7a8c72025b&quot;\nAccept-Ranges: bytes\nContent-Length: 13\nConnection: close\n\nyeah, works.\n\n&lt; CLOSED\n</code></pre>\n<p>Sending data is similar to sending a SMS in terms that you just say \"I send now\" and then a prompt appears to actually send the message, and finish it with CONTROL+Z. Where the two differ is in new line handling. You\'ll have to manually add a carriage return <code>\\r</code> with CONTROL+M and line feed <code>\\n</code> with CONTROL+J.</p>\n<p>It\'s possible that this actually depends on the serial communication program you\'re using, but in case of <em>minicom</em> it looks like there\'s no way around this</p>\n<h2>Moving on from here</h2>\n<p>Well, that was that then. Hopefully the basic functionality and way of operation is clear now, and together with the AT command reference, the rest of the SIM800L\'s features can be discovered and explored. There\'s still things like phone book, clock, alarms and a whole bunch of higher level GRPS communication to look into.</p>\n<h3>Adding it to a microcontroller</h3>\n<p>While it is fun to play around with the module via serial console, and calling people you cannot hear is strangely satisfying, there\'s room for more. So naturally, connecting it to a microcontroller is a next step. I have already a project for that in the queue and it will eventually show up here.</p>\n','2016-10-22 23:46:23',1,1),(9,'Adding Bluetooth LE to AVR with nRF8001','adding-bluetooth-le-to-avr-with-nrf8001','An abstract tale about the creation of a BLE example system to set the brightness of a LED and receive information about a button.','nrf8001-closeup.jpg','Any day now, my [nRF52](https://www.nordicsemi.com/Products/nRF52-Series-SoC) based development board will arrive, while some [nRF51](https://www.nordicsemi.com/Products/nRF51-Series-SoC) boards have been around already for some while, waiting to finally get into use. And yes, one day I\'ll really move towards the ARM Cortex-M world. But until then, I\'ll remain in 8bit AVR territory, and be glad for [Nordic\'s nRF8001](https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF8001) BLE connectivity chip, which simply provides the Bluetooth LE stack and can be hooked up to and used by anything with an SPI connection.\r\n\r\nOlimex was once again my choice of source, so this article is focusing on [their nRF8001 module](https://www.olimex.com/Products/Modules/RF/MOD-nRF8001/), but I don\'t think there are much differences to other boards such as [the one from Adafruit](https://www.adafruit.com/product/1697). The Olimex board has an additional Bluetooth test interface via UART (which won\'t be used here) but requires 3.3V as input voltage, while the Adafruit board comes equipped with a 3.3V regulator and will also work with e.g. 5V. Other than that, they both use SPI with some additional chip select sync logic for communication, that\'s all that matters for our purpose.\r\n\r\n## Setting up the nRF8001\r\n\r\nSince the nRF8001 is just a radio connectivity chip with SPI, the setup will happen via SPI as well. In this case, *setup* means both the Bluetooth radio setup as well as BLE [services](https://www.bluetooth.com/specifications/gatt/services) and [characteristics](https://www.bluetooth.com/specifications/gatt/characteristics). Providing all these options can obviously be a bit complex to handle all manually, so Nordic provides [nRFgoStudio](https://www.nordicsemi.com/eng/Products/2.4GHz-RF/nRFgo-Studio) to click your configuration together and generate a C header file containing all the information as raw (and rather undocumented) setup commands. Once the nRF8001 comes out of reset, the setup commands can be sent as-is via SPI, and everything is ready to go.\r\n\r\nUnfortunately, nRFgo Studio is a Windows-only program, and there don\'t seem to be any plans to port it to other platforms. But good news, it will work with Wine / PlayOnLinux. Personally, I had a smoother experience installing it through PlayOnLinux though.\r\n\r\nnRFgo Studio has some additional features than setting up the nRF8001 chip, but those won\'t matter to us. And to actually use the program, I recommend having a look at the built-in help on \"nRF8001 Configuration\". They do a better job than I could do myself as part of this article, so I won\'t even try.\r\n\r\n### A simple example\r\n\r\nTo keep things simple, the example system will be a non-secured (i.e. no bonding required) Bluetooth device with a single LED and a button.\r\n\r\n* the LED will be connected to the AVR\'s PWM output and the duty cycle is controlled via BLE characteristic.\r\n* the button is connected to the AVR\'s external interrupt pin `INT0` and any level change is sent to the remote BLE device if it enabled notifications for the button state characteristic.\r\n\r\nFor this, there is one custom service defined with those two characteristics, i.e one *write without response* and one *notify* characteristic. Both will require some additional interaction, so to start off easier, a simple *read* characteristic is also added, that just replies with a pre-defined (as part of the configuration in nRFgo Studio) serial number.\r\n\r\n![BLE test system on a breadboard](/images/nrf8001-breadboard.jpg \"Two additional LEDs to indicate \'setup done\' and \'remote connected\'\")\r\n\r\n### UUIDs, services and characteristics\r\n\r\nTo uniquely define the custom services and characteristics, the universally unique identifier (UUID) needs to be exactly that: universally unique. No other BLE service or characteristic should use it. It\'s not that relevant for a test system like this, but I wouldn\'t want to take the official Bluetooth UUID space for it either. So might as well take a random UUID space.\r\n\r\nnRFgo Studio lets you create such a random UUID space, which in case of the example system is `4215xxxx-C696-4C43-AB71-20B33874F581`, meaning all but the two bytes marked with `xxxx` will be static, and those two bytes can be used to uniquely specify each service and characteristic.\r\n\r\nIn our case, there is:\r\n\r\n| UUID | Type | Name | Comment |\r\n| ---- | ---- | ---- | ---- |\r\n| `0xa001` | Service | Example Service | the BLE service for our system |\r\n| `0xc001` | Characteristic | PWM Duty Cycle | Write without response |\r\n| `0xc002` | Characteristic | Button State | Notification |\r\n| `0xcf00` | Characteristic | Serial Number | Read-only, specified in nRFgo Studio |\r\n\r\nAll of this can be found and imported to nRFgo Studio from the [XML configuration file](https://github.com/sgreg/avr-nrf8001/blob/master/generated/avr-nrf8001.xml) and results in a [generated `services.h` file](https://github.com/sgreg/avr-nrf8001/blob/master/generated/services.h) that is then directly used in the code.\r\n\r\n## The code\r\n\r\nThe generated `services.h` file is maybe worth to have a first look at before anything else. It probably won\'t make much sense on first glance, and most of it is anyway just some hex data (the setup data). Other than that, the word *pipe* can be seen rather often.\r\n\r\n### Tell me about Pipes\r\n\r\nThe pipes are the communication channels between the nRF8001 module and the application connected to it (i.e. what\'s running on the AVR in this case). Every communication between the application and remote side will happen through those pipes.\r\n\r\nIn this example, there are two of them:  one for the PWM duty cycle, and one for the button state. As you can see, there is no pipe for the serial number characteristic, because this is a read-only value without any modification option configured, so nRF8001 will take care of that automatically whenever the remote side wants to read it.\r\n\r\nAlso, the RX and TX names seem reversed, as they are again from the application\'s point of view, not the remote side\'s. And from application point of view, we really do *send* the button state and *receive* the PWM duty cycle value.\r\n\r\n### Other nRF8001 related header files\r\n\r\nThere are two additional header files in the [`nrf/` directory](https://github.com/sgreg/avr-nrf8001/tree/master/firmware/nrf), `hal_platform.h` and `aci.h`. The first one is empty and is meant for hardware specific implementations. It could be just removed along with its inclusion in `services.h`, but since that file is auto-generated, it will override the modifications next time it\'s getting generated. Plus, if done properly, the AVR related SPI communication should be actually separated in that `hal_platform.h` file.\r\n\r\nThe `aci.h` file is part of Nordic\'s own SDK and was copied from there. There\'s for example [Nordic\'s SDK for Arduino](https://github.com/NordicSemiconductor/ble-sdk-arduino) containing the file. Yes, using that SDK is also an option, it seems quite extensive and possibly handles every case there is to handle. Including those never needed in this system.\r\n\r\n### Everything else\r\n\r\nThe rest is what is required to put all the pieces together:\r\n* `uart.c` and `uart.h` for debug output and debug interface\r\n* `spi.c` and `spi.h` for SPI handling\r\n* `nrf.c` and `nrf.h` for everything related to Bluetooth LE communication through the nRF8001 module\r\n* `main.c` where everything is starting from\r\n\r\nThere\'s nothing too exciting in the first two (well, four with header) files, so the full focus is given to the `nrf.c` and `main.c` files.\r\n\r\n## The *real* code\r\n\r\nWell, okay, the `main.c` isn\'t much of a thrill either, the usual system setup and main loop. The main loop takes care of three main parts:\r\n\r\n1. Button interrupt handling\r\n2. UART debug interface with very limited functionality\r\n3. everything nRF8001 related\r\n\r\nThe actual `INT0` interrupt handler is only setting an internal flag that is then checked during each loop iteration. Sending the button state information through the BLE module can take quite some time (from a CPU point of view), so taking care of this inside the interrupt handler itself is not the best idea.\r\n\r\nThe UART debug interface felt like a nice to have feature during development and testing, and for now only has a reset and temperature command which either resets and re-initializes the nRF8001, or reads the module\'s on-chip temperature.\r\n\r\n### `nrf.c`\r\n\r\nAt last, reaching the centerpiece.\r\n\r\nNow is a good time to get the [nRF8001 Product Specification](https://www.nordicsemi.com/eng/nordic/download_resource/17534/16/98539698/2981) to make sense of the contents in `nrf.c`. While there\'s lots if useful information in it, chapter 23 *Protocol reference* and everything following that will be most useful when reading the code. And of course, [the source file itself](https://github.com/sgreg/avr-nrf8001/blob/master/firmware/nrf.c)\r\n\r\nBreaking down the file in its main parts, we have:\r\n\r\n* `nrf_setup()` for setting up nRF8001 with the generated data from `services.h`\r\n* `nrf_advertise()` to start advertising and set the module to wait for connections\r\n* `nrf_transmit()` and its derivative macros (`nrf_send()`, `nrf_receive()` and `nrf_txrx()`) to send and receive data to and from the nRF8001 module\r\n* `nrf_parse()` to handle received events, including connection state and PWM duty cycle characteristic write commands\r\n* `nrf_send_button_data()` to send the button state\r\n\r\nAgain, the [nRF8001 Product Specification](https://www.nordicsemi.com/eng/nordic/download_resource/17534/16/98539698/2981) and [example system source code](https://github.com/sgreg/avr-nrf8001/tree/master/firmware) next to each other are the best documentation here. I could explain more details about the code, but I kinda hope I did a well enough job with the code readability and comments.\r\n\r\n## Show me what you got\r\n\r\nSetting up the example system is one thing, but actually communicating with it, getting the button state changes and set the LED brightness, and ultimately verifying it actually works is even better. The easiest way is to use a Bluetooth dongle (or a Raspberry Pi and the like with BLE) and `hcitool` and`gatttool` from [BlueZ](http://www.bluez.org/).\r\n\r\n`hcitool` is mostly needed to scan for our device and make sure it\'s actually advertising and also to get its IP address (we could also read that from the module itself, but we\'d still want to see if we can scan for it)\r\n\r\n```txt\r\n$ sudo hcitool lescan\r\nLE Scan ...\r\nC5:9D:03:34:03:C8 AVR nRF8001\r\n```\r\n\r\nSo here we have the MAC address and it shows the name defined in nRFgo Studio\'s GAP settings. Let\'s get the available BLE services from it by calling `gatttool` with our device\'s MAC address, using a random MAC address as our own and the `--primary` parameter:\r\n\r\n```txt\r\n$ gatttool -b C5:9D:03:34:03:C8 -t random --primary\r\nattr handle = 0x0001, end grp handle = 0x0007 uuid: 00001800-0000-1000-8000-00805f9b34fb\r\nattr handle = 0x0008, end grp handle = 0x0008 uuid: 00001801-0000-1000-8000-00805f9b34fb\r\nattr handle = 0x0009, end grp handle = 0xffff uuid: 4215a001-c696-4c43-ab71-20b33874f581\r\n```\r\n\r\nThe first two services are Bluetooth specific [BLE services](https://www.bluetooth.com/specifications/gatt/services) ([Generic Access](https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.service.generic_access.xml) and [Generic Attribute](https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.service.generic_attribute.xml) services) using the official Bluetooth base UUID, while the third one is our custom *Example Service* as specified above. Great.\r\n\r\nLet\'s try the same for the characteristics:\r\n```txt\r\n$ gatttool -b C5:9D:03:34:03:C8 -t random --characteristics\r\nhandle = 0x0002, char properties = 0x02, char value handle = 0x0003, uuid = 00002a00-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0004, char properties = 0x02, char value handle = 0x0005, uuid = 00002a01-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0006, char properties = 0x02, char value handle = 0x0007, uuid = 00002a04-0000-1000-8000-00805f9b34fb\r\nhandle = 0x000a, char properties = 0x06, char value handle = 0x000b, uuid = 4215c001-c696-4c43-ab71-20b33874f581\r\nhandle = 0x000c, char properties = 0x10, char value handle = 0x000d, uuid = 4215c002-c696-4c43-ab71-20b33874f581\r\nhandle = 0x000f, char properties = 0x02, char value handle = 0x0010, uuid = 4215cf00-c696-4c43-ab71-20b33874f581\r\n```\r\n\r\nAgain starting with [official Bluetooth characteristics](https://www.bluetooth.com/specifications/gatt/characteristics), followed by our own three characteristics.\r\n\r\nNow, I added the serial number characteristic as simple read-only value to have a basic test of reading a value from the nRF8001 module. Calling `gatttool --char-read` will do that, but it will require a handle parameter. Looking at the last output, there is a *handle* and a *char value handle* in each line. In this case, we\'ll need the *char value handle*. The handle for our `0xcf00` serial number characteristic is therefore `0x0010`\r\n\r\n```txt\r\n$ gatttool -b C5:9D:03:34:03:C8 -t random --char-read -a 0x0010\r\nCharacteristic value/descriptor: b0 0b fa ce\r\n```\r\n\r\nThe same concept works for writing the PWM duty cycle characteristic `0xc001` with char value handle of `0x000b`. The duty cycle parameter is given directly to the AVR\'s 8bit timer register and therefore a value between 0 and 255 instead of 0% and 100%. \r\n\r\n```text\r\n$ gatttool -b C5:9D:03:34:03:C8 -t random --char-write -a 0x000b -n 7f\r\n$ gatttool -b C5:9D:03:34:03:C8 -t random --char-write -a 0x000b -n ff\r\n$ gatttool -b C5:9D:03:34:03:C8 -t random --char-write -a 0x000b -n 00\r\n```\r\nThis will set the LED brightness to half, full and off again. Note that `-n` parameter (characteristic write value) doesn\'t have the `0x` prefix. Not sure if this is/was a bug since the help output shows it with prefix. If one won\'t work, try the other.\r\n\r\nWhat\'s now left is the button state. For this, we need to look into [characteristic descriptors](https://www.bluetooth.com/specifications/gatt/descriptors). Mainly, our custom button state characteristic needs to be configured to enable notifications on it, using its [Client Characteristic Configuration](https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml). Again, `gatttool` gives us all what we need.\r\n\r\n```txt\r\n$ gatttool -b C5:9D:03:34:03:C8 -t random --char-desc\r\nhandle = 0x0001, uuid = 00002800-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0002, uuid = 00002803-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0003, uuid = 00002a00-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0004, uuid = 00002803-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0005, uuid = 00002a01-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0006, uuid = 00002803-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0007, uuid = 00002a04-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0008, uuid = 00002800-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0009, uuid = 00002800-0000-1000-8000-00805f9b34fb\r\nhandle = 0x000a, uuid = 00002803-0000-1000-8000-00805f9b34fb\r\nhandle = 0x000b, uuid = 4215c001-c696-4c43-ab71-20b33874f581\r\nhandle = 0x000c, uuid = 00002803-0000-1000-8000-00805f9b34fb\r\nhandle = 0x000d, uuid = 4215c002-c696-4c43-ab71-20b33874f581\r\nhandle = 0x000e, uuid = 00002902-0000-1000-8000-00805f9b34fb\r\nhandle = 0x000f, uuid = 00002803-0000-1000-8000-00805f9b34fb\r\nhandle = 0x0010, uuid = 4215cf00-c696-4c43-ab71-20b33874f581\r\n```\r\n\r\nSo we see our `0xc002` button state characteristic in line 14, and right afterwards the Bluetooth `0x2902` client characteristic configuration descriptor in line 15, with the handle `0x000e`. Based on [its documentation](https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml), the first bit needs to be set to enable notifications. In theory, this means writing `0x0001` to handle `0x000e` will do that. In practice, byte order is somewhat different and `0x0100` (i.e. LSB first) is needed.\r\n\r\n```txt\r\n$ gatttool -b C5:9D:03:34:03:C8 -t random --char-write-req -a 0x000e -n 0100 --listen\r\nCharacteristic value was written successfully\r\n```\r\n\r\nUnlike the other commands, this time `gatttool` doesn\'t instantly return back to the shell but waits for the data. So pressing and releasing the button will show\r\n```txt\r\nNotification handle = 0x000d value: 01 \r\nNotification handle = 0x000d value: 00 \r\n```\r\nand continue displaying the button states until interrupted with CTRL+C.\r\n\r\nThere we go, everything appears to work nicely.\r\n\r\n### Getting interactive\r\n\r\nCalling `gatttool` from the console as described above works all well, but for every command called, the connection is established and dropped afterwards. This is okay in general, but there\'s an alternative by using its interactive mode which provides its own command line interface, in which connections can persist.\r\n\r\nInstead of adding any command as parameter, `-I` will run `gatttool` in interactive mode.\r\n\r\n```txt\r\n$ gatttool -b C5:9D:03:34:03:C8 -t random -I\r\n[C5:9D:03:34:03:C8][LE]>\r\n```\r\n\r\nBy default, no connection is active yet but has to be established explicitly\r\n```txt\r\n[C5:9D:03:34:03:C8][LE]> connect\r\nAttempting to connect to C5:9D:03:34:03:C8\r\nConnection successful\r\n[C5:9D:03:34:03:C8][LE]>\r\n```\r\n\r\nIf your terminal supports colors, the MAC address should turn from grey to blue after the connection was successful.\r\n\r\nInside the interactive mode\'s CLI, things work very much the same as on the terminal - plus tab completion.\r\n\r\n```txt\r\n[C5:9D:03:34:03:C8][LE]> char-read-hnd 0x0010\r\nCharacteristic value/descriptor: b0 0b fa ce \r\n[C5:9D:03:34:03:C8][LE]> char-write-\r\nchar-write-cmd  char-write-req  \r\n[C5:9D:03:34:03:C8][LE]> char-write-cmd 0x000b 7f\r\n[C5:9D:03:34:03:C8][LE]> char-write-cmd 0x000b ff\r\n[C5:9D:03:34:03:C8][LE]> char-write-cmd 0x000b 00\r\n[C5:9D:03:34:03:C8][LE]> char-write-req 0x000e 0100\r\nCharacteristic value was written successfully\r\nNotification handle = 0x000d value: 01 \r\nNotification handle = 0x000d value: 00 \r\n[C5:9D:03:34:03:C8][LE]>\r\n```\r\n\r\n## Moving on from here\r\n\r\nOne obvious next step would be to control the BLE device from a mobile app. However, the functionality is so little and its usefulness is even less, it feels pointless to write an app for it. Some generic BLE app that allows you to read and write characteristics is probably fine enough.\r\n','<p>Any day now, my <a href=\"https://www.nordicsemi.com/Products/nRF52-Series-SoC\">nRF52</a> based development board will arrive, while some <a href=\"https://www.nordicsemi.com/Products/nRF51-Series-SoC\">nRF51</a> boards have been around already for some while, waiting to finally get into use. And yes, one day I\'ll really move towards the ARM Cortex-M world. But until then, I\'ll remain in 8bit AVR territory, and be glad for <a href=\"https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF8001\">Nordic\'s nRF8001</a> BLE connectivity chip, which simply provides the Bluetooth LE stack and can be hooked up to and used by anything with an SPI connection.</p>\n<p>Olimex was once again my choice of source, so this article is focusing on <a href=\"https://www.olimex.com/Products/Modules/RF/MOD-nRF8001/\">their nRF8001 module</a>, but I don\'t think there are much differences to other boards such as <a href=\"https://www.adafruit.com/product/1697\">the one from Adafruit</a>. The Olimex board has an additional Bluetooth test interface via UART (which won\'t be used here) but requires 3.3V as input voltage, while the Adafruit board comes equipped with a 3.3V regulator and will also work with e.g. 5V. Other than that, they both use SPI with some additional chip select sync logic for communication, that\'s all that matters for our purpose.</p>\n<h2>Setting up the nRF8001</h2>\n<p>Since the nRF8001 is just a radio connectivity chip with SPI, the setup will happen via SPI as well. In this case, <em>setup</em> means both the Bluetooth radio setup as well as BLE <a href=\"https://www.bluetooth.com/specifications/gatt/services\">services</a> and <a href=\"https://www.bluetooth.com/specifications/gatt/characteristics\">characteristics</a>. Providing all these options can obviously be a bit complex to handle all manually, so Nordic provides <a href=\"https://www.nordicsemi.com/eng/Products/2.4GHz-RF/nRFgo-Studio\">nRFgoStudio</a> to click your configuration together and generate a C header file containing all the information as raw (and rather undocumented) setup commands. Once the nRF8001 comes out of reset, the setup commands can be sent as-is via SPI, and everything is ready to go.</p>\n<p>Unfortunately, nRFgo Studio is a Windows-only program, and there don\'t seem to be any plans to port it to other platforms. But good news, it will work with Wine / PlayOnLinux. Personally, I had a smoother experience installing it through PlayOnLinux though.</p>\n<p>nRFgo Studio has some additional features than setting up the nRF8001 chip, but those won\'t matter to us. And to actually use the program, I recommend having a look at the built-in help on \"nRF8001 Configuration\". They do a better job than I could do myself as part of this article, so I won\'t even try.</p>\n<h3>A simple example</h3>\n<p>To keep things simple, the example system will be a non-secured (i.e. no bonding required) Bluetooth device with a single LED and a button.</p>\n<ul>\n<li>the LED will be connected to the AVR\'s PWM output and the duty cycle is controlled via BLE characteristic.</li>\n<li>the button is connected to the AVR\'s external interrupt pin <code>INT0</code> and any level change is sent to the remote BLE device if it enabled notifications for the button state characteristic.</li>\n</ul>\n<p>For this, there is one custom service defined with those two characteristics, i.e one <em>write without response</em> and one <em>notify</em> characteristic. Both will require some additional interaction, so to start off easier, a simple <em>read</em> characteristic is also added, that just replies with a pre-defined (as part of the configuration in nRFgo Studio) serial number.</p>\n<p><img src=\"/images/nrf8001-breadboard.jpg\" alt=\"BLE test system on a breadboard\" title=\"Two additional LEDs to indicate &#39;setup done&#39; and &#39;remote connected&#39;\"></p>\n<h3>UUIDs, services and characteristics</h3>\n<p>To uniquely define the custom services and characteristics, the universally unique identifier (UUID) needs to be exactly that: universally unique. No other BLE service or characteristic should use it. It\'s not that relevant for a test system like this, but I wouldn\'t want to take the official Bluetooth UUID space for it either. So might as well take a random UUID space.</p>\n<p>nRFgo Studio lets you create such a random UUID space, which in case of the example system is <code>4215xxxx-C696-4C43-AB71-20B33874F581</code>, meaning all but the two bytes marked with <code>xxxx</code> will be static, and those two bytes can be used to uniquely specify each service and characteristic.</p>\n<p>In our case, there is:</p>\n<table>\n<thead><tr>\n<th>UUID</th>\n<th>Type</th>\n<th>Name</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>0xa001</code></td>\n<td>Service</td>\n<td>Example Service</td>\n<td>the BLE service for our system</td>\n</tr>\n<tr>\n<td><code>0xc001</code></td>\n<td>Characteristic</td>\n<td>PWM Duty Cycle</td>\n<td>Write without response</td>\n</tr>\n<tr>\n<td><code>0xc002</code></td>\n<td>Characteristic</td>\n<td>Button State</td>\n<td>Notification</td>\n</tr>\n<tr>\n<td><code>0xcf00</code></td>\n<td>Characteristic</td>\n<td>Serial Number</td>\n<td>Read-only, specified in nRFgo Studio</td>\n</tr>\n</tbody>\n</table>\n<p>All of this can be found and imported to nRFgo Studio from the <a href=\"https://github.com/sgreg/avr-nrf8001/blob/master/generated/avr-nrf8001.xml\">XML configuration file</a> and results in a <a href=\"https://github.com/sgreg/avr-nrf8001/blob/master/generated/services.h\">generated <code>services.h</code> file</a> that is then directly used in the code.</p>\n<h2>The code</h2>\n<p>The generated <code>services.h</code> file is maybe worth to have a first look at before anything else. It probably won\'t make much sense on first glance, and most of it is anyway just some hex data (the setup data). Other than that, the word <em>pipe</em> can be seen rather often.</p>\n<h3>Tell me about Pipes</h3>\n<p>The pipes are the communication channels between the nRF8001 module and the application connected to it (i.e. what\'s running on the AVR in this case). Every communication between the application and remote side will happen through those pipes.</p>\n<p>In this example, there are two of them:  one for the PWM duty cycle, and one for the button state. As you can see, there is no pipe for the serial number characteristic, because this is a read-only value without any modification option configured, so nRF8001 will take care of that automatically whenever the remote side wants to read it.</p>\n<p>Also, the RX and TX names seem reversed, as they are again from the application\'s point of view, not the remote side\'s. And from application point of view, we really do <em>send</em> the button state and <em>receive</em> the PWM duty cycle value.</p>\n<h3>Other nRF8001 related header files</h3>\n<p>There are two additional header files in the <a href=\"https://github.com/sgreg/avr-nrf8001/tree/master/firmware/nrf\"><code>nrf/</code> directory</a>, <code>hal_platform.h</code> and <code>aci.h</code>. The first one is empty and is meant for hardware specific implementations. It could be just removed along with its inclusion in <code>services.h</code>, but since that file is auto-generated, it will override the modifications next time it\'s getting generated. Plus, if done properly, the AVR related SPI communication should be actually separated in that <code>hal_platform.h</code> file.</p>\n<p>The <code>aci.h</code> file is part of Nordic\'s own SDK and was copied from there. There\'s for example <a href=\"https://github.com/NordicSemiconductor/ble-sdk-arduino\">Nordic\'s SDK for Arduino</a> containing the file. Yes, using that SDK is also an option, it seems quite extensive and possibly handles every case there is to handle. Including those never needed in this system.</p>\n<h3>Everything else</h3>\n<p>The rest is what is required to put all the pieces together:</p>\n<ul>\n<li><code>uart.c</code> and <code>uart.h</code> for debug output and debug interface</li>\n<li><code>spi.c</code> and <code>spi.h</code> for SPI handling</li>\n<li><code>nrf.c</code> and <code>nrf.h</code> for everything related to Bluetooth LE communication through the nRF8001 module</li>\n<li><code>main.c</code> where everything is starting from</li>\n</ul>\n<p>There\'s nothing too exciting in the first two (well, four with header) files, so the full focus is given to the <code>nrf.c</code> and <code>main.c</code> files.</p>\n<h2>The <em>real</em> code</h2>\n<p>Well, okay, the <code>main.c</code> isn\'t much of a thrill either, the usual system setup and main loop. The main loop takes care of three main parts:</p>\n<ol>\n<li>Button interrupt handling</li>\n<li>UART debug interface with very limited functionality</li>\n<li>everything nRF8001 related</li>\n</ol>\n<p>The actual <code>INT0</code> interrupt handler is only setting an internal flag that is then checked during each loop iteration. Sending the button state information through the BLE module can take quite some time (from a CPU point of view), so taking care of this inside the interrupt handler itself is not the best idea.</p>\n<p>The UART debug interface felt like a nice to have feature during development and testing, and for now only has a reset and temperature command which either resets and re-initializes the nRF8001, or reads the module\'s on-chip temperature.</p>\n<h3><code>nrf.c</code></h3>\n<p>At last, reaching the centerpiece.</p>\n<p>Now is a good time to get the <a href=\"https://www.nordicsemi.com/eng/nordic/download_resource/17534/16/98539698/2981\">nRF8001 Product Specification</a> to make sense of the contents in <code>nrf.c</code>. While there\'s lots if useful information in it, chapter 23 <em>Protocol reference</em> and everything following that will be most useful when reading the code. And of course, <a href=\"https://github.com/sgreg/avr-nrf8001/blob/master/firmware/nrf.c\">the source file itself</a></p>\n<p>Breaking down the file in its main parts, we have:</p>\n<ul>\n<li><code>nrf_setup()</code> for setting up nRF8001 with the generated data from <code>services.h</code></li>\n<li><code>nrf_advertise()</code> to start advertising and set the module to wait for connections</li>\n<li><code>nrf_transmit()</code> and its derivative macros (<code>nrf_send()</code>, <code>nrf_receive()</code> and <code>nrf_txrx()</code>) to send and receive data to and from the nRF8001 module</li>\n<li><code>nrf_parse()</code> to handle received events, including connection state and PWM duty cycle characteristic write commands</li>\n<li><code>nrf_send_button_data()</code> to send the button state</li>\n</ul>\n<p>Again, the <a href=\"https://www.nordicsemi.com/eng/nordic/download_resource/17534/16/98539698/2981\">nRF8001 Product Specification</a> and <a href=\"https://github.com/sgreg/avr-nrf8001/tree/master/firmware\">example system source code</a> next to each other are the best documentation here. I could explain more details about the code, but I kinda hope I did a well enough job with the code readability and comments.</p>\n<h2>Show me what you got</h2>\n<p>Setting up the example system is one thing, but actually communicating with it, getting the button state changes and set the LED brightness, and ultimately verifying it actually works is even better. The easiest way is to use a Bluetooth dongle (or a Raspberry Pi and the like with BLE) and <code>hcitool</code> and<code>gatttool</code> from <a href=\"http://www.bluez.org/\">BlueZ</a>.</p>\n<p><code>hcitool</code> is mostly needed to scan for our device and make sure it\'s actually advertising and also to get its IP address (we could also read that from the module itself, but we\'d still want to see if we can scan for it)</p>\n<pre class=\"lang-txt line-numbers\"><code>$ sudo hcitool lescan\nLE Scan ...\nC5:9D:03:34:03:C8 AVR nRF8001\n</code></pre>\n<p>So here we have the MAC address and it shows the name defined in nRFgo Studio\'s GAP settings. Let\'s get the available BLE services from it by calling <code>gatttool</code> with our device\'s MAC address, using a random MAC address as our own and the <code>--primary</code> parameter:</p>\n<pre class=\"lang-txt line-numbers\"><code>$ gatttool -b C5:9D:03:34:03:C8 -t random --primary\nattr handle = 0x0001, end grp handle = 0x0007 uuid: 00001800-0000-1000-8000-00805f9b34fb\nattr handle = 0x0008, end grp handle = 0x0008 uuid: 00001801-0000-1000-8000-00805f9b34fb\nattr handle = 0x0009, end grp handle = 0xffff uuid: 4215a001-c696-4c43-ab71-20b33874f581\n</code></pre>\n<p>The first two services are Bluetooth specific <a href=\"https://www.bluetooth.com/specifications/gatt/services\">BLE services</a> (<a href=\"https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.service.generic_access.xml\">Generic Access</a> and <a href=\"https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.service.generic_attribute.xml\">Generic Attribute</a> services) using the official Bluetooth base UUID, while the third one is our custom <em>Example Service</em> as specified above. Great.</p>\n<p>Let\'s try the same for the characteristics:</p>\n<pre class=\"lang-txt line-numbers\"><code>$ gatttool -b C5:9D:03:34:03:C8 -t random --characteristics\nhandle = 0x0002, char properties = 0x02, char value handle = 0x0003, uuid = 00002a00-0000-1000-8000-00805f9b34fb\nhandle = 0x0004, char properties = 0x02, char value handle = 0x0005, uuid = 00002a01-0000-1000-8000-00805f9b34fb\nhandle = 0x0006, char properties = 0x02, char value handle = 0x0007, uuid = 00002a04-0000-1000-8000-00805f9b34fb\nhandle = 0x000a, char properties = 0x06, char value handle = 0x000b, uuid = 4215c001-c696-4c43-ab71-20b33874f581\nhandle = 0x000c, char properties = 0x10, char value handle = 0x000d, uuid = 4215c002-c696-4c43-ab71-20b33874f581\nhandle = 0x000f, char properties = 0x02, char value handle = 0x0010, uuid = 4215cf00-c696-4c43-ab71-20b33874f581\n</code></pre>\n<p>Again starting with <a href=\"https://www.bluetooth.com/specifications/gatt/characteristics\">official Bluetooth characteristics</a>, followed by our own three characteristics.</p>\n<p>Now, I added the serial number characteristic as simple read-only value to have a basic test of reading a value from the nRF8001 module. Calling <code>gatttool --char-read</code> will do that, but it will require a handle parameter. Looking at the last output, there is a <em>handle</em> and a <em>char value handle</em> in each line. In this case, we\'ll need the <em>char value handle</em>. The handle for our <code>0xcf00</code> serial number characteristic is therefore <code>0x0010</code></p>\n<pre class=\"lang-txt line-numbers\"><code>$ gatttool -b C5:9D:03:34:03:C8 -t random --char-read -a 0x0010\nCharacteristic value/descriptor: b0 0b fa ce\n</code></pre>\n<p>The same concept works for writing the PWM duty cycle characteristic <code>0xc001</code> with char value handle of <code>0x000b</code>. The duty cycle parameter is given directly to the AVR\'s 8bit timer register and therefore a value between 0 and 255 instead of 0% and 100%.</p>\n<pre class=\"lang-text line-numbers\"><code>$ gatttool -b C5:9D:03:34:03:C8 -t random --char-write -a 0x000b -n 7f\n$ gatttool -b C5:9D:03:34:03:C8 -t random --char-write -a 0x000b -n ff\n$ gatttool -b C5:9D:03:34:03:C8 -t random --char-write -a 0x000b -n 00\n</code></pre>\n<p>This will set the LED brightness to half, full and off again. Note that <code>-n</code> parameter (characteristic write value) doesn\'t have the <code>0x</code> prefix. Not sure if this is/was a bug since the help output shows it with prefix. If one won\'t work, try the other.</p>\n<p>What\'s now left is the button state. For this, we need to look into <a href=\"https://www.bluetooth.com/specifications/gatt/descriptors\">characteristic descriptors</a>. Mainly, our custom button state characteristic needs to be configured to enable notifications on it, using its <a href=\"https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml\">Client Characteristic Configuration</a>. Again, <code>gatttool</code> gives us all what we need.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ gatttool -b C5:9D:03:34:03:C8 -t random --char-desc\nhandle = 0x0001, uuid = 00002800-0000-1000-8000-00805f9b34fb\nhandle = 0x0002, uuid = 00002803-0000-1000-8000-00805f9b34fb\nhandle = 0x0003, uuid = 00002a00-0000-1000-8000-00805f9b34fb\nhandle = 0x0004, uuid = 00002803-0000-1000-8000-00805f9b34fb\nhandle = 0x0005, uuid = 00002a01-0000-1000-8000-00805f9b34fb\nhandle = 0x0006, uuid = 00002803-0000-1000-8000-00805f9b34fb\nhandle = 0x0007, uuid = 00002a04-0000-1000-8000-00805f9b34fb\nhandle = 0x0008, uuid = 00002800-0000-1000-8000-00805f9b34fb\nhandle = 0x0009, uuid = 00002800-0000-1000-8000-00805f9b34fb\nhandle = 0x000a, uuid = 00002803-0000-1000-8000-00805f9b34fb\nhandle = 0x000b, uuid = 4215c001-c696-4c43-ab71-20b33874f581\nhandle = 0x000c, uuid = 00002803-0000-1000-8000-00805f9b34fb\nhandle = 0x000d, uuid = 4215c002-c696-4c43-ab71-20b33874f581\nhandle = 0x000e, uuid = 00002902-0000-1000-8000-00805f9b34fb\nhandle = 0x000f, uuid = 00002803-0000-1000-8000-00805f9b34fb\nhandle = 0x0010, uuid = 4215cf00-c696-4c43-ab71-20b33874f581\n</code></pre>\n<p>So we see our <code>0xc002</code> button state characteristic in line 14, and right afterwards the Bluetooth <code>0x2902</code> client characteristic configuration descriptor in line 15, with the handle <code>0x000e</code>. Based on <a href=\"https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.descriptor.gatt.client_characteristic_configuration.xml\">its documentation</a>, the first bit needs to be set to enable notifications. In theory, this means writing <code>0x0001</code> to handle <code>0x000e</code> will do that. In practice, byte order is somewhat different and <code>0x0100</code> (i.e. LSB first) is needed.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ gatttool -b C5:9D:03:34:03:C8 -t random --char-write-req -a 0x000e -n 0100 --listen\nCharacteristic value was written successfully\n</code></pre>\n<p>Unlike the other commands, this time <code>gatttool</code> doesn\'t instantly return back to the shell but waits for the data. So pressing and releasing the button will show</p>\n<pre class=\"lang-txt line-numbers\"><code>Notification handle = 0x000d value: 01 \nNotification handle = 0x000d value: 00\n</code></pre>\n<p>and continue displaying the button states until interrupted with CTRL+C.</p>\n<p>There we go, everything appears to work nicely.</p>\n<h3>Getting interactive</h3>\n<p>Calling <code>gatttool</code> from the console as described above works all well, but for every command called, the connection is established and dropped afterwards. This is okay in general, but there\'s an alternative by using its interactive mode which provides its own command line interface, in which connections can persist.</p>\n<p>Instead of adding any command as parameter, <code>-I</code> will run <code>gatttool</code> in interactive mode.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ gatttool -b C5:9D:03:34:03:C8 -t random -I\n[C5:9D:03:34:03:C8][LE]&gt;\n</code></pre>\n<p>By default, no connection is active yet but has to be established explicitly</p>\n<pre class=\"lang-txt line-numbers\"><code>[C5:9D:03:34:03:C8][LE]&gt; connect\nAttempting to connect to C5:9D:03:34:03:C8\nConnection successful\n[C5:9D:03:34:03:C8][LE]&gt;\n</code></pre>\n<p>If your terminal supports colors, the MAC address should turn from grey to blue after the connection was successful.</p>\n<p>Inside the interactive mode\'s CLI, things work very much the same as on the terminal - plus tab completion.</p>\n<pre class=\"lang-txt line-numbers\"><code>[C5:9D:03:34:03:C8][LE]&gt; char-read-hnd 0x0010\nCharacteristic value/descriptor: b0 0b fa ce \n[C5:9D:03:34:03:C8][LE]&gt; char-write-\nchar-write-cmd  char-write-req  \n[C5:9D:03:34:03:C8][LE]&gt; char-write-cmd 0x000b 7f\n[C5:9D:03:34:03:C8][LE]&gt; char-write-cmd 0x000b ff\n[C5:9D:03:34:03:C8][LE]&gt; char-write-cmd 0x000b 00\n[C5:9D:03:34:03:C8][LE]&gt; char-write-req 0x000e 0100\nCharacteristic value was written successfully\nNotification handle = 0x000d value: 01 \nNotification handle = 0x000d value: 00 \n[C5:9D:03:34:03:C8][LE]&gt;\n</code></pre>\n<h2>Moving on from here</h2>\n<p>One obvious next step would be to control the BLE device from a mobile app. However, the functionality is so little and its usefulness is even less, it feels pointless to write an app for it. Some generic BLE app that allows you to read and write characteristics is probably fine enough.</p>\n','2017-02-25 02:43:19',1,1),(4,'A simple ESP8266 C SDK project template','simple-esp8266-c-sdk-project-template','Programming the ESP8266 low-cost WiFi microcontroller with its native C SDK using a simple project template creation script. From basic setup to flashing a full-blown hello world firmware.','esp8266.jpg','A little while ago I started a new ESP8266 based project. Last time I touched one of them was probably around a year ago, so my memory was a bit blurry on how to approach it. Somehow I always start with NodeMCU and then get too impatient to wrap my head around Lua and instead fall back to the native C SDK. To avoid starting from zero again next time, I created a simple project template based around the \"standard\" example Makefile (see file itself for author credits)\r\n\r\nI\'m going to skip all basic introduction of ESP8266 and all alternative development options. *Everybody* is using them and writing about it, I doubt I could add much value here. Check the [ESP8266 community forum](http://www.esp8266.com/) and [Espressif\'s official forum](http://bbs.espressif.com/) instead.\r\n\r\n## Get the toolchain\r\n\r\nCan\'t develop without a toolchain. Thanks to the [esp-open-sdk project on Github](https://github.com/pfalcon/esp-open-sdk), this is straightforward for Ubuntu/Debian, and based on the dependencies list, it should be equally smooth for other distributions.\r\n\r\nBy default, the toolchain is built inside its own directory, so wherever you clone the repository into, the toolchain will be located. I\'ll be cloning into ```/opt```, so the toolchain will be in  ```/opt/esp-open-sdk/```, but any other place is fine as well.\r\n\r\n## SDK project template\r\n\r\nGet the [ESP C SDK template from GitHub](https://github.com/sgreg/esp8266-c-sdk-template) and clone it anywhere you want to. It doesn\'t have to be the same place you put the toolchain.\r\n\r\n```shell\r\ngit clone https://github.com/sgreg/esp8266-c-sdk-template\r\n```\r\n\r\nStill need to point the template to the toolchain, so edit the ```setenv.sh``` file and change the ```ESP_SDK_ROOT``` variable to the directory to the location of the toolchain (i.e. where you cloned the esp-open-sdk repository into).\r\n```shell\r\ncd esp8266-c-sdk-template\r\nvim setenv.sh\r\n```\r\n\r\nWith the paths adjusted, source the ```setenv.sh``` file\r\n```shell\r\n. ./setenv.sh\r\n```\r\n\r\nNow all is set up to create a first ESP8266 project. The ```mkproject.sh``` script will set up the base directory structure and Makefile in a directory of your choice. Again, this can be anywhere in the file system and doesn\'t have to be in the same place as either the toolchain or the template files themselves.\r\n\r\n```shell\r\n./mkproject.sh ~/work/esp8266/something/firmware\r\n```\r\n\r\nOn success, the script will print a crappy guidance to set up an Eclipse project, not sure if this will ever be any better or even automated in the future, don\'t get your hopes up. But you can always just use the command line, as additionally stated in the script\'s output. To verify all works as intended, we\'ll be doing exactly that.\r\n\r\n### File structure\r\n\r\nThe template creates four files/directories:\r\n* ```user/main.c``` main source file with program entry point. Start writing your code here\r\n* ```user/user_config.h``` user defined configuration header, empty by default. SDK header files rely on the existence of this file, so don\'t delete it even if you don\'t use it\r\n* ```driver/``` empty directory to place code for drivers. Mainly to separate external components\' driver code from the main code, can be deleted if not used.\r\n* ```Makefile``` putting it all neatly together. Again, this was copied from an example project and I don\'t take credit for it.\r\n\r\n## Compile the created project\r\n\r\nThe ```main.c``` file doesn\'t do much but setting up a UART for serial communication and printing a hello. For the purpose of this article, that should be enough to verify functionality. Again, the internet is full of other examples.\r\n\r\nMake sure you\'re using the same terminal you sourced ```setenv.sh``` before, otherwise source it again. Afterwards, go to the source directory the template script created and simply run ```make``` to compile and create the firmware binaries. In best case, you shouldn\'t get any errors but the output shown here.\r\n```shell\r\n$ cd ~/work/esp8266/something/firmware\r\n$ make\r\nCC user/main.c\r\nAR build/app_app.a\r\nLD build/app.out\r\nFW firmware/\r\nesptool.py v1.2\r\nFW firmware/\r\nesptool.py v1.2\r\n$\r\n```\r\n\r\n### A word about ESP8266 boards\r\n\r\nBefore we continue to flash the freshly created firmware binaries, I\'d like to say a few words about ESP boards and hardware set up for flashing.\r\n\r\nThere are quite a few boards available, see [the community wiki family overview](http://www.esp8266.com/wiki/doku.php?id=esp8266-module-family) for some of them. Personally, I\'ve been mostly using the ESP-01 because it\'s cheap, small and has the basic pins available, and [Olimex\'s MOD-WIFI-ESP8266-DEV board](https://www.olimex.com/Products/IoT/MOD-WIFI-ESP8266-DEV/) which has most pins broken out and is breadboard friendly.\r\n\r\nThere\'s also a USB adapter board for the ESP-01 providing both power and serial interface. But flashing the boards still require some hackish wiring. There are probably some boards out there that have a \"flash\" button taking care of this..?\r\n\r\n![ESP-01 adapter board](/images/esp-01-adapter.jpg \"ESP-01 USB adapter board\")\r\n\r\n## Flashing the firmware\r\n\r\nThe ESP8266 uses some of its GPIOs to determine the boot mode. The two most interesting boot modes are *Flash* to load the firmware from the flash memory, and *UART* to transfer the firmware via serial interface. Usually the hardware is arranged to have the *Flash* boot mode as default, and pulling ```GPIO0``` to Ground during reset will set the boot mode to *UART*. We\'re gonna need the latter one to flash the firmware.\r\n\r\nAs mentioned, buttons would be nice for this, but at least the boards I\'ve been using don\'t have this luxury. Instead I\'ll use some jumper wire and for example  a breadboard. Since we need to pull both ```GPIO0``` and ```RST``` to Ground and don\'t need to handle the supply voltage in any way, the risk of killing the microcontroller is quite low.\r\n\r\nPrepare for flashing:\r\n1. have the ESP board powered and a serial connection\r\n2. connect the ```GPIO0``` pin to Ground\r\n3. connect the ```RST``` pin to Ground for a brief moment, the remove the connection\r\n\r\nNow the hardware is ready. Make sure you don\'t have any serial connection to the ESP board open, e.g.  minicom or any other terminal emulator running. Also make sure you have source ```setenv.sh``` at some point.\r\n\r\nNote, the Makefile assumes your serial port is ```/dev/ttyUSB0```. Depending on your serial connection / adapter, it might use a different device. \r\n\r\n```shell\r\n$ make flash\r\nesptool.py --port /dev/ttyUSB0 write_flash 0x00000 firmware/0x00000.bin 0x40000 firmware/0x40000.bin\r\nesptool.py v1.2\r\nConnecting...\r\nAuto-detected Flash size: 8m\r\nRunning Cesanta flasher stub...\r\nFlash params set to 0x0020\r\nWriting 28672 @ 0x0... 28672 (100 %)\r\nWrote 28672 bytes at 0x0 in 2.5 seconds (91.9 kbit/s)...\r\nWriting 188416 @ 0x40000... 188416 (100 %)\r\nWrote 188416 bytes at 0x40000 in 16.3 seconds (92.2 kbit/s)...\r\nLeaving...\r\n$\r\n```\r\n\r\nRemove the grounded connection of ```GPIO0```, open a serial connection to ```/dev/ttyUSB0``` with 9600 baud 8N1 configuration and reset the board.\r\n\r\nYou should now see a greeting from the ESP:\r\n```shell\r\nESP8266 says hello\r\n\r\n```\r\n\r\nIt\'s possible you see some additional output after that, in which case the ESP8266 is starting up as access point. Either way - hooray. Everything seems to work just fine if you got this far.\r\n\r\n## Continue from here\r\n\r\nAgain, there are enough examples out there to study and play with. Something you probably want to take a look at is the [ESP8266 Non-OS SDK API Reference](https://www.espressif.com/sites/default/files/documentation/2c-esp8266_non_os_sdk_api_reference_en.pdf).','<p>A little while ago I started a new ESP8266 based project. Last time I touched one of them was probably around a year ago, so my memory was a bit blurry on how to approach it. Somehow I always start with NodeMCU and then get too impatient to wrap my head around Lua and instead fall back to the native C SDK. To avoid starting from zero again next time, I created a simple project template based around the \"standard\" example Makefile (see file itself for author credits)</p>\n<p>I\'m going to skip all basic introduction of ESP8266 and all alternative development options. <em>Everybody</em> is using them and writing about it, I doubt I could add much value here. Check the <a href=\"http://www.esp8266.com/\">ESP8266 community forum</a> and <a href=\"http://bbs.espressif.com/\">Espressif\'s official forum</a> instead.</p>\n<h2>Get the toolchain</h2>\n<p>Can\'t develop without a toolchain. Thanks to the <a href=\"https://github.com/pfalcon/esp-open-sdk\">esp-open-sdk project on Github</a>, this is straightforward for Ubuntu/Debian, and based on the dependencies list, it should be equally smooth for other distributions.</p>\n<p>By default, the toolchain is built inside its own directory, so wherever you clone the repository into, the toolchain will be located. I\'ll be cloning into <code>/opt</code>, so the toolchain will be in  <code>/opt/esp-open-sdk/</code>, but any other place is fine as well.</p>\n<h2>SDK project template</h2>\n<p>Get the <a href=\"https://github.com/sgreg/esp8266-c-sdk-template\">ESP C SDK template from GitHub</a> and clone it anywhere you want to. It doesn\'t have to be the same place you put the toolchain.</p>\n<pre class=\"lang-shell line-numbers\"><code>git clone https://github.com/sgreg/esp8266-c-sdk-template\n</code></pre>\n<p>Still need to point the template to the toolchain, so edit the <code>setenv.sh</code> file and change the <code>ESP_SDK_ROOT</code> variable to the directory to the location of the toolchain (i.e. where you cloned the esp-open-sdk repository into).</p>\n<pre class=\"lang-shell line-numbers\"><code>cd esp8266-c-sdk-template\nvim setenv.sh\n</code></pre>\n<p>With the paths adjusted, source the <code>setenv.sh</code> file</p>\n<pre class=\"lang-shell line-numbers\"><code>. ./setenv.sh\n</code></pre>\n<p>Now all is set up to create a first ESP8266 project. The <code>mkproject.sh</code> script will set up the base directory structure and Makefile in a directory of your choice. Again, this can be anywhere in the file system and doesn\'t have to be in the same place as either the toolchain or the template files themselves.</p>\n<pre class=\"lang-shell line-numbers\"><code>./mkproject.sh ~/work/esp8266/something/firmware\n</code></pre>\n<p>On success, the script will print a crappy guidance to set up an Eclipse project, not sure if this will ever be any better or even automated in the future, don\'t get your hopes up. But you can always just use the command line, as additionally stated in the script\'s output. To verify all works as intended, we\'ll be doing exactly that.</p>\n<h3>File structure</h3>\n<p>The template creates four files/directories:</p>\n<ul>\n<li><code>user/main.c</code> main source file with program entry point. Start writing your code here</li>\n<li><code>user/user_config.h</code> user defined configuration header, empty by default. SDK header files rely on the existence of this file, so don\'t delete it even if you don\'t use it</li>\n<li><code>driver/</code> empty directory to place code for drivers. Mainly to separate external components\' driver code from the main code, can be deleted if not used.</li>\n<li><code>Makefile</code> putting it all neatly together. Again, this was copied from an example project and I don\'t take credit for it.</li>\n</ul>\n<h2>Compile the created project</h2>\n<p>The <code>main.c</code> file doesn\'t do much but setting up a UART for serial communication and printing a hello. For the purpose of this article, that should be enough to verify functionality. Again, the internet is full of other examples.</p>\n<p>Make sure you\'re using the same terminal you sourced <code>setenv.sh</code> before, otherwise source it again. Afterwards, go to the source directory the template script created and simply run <code>make</code> to compile and create the firmware binaries. In best case, you shouldn\'t get any errors but the output shown here.</p>\n<pre class=\"lang-shell line-numbers\"><code>$ cd ~/work/esp8266/something/firmware\n$ make\nCC user/main.c\nAR build/app_app.a\nLD build/app.out\nFW firmware/\nesptool.py v1.2\nFW firmware/\nesptool.py v1.2\n$\n</code></pre>\n<h3>A word about ESP8266 boards</h3>\n<p>Before we continue to flash the freshly created firmware binaries, I\'d like to say a few words about ESP boards and hardware set up for flashing.</p>\n<p>There are quite a few boards available, see <a href=\"http://www.esp8266.com/wiki/doku.php?id=esp8266-module-family\">the community wiki family overview</a> for some of them. Personally, I\'ve been mostly using the ESP-01 because it\'s cheap, small and has the basic pins available, and <a href=\"https://www.olimex.com/Products/IoT/MOD-WIFI-ESP8266-DEV/\">Olimex\'s MOD-WIFI-ESP8266-DEV board</a> which has most pins broken out and is breadboard friendly.</p>\n<p>There\'s also a USB adapter board for the ESP-01 providing both power and serial interface. But flashing the boards still require some hackish wiring. There are probably some boards out there that have a \"flash\" button taking care of this..?</p>\n<p><img src=\"/images/esp-01-adapter.jpg\" alt=\"ESP-01 adapter board\" title=\"ESP-01 USB adapter board\"></p>\n<h2>Flashing the firmware</h2>\n<p>The ESP8266 uses some of its GPIOs to determine the boot mode. The two most interesting boot modes are <em>Flash</em> to load the firmware from the flash memory, and <em>UART</em> to transfer the firmware via serial interface. Usually the hardware is arranged to have the <em>Flash</em> boot mode as default, and pulling <code>GPIO0</code> to Ground during reset will set the boot mode to <em>UART</em>. We\'re gonna need the latter one to flash the firmware.</p>\n<p>As mentioned, buttons would be nice for this, but at least the boards I\'ve been using don\'t have this luxury. Instead I\'ll use some jumper wire and for example  a breadboard. Since we need to pull both <code>GPIO0</code> and <code>RST</code> to Ground and don\'t need to handle the supply voltage in any way, the risk of killing the microcontroller is quite low.</p>\n<p>Prepare for flashing:</p>\n<ol>\n<li>have the ESP board powered and a serial connection</li>\n<li>connect the <code>GPIO0</code> pin to Ground</li>\n<li>connect the <code>RST</code> pin to Ground for a brief moment, the remove the connection</li>\n</ol>\n<p>Now the hardware is ready. Make sure you don\'t have any serial connection to the ESP board open, e.g.  minicom or any other terminal emulator running. Also make sure you have source <code>setenv.sh</code> at some point.</p>\n<p>Note, the Makefile assumes your serial port is <code>/dev/ttyUSB0</code>. Depending on your serial connection / adapter, it might use a different device.</p>\n<pre class=\"lang-shell line-numbers\"><code>$ make flash\nesptool.py --port /dev/ttyUSB0 write_flash 0x00000 firmware/0x00000.bin 0x40000 firmware/0x40000.bin\nesptool.py v1.2\nConnecting...\nAuto-detected Flash size: 8m\nRunning Cesanta flasher stub...\nFlash params set to 0x0020\nWriting 28672 @ 0x0... 28672 (100 %)\nWrote 28672 bytes at 0x0 in 2.5 seconds (91.9 kbit/s)...\nWriting 188416 @ 0x40000... 188416 (100 %)\nWrote 188416 bytes at 0x40000 in 16.3 seconds (92.2 kbit/s)...\nLeaving...\n$\n</code></pre>\n<p>Remove the grounded connection of <code>GPIO0</code>, open a serial connection to <code>/dev/ttyUSB0</code> with 9600 baud 8N1 configuration and reset the board.</p>\n<p>You should now see a greeting from the ESP:</p>\n<pre class=\"lang-shell line-numbers\"><code>ESP8266 says hello\n</code></pre>\n<p>It\'s possible you see some additional output after that, in which case the ESP8266 is starting up as access point. Either way - hooray. Everything seems to work just fine if you got this far.</p>\n<h2>Continue from here</h2>\n<p>Again, there are enough examples out there to study and play with. Something you probably want to take a look at is the <a href=\"https://www.espressif.com/sites/default/files/documentation/2c-esp8266_non_os_sdk_api_reference_en.pdf\">ESP8266 Non-OS SDK API Reference</a>.</p>\n','2016-11-04 01:33:16',1,1),(5,'Creating an utterly useless \"smart\" power plug','creating-an-utterly-useless-smart-power-plug','A \"smart\" and utterly useless IoT power plug that tells you whether you plugged it in the socket or not. A companion Android app will inform you nearly real-time on any plugging changes, and of course, shit\'s tweetin\' too, yo.','smartplug-open.jpg','Ever wanted to get a notification when you plug in your favorite power plug?  \r\nLet your friends know about it, and tell the whole world along the way?\r\n\r\nEver wished your favorite power plug would inform you about getting unplugged?  \r\nEver imagined someone could even have a *favorite* power plug?\r\n\r\nIf you actually answered a \"yes\" somewhere along the way, well you\'re in for a treat, you magnificent visionary. All this - and so much more - is possible with the *utterly useless \"smart\" plug*.\r\n\r\n## What it is and does\r\n\r\nOkay, so, this is actually a real thing. I built a power plug around an ESP8266 that will notice whenever you plug it in and out the power socket. The ESP8266 firmware can be compiled to either use a third party service ([ThingSpeak](https://thingspeak.com/)), or inform a homebrew backend about the plug state change. More on that later. First, a picture:\r\n\r\n![Assembled power plug](/images/smartplug-enclosure-660.jpg \"A wireless power plug. Literally.\")\r\n\r\nAnd to proof this is not just some power plug enclosure, here is what it looks like once you open it and take it a bit apart:\r\n\r\n![Power plug opened](/images/smartplug-apart-660.jpg \"ESP-01, battery with charger circuit and some other stuff\")\r\n\r\nWhat you see here is almost all there is to see:\r\n* on the top, a small LiPo battery and a partially covered LiPo charging circuit\r\n* in the center, an ESP-01 module and a 3.3V DC-DC regulator (mostly hidden under the ESP)\r\n* on the bottom, all the rest (MOSFET as power supply switch, BJTs as logic switches and some resistors to accompany all that)\r\n\r\nOnly thing not shown is the 230V to 5V switching power supply, connecting the LiPo battery charging circuit to the mains power. That one is hot glued to the back of the board, along with a wild mess of wires.\r\n\r\n![Power plug opened from the backside](/images/smartplug-backside-660.jpg \"230V power supply and artistically positioned ESP-01\")\r\n\r\nBefore moving on, it\'s probably a good idea to refer to the [Smartplug\'s GitHub repository](https://github.com/sgreg/smartplug) where you\'ll also find [its schematic](https://github.com/sgreg/smartplug/blob/master/hardware/smartplug.pdf).\r\n\r\n## The Hardware\r\n\r\nSo the plan is to have both states - plugged and unplugged - detected. The first one is easy, once it powers up, it must be plugged in. The latter part is a different story entirely. I could have built a system that pings the plug periodically to see if it\'s still answering - or have the plug send a heartbeat message. But that didn\'t seem right.\r\n\r\nI\'ve been looking for a reason to play around with LiPo batteries and their charging circuits for a while already, and this seemed like the perfect opportunity now. Once the main power is removed, the battery would (hopefully seamlessly) take over to keep the system up and running. A first check verified: yes, it does.\r\n\r\nDetecting the power supply removal was the next step, which means pretty much just connecting the 5V side of the switching power supply through a voltage divider to an ESP8266 GPIO and enable an interrupt on the pin. I went for a 2k2 and 3k3 resistor, resulting in theoretical 3.0V at the GPIO. That\'s high enough to be detected as logic one, and low enough to do no harm.\r\n\r\nSpeaking of proper voltages, the ESP supply voltage should be between 3.0 and 3.6V, with 3.3V being a common value. However, the LiPo charging circuit and battery provide either the charging voltage (4.2V) or the battery\'s own output voltage. Regulating it with a LD1117 wouldn\'t work due to the regulator\'s 1V drop-out voltage. So I looked into DC-DC regulators and found one that regulates anything from 3.0-5.5V to 3.3V.\r\n\r\nBut wait! How to power the whole system down now? Once the power supply removal is detected, the battery jumps in and even if the ESP8266 would power itself down somehow / go to sleep, the regulator wouldn\'t. This is not a satisfying solution, I\'d want it to completely shut down eventually.\r\n\r\n### *Hello darkness, my old friend...*\r\n\r\nMy mind got occupied with thoughts of suicide. Regarding the smartplug, of course.\r\n\r\nI needed some sort of kill switch that would cut the power between the battery and the DC-DC regulator. It quickly became clear, this is a different story than switching a LED on and off with a transistor, and I ended up in p-channel MOSFET territory and the concept of [\"high side switching\"](http://hackaday.com/2015/09/16/learn-and-build-a-high-side-switch/). But before the MOSFET could kill anything, it first needs to make it alive.\r\n\r\nSo, whenever the power supply is available (i.e. the plug is plugged in), it should switch the MOSFET (Q1 in [the schematic](https://github.com/sgreg/smartplug/blob/master/hardware/smartplug.pdf)) to connect the ESP to its supply voltage. Once powered on, the ESP should then use a GPIO pin to keep the gate voltage as needed to keep the MOSFET switched once the power supply is removed. After that, the ESP holds its own fate in its ~~hand~~ pin. This is practically a simple OR gate, which can be achieved using two simple NPN transistors.\r\n\r\n### Building an actual power plug\r\n\r\nUp until now, everything was put together on a breadboard using a nice ESP8266 development board with lots of pins broken out. This was very convenient to have enough GPIOs to detect the supply voltage, switch the MOSFET, and keep the ESP\'s boot mode state detection pins unrelated to all of it. (ESP8266 can have different boot modes like loading the firmware from the flash memory or a UART connection)\r\n\r\n![Smartplug on a breadboard](/images/smartplug-breadboard-660.jpg \"Look at all the pins I have\")\r\n\r\nWhile that board is great for breadboarding, it gets a but inconvenient for the power plug case I got - both for space and pin assignment reasons. I also preferred to keep those boards available for future breadboard prototyping, and use an ESP-01 module instead (which doesn\'t really work too well on a breadboard and additionally has a much lower price tag).\r\n\r\nHmm, well, the ESP-01 has only two GPIO pins available on its breakout headers, which are of course ```GPIO0``` and ```GPIO2```, the pins the boot mode state is determined from.\r\n\r\nThe good news is, these pins are only used when powering up the ESP, once the boot mode is determined and execution starts, the pins can be used as regular GPIO pins. And as mentioned before, two pins is all we need: one to detect the supply voltage, one to switch the MOSFET. But this means the hardware must be designed to ensure the correct default levels of those two GPIO pins during power up. I decided to program the ESP only externally and never inside this hardware arrangement, so I didn\'t have to worry about changing the boot modes. So it will always have the \"boot from flash\" mode, meaning both ```GPIO0``` and ```GPIO2``` must be high level on power up.\r\n\r\nSo, ```GPIO0``` is used for main power supply detection, that means it\'s anyway high level when power is applied, so that\'s taken care of. For ```GPIO2``` I took one more NPN transistor (Q4 in [the schematic](https://github.com/sgreg/smartplug/blob/master/hardware/smartplug.pdf)) with\r\n\r\n* Base connected to the main power supply\r\n* Collector connected to the ESP supply voltage (i.e. the DC-DC regulator output)\r\n* Emitter connected to ```GPIO2```\r\n\r\nMeaning, when powered up, the transistor will switch the ESP\'s supply voltage to its ```GPIO2``` pin, and both GPIO pins will have high level. All good this way.\r\n\r\nAnd that concludes the smartplug\'s hardware. For another summary, have a look at the [hardware section on GitHub](https://github.com/sgreg/smartplug/tree/master/hardware). Now let\'s have the hardware actually do something.\r\n\r\n## ESP8266 firmware\r\n\r\nThere\'s not too much happening in [the smartplug firmware](https://github.com/sgreg/smartplug/tree/master/firmware), it looks more complex than it actually is. Its main operation is\r\n\r\n* Set ```GPIO0``` as input and set up its interrupt handler\r\n* Set ```GPIO2``` as output\r\n* Set up debounce timer for ```GPIO0``` (more on that in a moment)\r\n* Set up WiFi\r\n* Send \"plug plugged in\" state\r\n\r\nAfter that, it just waits for the interrupt from ```GPIO0``` when the plug gets unplugged and the power supply detection pin goes low. The signal will most likely bounce a bit though, causing more than one interrupt. So instead of handling the signal change right away, so just mentioned debounce timer is used to wait for the signal to settle.\r\n\r\nEvery time the GPIO interrupt happens, the timer is reset (without executing its own handler) and restarted for 200ms. To reset the timer on any signal transition, the interrupt itself is set up for both rising and falling edge.\r\n\r\nOnce the timer actually does expire and triggers its own interrupt handler, it can be assumed the signal is not bouncing anymore (since there was no GPIO change that would have reset the timer), and the level on the pin is reliable.\r\n\r\nSimplified, it works somewhat like this:\r\n\r\n```c\r\nuint8_t debounce_timer_armed;\r\n\r\nvoid gpio_interrupt(void *args) {\r\n    if (debounce_timer_armed) {\r\n        debounce_timer_armed = 0;\r\n    }\r\n    setup_timer_for_200ms();\r\n    debounce_timer_armed = 1;\r\n}\r\n\r\nvoid timer_interrupt(void *args) {\r\n    debounce_timer_armed = 0;\r\n    handle_gpio_state();\r\n}\r\n```\r\n\r\nThe full implementation can be found in [the firmware\'s ```main.c``` file](https://github.com/sgreg/smartplug/blob/master/firmware/user/main.c).\r\n\r\nOnce the GPIO state is successfully sent, ```GPIO2``` is set low, thus cutting its power supply by switching the MOSFET off. And to be on the safe side, a fallback timer is started to forcefully cut the power after 15 seconds in case the communication fails. That is mainly all there is.\r\n\r\nOf course, once the GPIO state is determined, the ESP8266 has to inform someone somewhere about it. Initially I just wanted the thing to tweet when it\'s plugged in and out, nothing else. Communicating directly with the Twitter API in the ESP firmware seemed a bit much though at that point, so I looked into third party alternatives. I discovered [ThingSpeak](https://thingspeak.com/) and figured that\'ll do. Not like I\'m actually going to use that smartplug for anything serious.\r\n\r\nBut yeah, eventually I changed my mind and didn\'t want to settle with that. But I already implemented the communication with ThingSpeak in the firmware, and I didn\'t want to discard it either. So I added a configuration option use either ThingSpeak as backend system, or use a self hosted backend system. Details on the configuration itself is described in the [firmware GitHub section](https://github.com/sgreg/smartplug/tree/master/firmware).\r\n\r\n## A Python backend\r\n\r\nSo.. yes. This comes also with a backend system. Once again, there\'s additional information [on GitHub](https://github.com/sgreg/smartplug/tree/master/backend).\r\n\r\nWell, \"backend system\" is maybe a bit exaggerated, it\'s just a little python script built around the [Bottle web framework](https://bottlepy.org/), [Autobahn WebSockets](http://autobahn.ws/python/) and [Mike Taylor\'s Python Twitter API wrapper](https://github.com/bear/python-twitter). So far I could refrain from adding persistent storage - and probably more importantly, from deploying it to the wild.\r\n\r\nNow, what it does, is running a web server through Bottle, doing basically nothing but accepting one type of POST request for JSON data containing a smartplug\'s identifier and its power plug state. Since there\'s only one, single compatible smartplug in this world, adding the identifier feels a bit pointless. But without it, I might as well send nothing but a single 0 or 1, and that just looked a bit sad. Plus, it\'s 2017, you can\'t just send small, efficient values.\r\n\r\nAnyway, other clients can connect to the system via WebSockets, and the backend will pass the received state on to those connected clients. Using the Twitter API wrapper is optional, but if enabled, it will additionally tweet the latest smartplug state.\r\n\r\nTime for a little testing. Either with the actual hardware, or for starters, with curl:\r\n\r\n```bash\r\ncurl -XPOST -v -H \"Content-type: application/json\" -d \'{\"id\": \"0xb00bf0cc\", \"value\": 0}\' http://localhost:9000/data\r\n```\r\n\r\nTo which the backend will print out something like this:\r\n\r\n![Running server backend screenshot](/images/smartplug-screenshot-backend.jpg \"Random console output of a running backend instance\")\r\n\r\nTo enable tweeting, some Twitter account needs to be linked to it and access tokens need to be generated for it and added to the Python script. Follow the [backend GitHub section](https://github.com/sgreg/smartplug/tree/master/backend#twitter) for further information.\r\n\r\nSo that\'s that. Now, the smartplug is ready to know when it\'s plugged in to and out of the power socket, notify the backend system, and tweet about it, if wanted.\r\n\r\n## But wait, there is more!\r\n\r\nPresenting [PlugBuddy](https://github.com/sgreg/smartplug/tree/master/PlugBuddy), the Android companion app.\r\n\r\nYeah, I know, this is getting ridiculous. Tell me about taking a joke too far. But hey, the backend has WebSockets for a reason, and you gotta have some app with that IoTness.\r\n\r\nNothing too wild happening here though. Again, [Autobahn WebSockets](http://autobahn.ws/android/) are used to listen for status changes sent by the Python backend. Other than that, an icon is showing the current state, and a system notification is displayed once the status changes.\r\n\r\nThe active app will look like this while having the plug unplugged..\r\n![PlugBuddy app with unplugged smartplug](/images/smartplug-app-unplugged-660.jpg)\r\n\r\n..and like this after plugging it into a socket.\r\n![PlugBuddy app with plugged in smartplug](/images/smartplug-app-plugged-660.jpg)\r\n\r\nAs for the notification, this is after plugging it in..\r\n![PlugBuddy notification with plugged in smartplug](/images/smartplug-notification-plugged-660.jpg)\r\n\r\n..and once it got unplugged again.\r\n![PlugBuddy notification with unplugged smartplug](/images/smartplug-notification-unplugged-660.jpg)\r\n\r\nTo make it easier to use, there\'s also a simple configuration dialog to set up the WebSocket server address and port, plus a specific smartplug identifier to listen to. Again, this is in a way pointless since this is a one of a kind thing at this point.\r\n\r\n## Conclusion\r\n\r\nYeah, this probably went too far to be a simple joke project, but I learned quite a few new things while refreshing some old knowledge. And while the system on the whole might have no real use, its single components (or parts of them) might.\r\n\r\n### Some side notes\r\n\r\nThe status change / notification is more or less real-time, but there\'s always going to be a delay. This is caused by the ESP8266 firmware, for example when plugging in the plug, it takes a moment to scan and connect the WiFi and receive an IP.\r\n\r\nAlso, obviously, all components, i.e. the ESP8266, the backend and the Android device, need to be in the same network to make this work. In theory this should work over the internet, but I wouldn\'t recommend that. Not like I believe anyone is actually going to rebuild this. If you do, oh please let me know, I\'d love to be your plug buddy.\r\n','<p>Ever wanted to get a notification when you plug in your favorite power plug?<br>\nLet your friends know about it, and tell the whole world along the way?</p>\n<p>Ever wished your favorite power plug would inform you about getting unplugged?<br>\nEver imagined someone could even have a <em>favorite</em> power plug?</p>\n<p>If you actually answered a \"yes\" somewhere along the way, well you\'re in for a treat, you magnificent visionary. All this - and so much more - is possible with the <em>utterly useless \"smart\" plug</em>.</p>\n<h2>What it is and does</h2>\n<p>Okay, so, this is actually a real thing. I built a power plug around an ESP8266 that will notice whenever you plug it in and out the power socket. The ESP8266 firmware can be compiled to either use a third party service (<a href=\"https://thingspeak.com/\">ThingSpeak</a>), or inform a homebrew backend about the plug state change. More on that later. First, a picture:</p>\n<p><img src=\"/images/smartplug-enclosure-660.jpg\" alt=\"Assembled power plug\" title=\"A wireless power plug. Literally.\"></p>\n<p>And to proof this is not just some power plug enclosure, here is what it looks like once you open it and take it a bit apart:</p>\n<p><img src=\"/images/smartplug-apart-660.jpg\" alt=\"Power plug opened\" title=\"ESP-01, battery with charger circuit and some other stuff\"></p>\n<p>What you see here is almost all there is to see:</p>\n<ul>\n<li>on the top, a small LiPo battery and a partially covered LiPo charging circuit</li>\n<li>in the center, an ESP-01 module and a 3.3V DC-DC regulator (mostly hidden under the ESP)</li>\n<li>on the bottom, all the rest (MOSFET as power supply switch, BJTs as logic switches and some resistors to accompany all that)</li>\n</ul>\n<p>Only thing not shown is the 230V to 5V switching power supply, connecting the LiPo battery charging circuit to the mains power. That one is hot glued to the back of the board, along with a wild mess of wires.</p>\n<p><img src=\"/images/smartplug-backside-660.jpg\" alt=\"Power plug opened from the backside\" title=\"230V power supply and artistically positioned ESP-01\"></p>\n<p>Before moving on, it\'s probably a good idea to refer to the <a href=\"https://github.com/sgreg/smartplug\">Smartplug\'s GitHub repository</a> where you\'ll also find <a href=\"https://github.com/sgreg/smartplug/blob/master/hardware/smartplug.pdf\">its schematic</a>.</p>\n<h2>The Hardware</h2>\n<p>So the plan is to have both states - plugged and unplugged - detected. The first one is easy, once it powers up, it must be plugged in. The latter part is a different story entirely. I could have built a system that pings the plug periodically to see if it\'s still answering - or have the plug send a heartbeat message. But that didn\'t seem right.</p>\n<p>I\'ve been looking for a reason to play around with LiPo batteries and their charging circuits for a while already, and this seemed like the perfect opportunity now. Once the main power is removed, the battery would (hopefully seamlessly) take over to keep the system up and running. A first check verified: yes, it does.</p>\n<p>Detecting the power supply removal was the next step, which means pretty much just connecting the 5V side of the switching power supply through a voltage divider to an ESP8266 GPIO and enable an interrupt on the pin. I went for a 2k2 and 3k3 resistor, resulting in theoretical 3.0V at the GPIO. That\'s high enough to be detected as logic one, and low enough to do no harm.</p>\n<p>Speaking of proper voltages, the ESP supply voltage should be between 3.0 and 3.6V, with 3.3V being a common value. However, the LiPo charging circuit and battery provide either the charging voltage (4.2V) or the battery\'s own output voltage. Regulating it with a LD1117 wouldn\'t work due to the regulator\'s 1V drop-out voltage. So I looked into DC-DC regulators and found one that regulates anything from 3.0-5.5V to 3.3V.</p>\n<p>But wait! How to power the whole system down now? Once the power supply removal is detected, the battery jumps in and even if the ESP8266 would power itself down somehow / go to sleep, the regulator wouldn\'t. This is not a satisfying solution, I\'d want it to completely shut down eventually.</p>\n<h3><em>Hello darkness, my old friend...</em></h3>\n<p>My mind got occupied with thoughts of suicide. Regarding the smartplug, of course.</p>\n<p>I needed some sort of kill switch that would cut the power between the battery and the DC-DC regulator. It quickly became clear, this is a different story than switching a LED on and off with a transistor, and I ended up in p-channel MOSFET territory and the concept of <a href=\"http://hackaday.com/2015/09/16/learn-and-build-a-high-side-switch/\">\"high side switching\"</a>. But before the MOSFET could kill anything, it first needs to make it alive.</p>\n<p>So, whenever the power supply is available (i.e. the plug is plugged in), it should switch the MOSFET (Q1 in <a href=\"https://github.com/sgreg/smartplug/blob/master/hardware/smartplug.pdf\">the schematic</a>) to connect the ESP to its supply voltage. Once powered on, the ESP should then use a GPIO pin to keep the gate voltage as needed to keep the MOSFET switched once the power supply is removed. After that, the ESP holds its own fate in its <del>hand</del> pin. This is practically a simple OR gate, which can be achieved using two simple NPN transistors.</p>\n<h3>Building an actual power plug</h3>\n<p>Up until now, everything was put together on a breadboard using a nice ESP8266 development board with lots of pins broken out. This was very convenient to have enough GPIOs to detect the supply voltage, switch the MOSFET, and keep the ESP\'s boot mode state detection pins unrelated to all of it. (ESP8266 can have different boot modes like loading the firmware from the flash memory or a UART connection)</p>\n<p><img src=\"/images/smartplug-breadboard-660.jpg\" alt=\"Smartplug on a breadboard\" title=\"Look at all the pins I have\"></p>\n<p>While that board is great for breadboarding, it gets a but inconvenient for the power plug case I got - both for space and pin assignment reasons. I also preferred to keep those boards available for future breadboard prototyping, and use an ESP-01 module instead (which doesn\'t really work too well on a breadboard and additionally has a much lower price tag).</p>\n<p>Hmm, well, the ESP-01 has only two GPIO pins available on its breakout headers, which are of course <code>GPIO0</code> and <code>GPIO2</code>, the pins the boot mode state is determined from.</p>\n<p>The good news is, these pins are only used when powering up the ESP, once the boot mode is determined and execution starts, the pins can be used as regular GPIO pins. And as mentioned before, two pins is all we need: one to detect the supply voltage, one to switch the MOSFET. But this means the hardware must be designed to ensure the correct default levels of those two GPIO pins during power up. I decided to program the ESP only externally and never inside this hardware arrangement, so I didn\'t have to worry about changing the boot modes. So it will always have the \"boot from flash\" mode, meaning both <code>GPIO0</code> and <code>GPIO2</code> must be high level on power up.</p>\n<p>So, <code>GPIO0</code> is used for main power supply detection, that means it\'s anyway high level when power is applied, so that\'s taken care of. For <code>GPIO2</code> I took one more NPN transistor (Q4 in <a href=\"https://github.com/sgreg/smartplug/blob/master/hardware/smartplug.pdf\">the schematic</a>) with</p>\n<ul>\n<li>Base connected to the main power supply</li>\n<li>Collector connected to the ESP supply voltage (i.e. the DC-DC regulator output)</li>\n<li>Emitter connected to <code>GPIO2</code></li>\n</ul>\n<p>Meaning, when powered up, the transistor will switch the ESP\'s supply voltage to its <code>GPIO2</code> pin, and both GPIO pins will have high level. All good this way.</p>\n<p>And that concludes the smartplug\'s hardware. For another summary, have a look at the <a href=\"https://github.com/sgreg/smartplug/tree/master/hardware\">hardware section on GitHub</a>. Now let\'s have the hardware actually do something.</p>\n<h2>ESP8266 firmware</h2>\n<p>There\'s not too much happening in <a href=\"https://github.com/sgreg/smartplug/tree/master/firmware\">the smartplug firmware</a>, it looks more complex than it actually is. Its main operation is</p>\n<ul>\n<li>Set <code>GPIO0</code> as input and set up its interrupt handler</li>\n<li>Set <code>GPIO2</code> as output</li>\n<li>Set up debounce timer for <code>GPIO0</code> (more on that in a moment)</li>\n<li>Set up WiFi</li>\n<li>Send \"plug plugged in\" state</li>\n</ul>\n<p>After that, it just waits for the interrupt from <code>GPIO0</code> when the plug gets unplugged and the power supply detection pin goes low. The signal will most likely bounce a bit though, causing more than one interrupt. So instead of handling the signal change right away, so just mentioned debounce timer is used to wait for the signal to settle.</p>\n<p>Every time the GPIO interrupt happens, the timer is reset (without executing its own handler) and restarted for 200ms. To reset the timer on any signal transition, the interrupt itself is set up for both rising and falling edge.</p>\n<p>Once the timer actually does expire and triggers its own interrupt handler, it can be assumed the signal is not bouncing anymore (since there was no GPIO change that would have reset the timer), and the level on the pin is reliable.</p>\n<p>Simplified, it works somewhat like this:</p>\n<pre class=\"lang-c line-numbers\"><code>uint8_t debounce_timer_armed;\n\nvoid gpio_interrupt(void *args) {\n    if (debounce_timer_armed) {\n        debounce_timer_armed = 0;\n    }\n    setup_timer_for_200ms();\n    debounce_timer_armed = 1;\n}\n\nvoid timer_interrupt(void *args) {\n    debounce_timer_armed = 0;\n    handle_gpio_state();\n}\n</code></pre>\n<p>The full implementation can be found in <a href=\"https://github.com/sgreg/smartplug/blob/master/firmware/user/main.c\">the firmware\'s <code>main.c</code> file</a>.</p>\n<p>Once the GPIO state is successfully sent, <code>GPIO2</code> is set low, thus cutting its power supply by switching the MOSFET off. And to be on the safe side, a fallback timer is started to forcefully cut the power after 15 seconds in case the communication fails. That is mainly all there is.</p>\n<p>Of course, once the GPIO state is determined, the ESP8266 has to inform someone somewhere about it. Initially I just wanted the thing to tweet when it\'s plugged in and out, nothing else. Communicating directly with the Twitter API in the ESP firmware seemed a bit much though at that point, so I looked into third party alternatives. I discovered <a href=\"https://thingspeak.com/\">ThingSpeak</a> and figured that\'ll do. Not like I\'m actually going to use that smartplug for anything serious.</p>\n<p>But yeah, eventually I changed my mind and didn\'t want to settle with that. But I already implemented the communication with ThingSpeak in the firmware, and I didn\'t want to discard it either. So I added a configuration option use either ThingSpeak as backend system, or use a self hosted backend system. Details on the configuration itself is described in the <a href=\"https://github.com/sgreg/smartplug/tree/master/firmware\">firmware GitHub section</a>.</p>\n<h2>A Python backend</h2>\n<p>So.. yes. This comes also with a backend system. Once again, there\'s additional information <a href=\"https://github.com/sgreg/smartplug/tree/master/backend\">on GitHub</a>.</p>\n<p>Well, \"backend system\" is maybe a bit exaggerated, it\'s just a little python script built around the <a href=\"https://bottlepy.org/\">Bottle web framework</a>, <a href=\"http://autobahn.ws/python/\">Autobahn WebSockets</a> and <a href=\"https://github.com/bear/python-twitter\">Mike Taylor\'s Python Twitter API wrapper</a>. So far I could refrain from adding persistent storage - and probably more importantly, from deploying it to the wild.</p>\n<p>Now, what it does, is running a web server through Bottle, doing basically nothing but accepting one type of POST request for JSON data containing a smartplug\'s identifier and its power plug state. Since there\'s only one, single compatible smartplug in this world, adding the identifier feels a bit pointless. But without it, I might as well send nothing but a single 0 or 1, and that just looked a bit sad. Plus, it\'s 2017, you can\'t just send small, efficient values.</p>\n<p>Anyway, other clients can connect to the system via WebSockets, and the backend will pass the received state on to those connected clients. Using the Twitter API wrapper is optional, but if enabled, it will additionally tweet the latest smartplug state.</p>\n<p>Time for a little testing. Either with the actual hardware, or for starters, with curl:</p>\n<pre class=\"lang-bash line-numbers\"><code>curl -XPOST -v -H &quot;Content-type: application/json&quot; -d &#39;{&quot;id&quot;: &quot;0xb00bf0cc&quot;, &quot;value&quot;: 0}&#39; http://localhost:9000/data\n</code></pre>\n<p>To which the backend will print out something like this:</p>\n<p><img src=\"/images/smartplug-screenshot-backend.jpg\" alt=\"Running server backend screenshot\" title=\"Random console output of a running backend instance\"></p>\n<p>To enable tweeting, some Twitter account needs to be linked to it and access tokens need to be generated for it and added to the Python script. Follow the <a href=\"https://github.com/sgreg/smartplug/tree/master/backend#twitter\">backend GitHub section</a> for further information.</p>\n<p>So that\'s that. Now, the smartplug is ready to know when it\'s plugged in to and out of the power socket, notify the backend system, and tweet about it, if wanted.</p>\n<h2>But wait, there is more!</h2>\n<p>Presenting <a href=\"https://github.com/sgreg/smartplug/tree/master/PlugBuddy\">PlugBuddy</a>, the Android companion app.</p>\n<p>Yeah, I know, this is getting ridiculous. Tell me about taking a joke too far. But hey, the backend has WebSockets for a reason, and you gotta have some app with that IoTness.</p>\n<p>Nothing too wild happening here though. Again, <a href=\"http://autobahn.ws/android/\">Autobahn WebSockets</a> are used to listen for status changes sent by the Python backend. Other than that, an icon is showing the current state, and a system notification is displayed once the status changes.</p>\n<p>The active app will look like this while having the plug unplugged..\n<img src=\"/images/smartplug-app-unplugged-660.jpg\" alt=\"PlugBuddy app with unplugged smartplug\"></p>\n<p>..and like this after plugging it into a socket.\n<img src=\"/images/smartplug-app-plugged-660.jpg\" alt=\"PlugBuddy app with plugged in smartplug\"></p>\n<p>As for the notification, this is after plugging it in..\n<img src=\"/images/smartplug-notification-plugged-660.jpg\" alt=\"PlugBuddy notification with plugged in smartplug\"></p>\n<p>..and once it got unplugged again.\n<img src=\"/images/smartplug-notification-unplugged-660.jpg\" alt=\"PlugBuddy notification with unplugged smartplug\"></p>\n<p>To make it easier to use, there\'s also a simple configuration dialog to set up the WebSocket server address and port, plus a specific smartplug identifier to listen to. Again, this is in a way pointless since this is a one of a kind thing at this point.</p>\n<h2>Conclusion</h2>\n<p>Yeah, this probably went too far to be a simple joke project, but I learned quite a few new things while refreshing some old knowledge. And while the system on the whole might have no real use, its single components (or parts of them) might.</p>\n<h3>Some side notes</h3>\n<p>The status change / notification is more or less real-time, but there\'s always going to be a delay. This is caused by the ESP8266 firmware, for example when plugging in the plug, it takes a moment to scan and connect the WiFi and receive an IP.</p>\n<p>Also, obviously, all components, i.e. the ESP8266, the backend and the Android device, need to be in the same network to make this work. In theory this should work over the internet, but I wouldn\'t recommend that. Not like I believe anyone is actually going to rebuild this. If you do, oh please let me know, I\'d love to be your plug buddy.</p>\n','2017-04-02 19:07:15',1,1),(6,'XBM images and animations on a Nokia LCD','xbm-images-and-animations-on-a-nokia-lcd','Display images and simple animations on a low-cost Nokia 5110 / 3310 LCD by generating raw display memory data straight from XBM files with a little help from gcc and Bash.','nokia5110.jpg','([Instant link to Github repository](https://github.com/sgreg/xbm2nokia))\r\n\r\nEverything basically started with planning a new PCB revision for [my 4chord MIDI project](../../projects/4chord-midi). The version of the Nokia LCD [I\'ve been using so far](https://www.olimex.com/Products/Components/LCD/LCD-DISPLAY-NOKIA3310/) had a few shortcomings that wouldn\'t fit my ideas for the new revision. Mainly, the flat flex cable connection came with too many design limitations, including adding a back light (see [4chord MIDI\'s roadmap](../../projects/4chord-midi/status)).\r\n\r\nSo I was on the lookout for alternative versions of this display, probably trying every choice there is out there along the way, and eventually settled on the breakout board style one. You\'ll find them from [Sparkfun](https://www.sparkfun.com/products/10168), [Adafruit](https://www.adafruit.com/product/338) and, well, China. \r\n\r\n## The Nokia 5110 LCD breakout board\r\n\r\nI very much liked how the LCD is just clipped into the PCB, and connected straight to the copper via some adapter touching the PCB and the inside of the LCD. Even better, some LEDs soldered next to it took care of the back light part (admittedly, the diffused back light available for the Olimex 3310 LCD had a nicer, final touch, but what can you do).\r\n\r\nSo far so good, but how to actually use it in my own PCB? I couldn\'t find any design or Gerber files of the breakout board in the wilds of the internet, but also didn\'t care enough to contact anyone about that. Instead, I decided the most satisfying solution for myself will be to just create a KiCad component myself, [and so I did](https://github.com/sgreg/kicad-libs) (basic \"reverse engineering\" the breakout board was straight-forward with a caliper and multimeter, but to get understanding in more detail, I found useful additional information about the display and its different types from [the serdisplib project](http://serdisplib.sourceforge.net/ser/pcd8544.html)).\r\n\r\n![Nokia LCD KiCad component 3D view](/images/nokia5110-kicad-component.jpg \"Nokia LCD KiCad component in 3D view with OSH Park coloring\")\r\n\r\nBased on that KiCad component, I created a simple breakout board and sent it off to OSH Park. Since it usually takes around two weeks until the PCBs end up in Finland, I thought I could refresh my memory about controlling the LCD in the meantime.\r\n\r\n## Displaying images the old way\r\n\r\nHaving a look at the LCD handling code I wrote some time ago, and the accompanying shell scripts that should make life easier ..it quickly became obvious, there\'s a lot of room for improvement. The main reason is probably the LCD\'s TLS8204 driver\'s memory arrangement, which is very convenient for displaying 8px high text, but not so much for displaying everything else.\r\n\r\nGenerally, to display images on the LCD, the [XBM image format](https://en.wikipedia.org/wiki/X_BitMap) seems perfect. It\'s basically C code representing all the black and white pixels in a char array. But those pixel arrangements are nowhere near to be used as-is with the Nokia LCDs. It would require the original image to be rotated 90 degrees counter-clockwise, and flipped vertically afterwards. The resulting XBM image would then need to be re-arranged row and column wise to finally match the memory layout. \r\n\r\nI mostly use GIMP to create images for the LCD, so I\'d just rotate and flip them as part of the creation process within GIMP. Using ImageMagick and run `convert -transpose` on the image will work, too. The memory re-arrangement was done with a shell script wrapper that would parse the transposed XBM image into a C code template and compile a binary, which eventually outputs a char array that can be dumped directly into the LCD driver\'s memory.\r\n\r\n## Finding an ~~easier~~ alternative way\r\n\r\nThe fact that an XBM image is just C code and reading it in is a simple `#include`, made me insist on keeping the actual processing in C. Maybe a future version will use Python. This does seem like a prime job to (finally) get more acquainted with NumPy.\r\n\r\nBut yeah, since it will require to include the XBM source directly into the C source, code, the actual processing will still require some parsing, code generation and compilation to output the raw image data. The previous concept to wrap it all into a shell script and generate a single .c and .h file from it, did actually work quite nicely. I mainly wanted to get rid of the separated rotate and flip transformation and do that directly on the fly inside the processing C code. Time to flip around the bits on paper.\r\n\r\n![Pen and paper planning](/images/nokia5110-paper-planning.jpg \"These kind of things usually end up on some half eaten envelope\")\r\n\r\nAs you can see, tears and sweat made the papers all wrinkly.. (using them as coasters might have had some effect on that, too). Having it written down and visualized helped making it clear what had to be done, and the initial proof of concept implementation verified that I was on the right track.\r\n\r\n### ..and then some.\r\n\r\nGetting to know each bit in the process, and understanding how they travel from the initial pixel drawn in GIMP to the LCD driver\'s memory location, sparked some more ideas. Sure, displaying images on the LCD - either some full screen images or partial images later on as part of a GUI (once again, [the 4chord MIDI project](../../projects/4chord-midi) appears for reference) is fun and useful, but how about some animation?\r\n\r\nSure, each frame could be just transformed into a full screen image and then replaced every some milliseconds, but that would mean extra storage of 504 bytes for each frame (84x48 pixel resolution being stored in 84 single byte wide rows and six byte high columns). Storing instead only the changes between each frame can significantly decrease the required program memory. Well, to a certain extend, at some point it might be the complete opposite.\r\n\r\nSo instead of simply taking one single XBM image, rotate and flip it, and re-arrange it for the LCD memory, the same needs to be done for two individual images, followed by a byte by byte comparison. The generated code is then simply a combination of \"memory address\" and the address\' new value. Since there are 504 bytes used with the LCD, a struct with a 16bit address and a 8bit value is needed for each single pixel change happening within a frame transition\r\n\r\n```c\r\nstruct frame_diff {\r\n    uint16_t addr;\r\n    uint8_t data;\r\n};\r\n\r\nstruct frame_transition {\r\n     uint16_t diffcnt;\r\n     struct frame_diff diffs[];\r\n};\r\n```\r\n\r\nThis means, any pixel change between two frames will require 3 instead of one 1 byte. Hence, if less than one third of the pixels are different from one frame to the other, this will be a more efficient storage solution. But if more change, this is unfortunately a bad solution.\r\n\r\nSome additional logic could help to sort this out, and actually just use the image data as-is if the threshold is crossed. Also, splitting the screen into an upper and lower part and store them separately would mean, the `addr` part inside the `frame_diff` struct could be stored in a one byte `uint8_t` variable, which in best case will further decrease the required program memory. Neither of this is however implemented at the moment of this writing. But it\'s a consideration for future use, if the current implementation will cause some real-world problems.\r\n\r\n## Wrapping it together\r\n\r\nRegardless of these known potential flaws, I was happy enough with the general concept to move on and automatize the code generation. If really necessary, I could always just do some manual adjustments.\r\n\r\n![Nokia LCD breakout boards from OSH Park](/images/nokia5110-pcbs.jpg \"The PCBs have arrived in the meantime from OSH Park, and, yay, they work\")\r\n\r\nSince the main parts of the LCD data generation is the same for single images and animations, I decided the code generation should be handled by one single script that takes a list of .xbm files as parameter and offers two options:\r\n1. generate individual char array data for each given XBM file\r\n1. generate an animation by using the first XBM file as key frame, and generate frame diff data for each other frame - looping back to the first one.\r\n\r\nAlso, the C part should be use the same code for each option, separating the specific parts with some preprocessor defines. Unlike the previous implementation, where everything was one template file that got parsed to include the XBM code itself, this implementation will only have to generate a header file.\r\n\r\nSo to achieve the two options - individual set of graphics, and animation built from a set of graphics, three different header file templates will have the specific preprocessor defines set up, and parsing the original XBM file(s) into it will generate code for either of:\r\n* char array `nokia_gfx_filename` for an individual image\r\n* char array code the animation key frame (practically the same as before, except the variable name is always `nokia_gfx_keyframe` instead of constructed from the image\'s file name)\r\n* frame diff struct code between two given files\r\n\r\nEach code simply outputs the image data variable declaration on stderr, and the image data itself on stout. The shell script wrapping it all together is then redirecting them to a header and source file respectively.\r\n\r\nFor everything else from here on, it\'s probably best to just have a look at [the code and its example](https://github.com/sgreg/xbm2nokia). But yeah, let\'s have a little animation here:\r\n\r\n![Crappy face with wobbling eyes animation](/images/nokia5110-crappyface.gif \"Created from 9 XBM files, included in the code example\")\r\n\r\nThis is the graphically very elaborate example that I\'ve dumped along with [the code on GitHub](https://github.com/sgreg/xbm2nokia/tree/master/example). If used as single images animation, the total code size is **5054 bytes**. With the frame diff style animation, the exact same animation could be decreased to **2210 bytes** without any additional tweaking.\r\n\r\nNote, the ghosting you can see in the animation is mostly caused by my sad attempts to video-to-gif conversion, in reality the effect is a lot more subtle.\r\n\r\n## Some final words on creating XBM images\r\n\r\nXBM images are binary bitmaps, so a pixel is either black and therefore on (bit value 1 in C code) or white and therefore off (0 in C code). This is ideal for monochromatic LCDs like the Nokia 5110/3310, and is good enough for text and some simple user interface. But actual images are rarely just black and white. Even black and white pictures are usually grayscale images.\r\n\r\nYou can basically convert any random image file (JPG, PNG, whatever) to XBM with ImageMagick or GIMP (and probably a lot other tools), just make sure it\'s scaled to fit the display\'s 84x48 resolution. However, to get decent results, you\'ll probably want to fiddle with the colors.\r\n\r\nFirst off, desaturate it to get a grayscale image (Colors->Desaturate... in GIMP), play with the color levels, contrasts etc., and ultimately set the threshold (Colors->Thresholds... in GIMP) to select what will be black and what will be white. Without setting the threshold levels, GIMP will use the defaults when writing the XBM file.\r\n\r\nAlso, when adding text to the image, I\'d recommend to disable anti-aliasing (there\'s a checkbox for that in the Font tool settings in GIMP).','<p>(<a href=\"https://github.com/sgreg/xbm2nokia\">Instant link to Github repository</a>)</p>\n<p>Everything basically started with planning a new PCB revision for <a href=\"../../projects/4chord-midi\">my 4chord MIDI project</a>. The version of the Nokia LCD <a href=\"https://www.olimex.com/Products/Components/LCD/LCD-DISPLAY-NOKIA3310/\">I\'ve been using so far</a> had a few shortcomings that wouldn\'t fit my ideas for the new revision. Mainly, the flat flex cable connection came with too many design limitations, including adding a back light (see <a href=\"../../projects/4chord-midi/status\">4chord MIDI\'s roadmap</a>).</p>\n<p>So I was on the lookout for alternative versions of this display, probably trying every choice there is out there along the way, and eventually settled on the breakout board style one. You\'ll find them from <a href=\"https://www.sparkfun.com/products/10168\">Sparkfun</a>, <a href=\"https://www.adafruit.com/product/338\">Adafruit</a> and, well, China.</p>\n<h2>The Nokia 5110 LCD breakout board</h2>\n<p>I very much liked how the LCD is just clipped into the PCB, and connected straight to the copper via some adapter touching the PCB and the inside of the LCD. Even better, some LEDs soldered next to it took care of the back light part (admittedly, the diffused back light available for the Olimex 3310 LCD had a nicer, final touch, but what can you do).</p>\n<p>So far so good, but how to actually use it in my own PCB? I couldn\'t find any design or Gerber files of the breakout board in the wilds of the internet, but also didn\'t care enough to contact anyone about that. Instead, I decided the most satisfying solution for myself will be to just create a KiCad component myself, <a href=\"https://github.com/sgreg/kicad-libs\">and so I did</a> (basic \"reverse engineering\" the breakout board was straight-forward with a caliper and multimeter, but to get understanding in more detail, I found useful additional information about the display and its different types from <a href=\"http://serdisplib.sourceforge.net/ser/pcd8544.html\">the serdisplib project</a>).</p>\n<p><img src=\"/images/nokia5110-kicad-component.jpg\" alt=\"Nokia LCD KiCad component 3D view\" title=\"Nokia LCD KiCad component in 3D view with OSH Park coloring\"></p>\n<p>Based on that KiCad component, I created a simple breakout board and sent it off to OSH Park. Since it usually takes around two weeks until the PCBs end up in Finland, I thought I could refresh my memory about controlling the LCD in the meantime.</p>\n<h2>Displaying images the old way</h2>\n<p>Having a look at the LCD handling code I wrote some time ago, and the accompanying shell scripts that should make life easier ..it quickly became obvious, there\'s a lot of room for improvement. The main reason is probably the LCD\'s TLS8204 driver\'s memory arrangement, which is very convenient for displaying 8px high text, but not so much for displaying everything else.</p>\n<p>Generally, to display images on the LCD, the <a href=\"https://en.wikipedia.org/wiki/X_BitMap\">XBM image format</a> seems perfect. It\'s basically C code representing all the black and white pixels in a char array. But those pixel arrangements are nowhere near to be used as-is with the Nokia LCDs. It would require the original image to be rotated 90 degrees counter-clockwise, and flipped vertically afterwards. The resulting XBM image would then need to be re-arranged row and column wise to finally match the memory layout.</p>\n<p>I mostly use GIMP to create images for the LCD, so I\'d just rotate and flip them as part of the creation process within GIMP. Using ImageMagick and run <code>convert -transpose</code> on the image will work, too. The memory re-arrangement was done with a shell script wrapper that would parse the transposed XBM image into a C code template and compile a binary, which eventually outputs a char array that can be dumped directly into the LCD driver\'s memory.</p>\n<h2>Finding an <del>easier</del> alternative way</h2>\n<p>The fact that an XBM image is just C code and reading it in is a simple <code>#include</code>, made me insist on keeping the actual processing in C. Maybe a future version will use Python. This does seem like a prime job to (finally) get more acquainted with NumPy.</p>\n<p>But yeah, since it will require to include the XBM source directly into the C source, code, the actual processing will still require some parsing, code generation and compilation to output the raw image data. The previous concept to wrap it all into a shell script and generate a single .c and .h file from it, did actually work quite nicely. I mainly wanted to get rid of the separated rotate and flip transformation and do that directly on the fly inside the processing C code. Time to flip around the bits on paper.</p>\n<p><img src=\"/images/nokia5110-paper-planning.jpg\" alt=\"Pen and paper planning\" title=\"These kind of things usually end up on some half eaten envelope\"></p>\n<p>As you can see, tears and sweat made the papers all wrinkly.. (using them as coasters might have had some effect on that, too). Having it written down and visualized helped making it clear what had to be done, and the initial proof of concept implementation verified that I was on the right track.</p>\n<h3>..and then some.</h3>\n<p>Getting to know each bit in the process, and understanding how they travel from the initial pixel drawn in GIMP to the LCD driver\'s memory location, sparked some more ideas. Sure, displaying images on the LCD - either some full screen images or partial images later on as part of a GUI (once again, <a href=\"../../projects/4chord-midi\">the 4chord MIDI project</a> appears for reference) is fun and useful, but how about some animation?</p>\n<p>Sure, each frame could be just transformed into a full screen image and then replaced every some milliseconds, but that would mean extra storage of 504 bytes for each frame (84x48 pixel resolution being stored in 84 single byte wide rows and six byte high columns). Storing instead only the changes between each frame can significantly decrease the required program memory. Well, to a certain extend, at some point it might be the complete opposite.</p>\n<p>So instead of simply taking one single XBM image, rotate and flip it, and re-arrange it for the LCD memory, the same needs to be done for two individual images, followed by a byte by byte comparison. The generated code is then simply a combination of \"memory address\" and the address\' new value. Since there are 504 bytes used with the LCD, a struct with a 16bit address and a 8bit value is needed for each single pixel change happening within a frame transition</p>\n<pre class=\"lang-c line-numbers\"><code>struct frame_diff {\n    uint16_t addr;\n    uint8_t data;\n};\n\nstruct frame_transition {\n     uint16_t diffcnt;\n     struct frame_diff diffs[];\n};\n</code></pre>\n<p>This means, any pixel change between two frames will require 3 instead of one 1 byte. Hence, if less than one third of the pixels are different from one frame to the other, this will be a more efficient storage solution. But if more change, this is unfortunately a bad solution.</p>\n<p>Some additional logic could help to sort this out, and actually just use the image data as-is if the threshold is crossed. Also, splitting the screen into an upper and lower part and store them separately would mean, the <code>addr</code> part inside the <code>frame_diff</code> struct could be stored in a one byte <code>uint8_t</code> variable, which in best case will further decrease the required program memory. Neither of this is however implemented at the moment of this writing. But it\'s a consideration for future use, if the current implementation will cause some real-world problems.</p>\n<h2>Wrapping it together</h2>\n<p>Regardless of these known potential flaws, I was happy enough with the general concept to move on and automatize the code generation. If really necessary, I could always just do some manual adjustments.</p>\n<p><img src=\"/images/nokia5110-pcbs.jpg\" alt=\"Nokia LCD breakout boards from OSH Park\" title=\"The PCBs have arrived in the meantime from OSH Park, and, yay, they work\"></p>\n<p>Since the main parts of the LCD data generation is the same for single images and animations, I decided the code generation should be handled by one single script that takes a list of .xbm files as parameter and offers two options:</p>\n<ol>\n<li>generate individual char array data for each given XBM file</li>\n<li>generate an animation by using the first XBM file as key frame, and generate frame diff data for each other frame - looping back to the first one.</li>\n</ol>\n<p>Also, the C part should be use the same code for each option, separating the specific parts with some preprocessor defines. Unlike the previous implementation, where everything was one template file that got parsed to include the XBM code itself, this implementation will only have to generate a header file.</p>\n<p>So to achieve the two options - individual set of graphics, and animation built from a set of graphics, three different header file templates will have the specific preprocessor defines set up, and parsing the original XBM file(s) into it will generate code for either of:</p>\n<ul>\n<li>char array <code>nokia_gfx_filename</code> for an individual image</li>\n<li>char array code the animation key frame (practically the same as before, except the variable name is always <code>nokia_gfx_keyframe</code> instead of constructed from the image\'s file name)</li>\n<li>frame diff struct code between two given files</li>\n</ul>\n<p>Each code simply outputs the image data variable declaration on stderr, and the image data itself on stout. The shell script wrapping it all together is then redirecting them to a header and source file respectively.</p>\n<p>For everything else from here on, it\'s probably best to just have a look at <a href=\"https://github.com/sgreg/xbm2nokia\">the code and its example</a>. But yeah, let\'s have a little animation here:</p>\n<p><img src=\"/images/nokia5110-crappyface.gif\" alt=\"Crappy face with wobbling eyes animation\" title=\"Created from 9 XBM files, included in the code example\"></p>\n<p>This is the graphically very elaborate example that I\'ve dumped along with <a href=\"https://github.com/sgreg/xbm2nokia/tree/master/example\">the code on GitHub</a>. If used as single images animation, the total code size is <strong>5054 bytes</strong>. With the frame diff style animation, the exact same animation could be decreased to <strong>2210 bytes</strong> without any additional tweaking.</p>\n<p>Note, the ghosting you can see in the animation is mostly caused by my sad attempts to video-to-gif conversion, in reality the effect is a lot more subtle.</p>\n<h2>Some final words on creating XBM images</h2>\n<p>XBM images are binary bitmaps, so a pixel is either black and therefore on (bit value 1 in C code) or white and therefore off (0 in C code). This is ideal for monochromatic LCDs like the Nokia 5110/3310, and is good enough for text and some simple user interface. But actual images are rarely just black and white. Even black and white pictures are usually grayscale images.</p>\n<p>You can basically convert any random image file (JPG, PNG, whatever) to XBM with ImageMagick or GIMP (and probably a lot other tools), just make sure it\'s scaled to fit the display\'s 84x48 resolution. However, to get decent results, you\'ll probably want to fiddle with the colors.</p>\n<p>First off, desaturate it to get a grayscale image (Colors-&gt;Desaturate... in GIMP), play with the color levels, contrasts etc., and ultimately set the threshold (Colors-&gt;Thresholds... in GIMP) to select what will be black and what will be white. Without setting the threshold levels, GIMP will use the defaults when writing the XBM file.</p>\n<p>Also, when adding text to the image, I\'d recommend to disable anti-aliasing (there\'s a checkbox for that in the Font tool settings in GIMP).</p>\n','2017-05-07 21:44:52',1,1),(7,'Code optimization for XBM images on Nokia LCD','code-optimization-for-xbm-images-on-nokia-lcd','Continuing with XBM images and animations on the Nokia 5110 / 3310 LCD, this time going more into the code itself and looking into optimization possibilities for the original example.','nokia5110-two-displays.jpg','My [previous entry about the Nokia 5110/3310 LCD](xbm-images-and-animations-on-a-nokia-lcd) was more a storytelling session than going into the technical parts or the source code. Well, speaking of source code, [the Github repository](https://github.com/sgreg/xbm2nokia) does cover the main usage concepts, but I still wanted to add a few paragraphs here now.\r\n\r\nAfter finishing the initial proof of concept and dumping the example code on Github, I had another look and tried to see what parts could be optimized. After all, the very core idea was to reduce the program memory size to display XBM image based animations, so why stop here yet.\r\n\r\nI was curious to see if I could fit the crappy-face-with-wobbling-eyes example animation into an AVR chip with only 2kB of flash memory, like an 8pin ATtiny25. That, however, will require one crucial adjustment regardless of program memory.\r\n\r\n## Cutting down on RAM usage\r\n\r\nThe original example was targeted for an ATmega328 with 32kB program memory and 2kB RAM. So if this goal succeeds, the whole example would fit into the RAM alone - which makes no sense in practice, and it doesn\'t work that way, but just to put in perspective. Especially putting in perspective what a spoiled fat cat these amounts of resources can make you.\r\n\r\nSticking with the ATtiny25 as example target, the available RAM amount drops to a sad 128 bytes. That amount couldn\'t even store a full-length tweet, let alone the full display memory content. In fact, this is how far 128 byte display memory would get us:\r\n\r\n![Nokia LCD showing 128 byte content](/images/nokia5110-128bytes.jpg \"System bias got adjusted to show a bit more contrast\")\r\n\r\nNot to mention that filling up all the RAM like that would mean that there\'s no space left to have a stack. Kiss your local variables and functions altogether goodbye right here and now.\r\n\r\nLong story short, the LCD memory content can\'t be stored inside the code with that little RAM (and shouldn\'t be stored there either with just slightly more RAM than data, i.e. 512 bytes RAM, due to stack growth). Luckily that step isn\'t really necessary, and the LCD memory can to be updated by reading the image data directly from the program memory and sending it straight to the LCD.\r\n\r\nSo let\'s take the example\'s initial implementation that keeps the LCD memory in RAM, copies the given data into that and then sends the whole thing to the LCD via SPI:\r\n\r\n```c\r\n/* internal LCD memory buffer */\r\nunsigned char nokia_lcd_memory[LCD_MEMORY_SIZE];\r\n\r\nvoid nokia_lcd_fullscreen(const uint8_t data[])\r\n{   \r\n    memcpy_P(nokia_lcd_memory, (PGM_P) data, 504);\r\n    nokia_lcd_update();\r\n}\r\n\r\nstatic void nokia_lcd_update(void)\r\n{   \r\n    uint8_t x;\r\n    uint8_t y;\r\n                   \r\n    for (y = 0; y < LCD_Y_RES / 8; y++) {\r\n        spi_send_command(0x80);     // set X addr to 0x00\r\n        spi_send_command(0x40 | y); // set Y addr to y\r\n        for (x = 0; x < LCD_X_RES; x++) {\r\n            spi_send_data(nokia_lcd_memory[y * LCD_X_RES + x]); // send data\r\n        }\r\n    }   \r\n}\r\n```\r\n\r\nNow let\'s get rid of all the `nokia_lcd_memory` related parts, which in the end will be simply one function directly sending the given image data to the LCD:\r\n\r\n```c\r\nvoid nokia_lcd_fullscreen(const uint8_t data[])\r\n{   \r\n    uint8_t x;\r\n    uint8_t y;\r\n                   \r\n    for (y = 0; y < LCD_Y_RES / 8; y++) {\r\n        spi_send_command(0x80);     // set X addr to 0x00\r\n        spi_send_command(0x40 | y); // set Y addr to y\r\n        for (x = 0; x < LCD_X_RES; x++) {\r\n            /* read data straight from PROGMEM variable and send it */\r\n            spi_send_data(pgm_read_byte(&(data[y * LCD_X_RES + x])));\r\n        }\r\n    }   \r\n}\r\n```\r\n\r\nThe `nokia_lcd_memory` char array  is however also used within the frame diff update functions for animations. I\'ll come back to that later. For now, we\'ll be using full screen animations, i.e. call `./xbm2nokia.sh -g`. Yeah, this is completely counterproductive as it will more than double the program memory size, but bear with me.\r\n\r\n## ELF binary sections and sizes\r\n\r\nAssuming full screen animations were created from all 9 frames x1.xbm-x9.xbm, the `avr-size` command will reveal the differences:\r\n\r\n```bash\r\n$ avr-size v?/example.elf\r\n   text    data     bss     dec     hex filename\r\n   5054       0     523    5577    15c9 v1/example.elf\r\n   5038       0      19    5057    13c1 v2/example.elf\r\n```\r\n\r\nA few words on what each section means:\r\n* `text` stores the actual compiled program code\r\n* `data` stores all initial values for global variables that aren\'t zero\r\n* `bss` defines the size of all global variables that are uninitialized or initialized with zero\r\n* `dec` is the total size of the executable including `text`, `data` and `bss`\r\n* `hex` is the same as `dec`, just as hexadecimal value\r\n\r\nAs we can see, the `bss` size decreased drastically, by 504 bytes, the size of the internal LCD memory buffer. If you\'re wondering why `data` and `bss` are separated, it\'s because the `bss` section won\'t actually make it into the final Hex file that is flashed to the microcontroller. The C runtime library will - among other things - take care that the RAM is properly initialized before calling `main()`, by copying `data` content to it, and zeroing everything in the `bss` section. So only the location and size of that zero-initialized memory section needs to be known.\r\n\r\nTo verify that the `bss` won\'t be flashed, have a look at at the final Hex file created from the ELF file, which will be flashed in the microntrollers program memory. If you know about the Intel Hex file format itself, you might be able to just look at the file, alternatively, `avr-size` works here as well:\r\n\r\n```bash\r\n$ avr-size v?/example.hex\r\n   text    data     bss     dec     hex filename\r\n      0    5054       0    5054    13be v1/example.hex\r\n      0    5038       0    5038    13ae v2/example.hex\r\n```\r\n\r\nWell, it\'s not an ELF file, so everything is shown as `data` section content, but it\'s still good enough to see, that these numbers are both times exactly the same as the ELF file\'s `text` section was. Since there is nothing stored in the `data` section, this adds up. If you have doubt, just add some `int abcd=123;` as global variable and see how to resulting 2 bytes in the `data` section (since int is 16 bit in AVR) add up accordingly.\r\n\r\nBut regardless of being part of the to-be-flashed Hex file or not, it will be part of the size that is required in them RAM.\r\n\r\n## Coming back to animations\r\n\r\nWell, as we can see from the `avr-size` output, eliminating the code that copies the image data into the internal buffer saved us a whooping 16 bytes in program memory. Too bad that\'s going to change.\r\n\r\nAs I mentioned before, the functions that handle the frame diffs for animations still use the `nokia_lcd_memory` buffer. There are actually two different implementations of this functionality: one that sends the full buffer content via SPI after updating all its content based on the frame diff, and one that sends the new display data to the display while it is processing the diff data and updating the internal buffer.\r\n\r\nGetting rid of the internal buffer will leave us with option two as only choice. This however will require additional address calculations that will increase the program size but around 160 bytes. \r\n\r\nThis way, we also won\'t need separation between those two choices any longer, and everything related to the `NOKIA_GFX_ANIMATION_FULL_UPDATE` preprocessor defines can be removed from both `nokia_lcd.h` and `nokia_lcd.c` and all that will be left is:\r\n```c\r\nvoid\r\nnokia_lcd_update_diff(const struct nokia_gfx_frame *frame)\r\n{\r\n    uint16_t i;\r\n...\r\n        diff.data = pgm_read_byte(&(frame->diffs[i].data));\r\n        /* nokia_lcd_memory[diff.addr] = diff.data; */\r\n...\r\n}\r\n```\r\n\r\nOkay, time to recreate the image data for animations and recompile\r\n```txt\r\n/path/to/example$ ../xbm2nokia -a x?.xbm\r\n/path/to/example$ cd v1\r\n/path/to/example/v1$ make distclean\r\n/path/to/example/v1$ make\r\n/path/to/example$ cd ../v2\r\n/path/to/example/v2$ make distclean\r\n/path/to/example/v2$ make\r\n/path/to/example/v2$ cd ..\r\n/path/to/example$ avr-size v?/example.elf\r\n   text    data     bss     dec     hex filename\r\n   2210       0     523    2733     aad v1/example.elf\r\n   2352       0      19    2371     943 v2/example.elf\r\n/path/to/example$\r\n```\r\n\r\nSo, we got rid of 504 bytes RAM and gained 142 bytes program memory. This sucks, but if RAM is scarce, we haven no choice - and in this case, anything under 1kB RAM would be not enough (as there\'s usually nothing between 512 and 1024 bytes with AVRs)\r\n\r\n## Adjusting for specific hardware\r\n\r\nBefore digging into assembly code and analyzing the compiled binaries, some other optimization places can be considered, especially when having a closer look at the hardware. In this case, it\'s just the LCD connected to the AVR. And that\'s exactly the point, it\'s the only thing connected. There is no other SPI slave to communicate with, so whenever we *do* communicate via SPI, it\'s always the LCD.\r\n\r\nSo, there is no reason to control the chip select / chip enable signal, we can simply connect the LCD\'s CE pin to ground (since it\'s active low) and remove all code toggling its state.\r\n\r\n### Getting rid of chip select handling\r\n\r\nHandling the signal is done via preprocessor macro that just toggles the pin. The easiest way is to just delete what the macro is doing, i.e. change\r\n```c\r\n#define spi_cs_high()   do { PORTB |=  (1 << PB2); } while (0)\r\n#define spi_cs_low()    do { PORTB &= ~(1 << PB2); } while (0)\r\n```\r\nto\r\n```c\r\n#define spi_cs_high()\r\n#define spi_cs_low()\r\n```\r\nOr alternatively fully delete every occurrence of either macro - the result will be the same: 20 bytes less content in the `text` section. (I did seem to run into some signal stability here as the animation was some pixels off in some places. I might just blame it on the shitty breadboard.)\r\n\r\nAn alternative in-between the previous handling and grounding the pin is to simply set the pin output to zero before sending the first command in the display init function. This way there\'s no need to toggle the pin before every single command or data sending.\r\n\r\nA second candidate here is the LCD reset signal. Instead of using the microcontroller pin to drive the signal on startup, the LCD reset pin can be connected to an RC element that will keep the signal long enough in low state during power-up.\r\n\r\n### Getting rid of LCD reset handling\r\n\r\nConnecting an RC element (as in resistor and capacitor) between the supply voltage and LCD reset pin will delay the signal rise long enough to count as actual reset signal. According to the LCD driver\'s datasheet, a low pulse of at least 3Î¼s is required for this. Googling for \"RC delay calculator\" or \"RC time calculator\" should point you to formulas and online calculators to figure out good R and C values - [ladyada\'s old website has one for example](http://www.ladyada.net/library/rccalc.html).\r\n\r\nI had a 22kÎ© resistor and 4.7Î¼F capacitor lying next to me - that combination works most of the time. However, sometimes, the display remains blank and I have to try again by with a power cycle. Keep in mind here, while basically anything over the required 3Î¼s is okay, the LCD driver needs to be out of the reset state by the time the first command is sent via SPI.\r\n\r\nRemoving the pin handling: 4 bytes off  \r\nRemoving the delay between the signal change: 12 more bytes.  \r\nRemoving the `nokia_lcd_reset()` function altogether: 6 bytes!\r\n\r\nYeah, we\'re obviously not getting anywhere with that.\r\n\r\nBut then, if really thinking about a device like the ATtinyX5 with just 8 pins, reducing the number of required pins can be yet another crucial part.\r\n\r\n### You will not believe what happens next!\r\n\r\nThe only pin left to look at as the D/#C signal that toggles between command and data transfer with SPI. The actual SPI data and clock signals are fully in control of the AVR\'s SPI hardware module, so not much to do with these pins.\r\n\r\nSince D/#C signal needs to be high for data and low for commands, they need to be controlled inside the microcontroller firmware. But looking at my initial implementation of `spi_send_data()` and `spi_send_command()`, some parts are identical in both functions. In fact, everything but setting the D/#C signal level itself is identical. This calls for the next logical step: combine the common parts.\r\n\r\nThis could end up as something like this:\r\n```c\r\nstatic void\r\nspi_send(uint8_t data)\r\n{\r\n    SPDR = data;\r\n    while (!(SPSR & (1 << SPIF))) {\r\n        /* wait */\r\n    }\r\n}\r\n\r\nstatic void\r\nspi_send_command(uint8_t command)\r\n{\r\n    spi_dc_low();\r\n    spi_send(command);\r\n}\r\n\r\nstatic void\r\nspi_send_data(uint8_t data)\r\n{\r\n    spi_dc_high();\r\n    spi_send(data);\r\n}\r\n\r\n```\r\n\r\nSo at this point we had reached 2310 bytes `text` section size. Now, with this change in place, we get this:\r\n```txt\r\n   text    data     bss     dec     hex filename\r\n   2310       0      19    2329     919 example.elf\r\n```\r\n\r\nYes. As it turns out, the compiler optimization was doing this re-arrangement all along.\r\n\r\nTo see the real impact of this change, we could disable the compiler optimization by removing the \"`-Os`\" flag from from the `CFLAGS` variable. This will actually result in a compiler warning as it\'s generally a bad idea to disable compiler optimization.\r\n\r\n```text\r\n   text    data     bss     dec     hex filename\r\n   3536       0      19    3555     de3 example--duplicate-parts.elf\r\n   3528       0      19    3547     ddb example--shared-common-part.elf\r\n```\r\nWell, no significant difference, but still, separating the shared common parts into its own function saves a few bytes. And so does very clearly the compiler optimization, so let\'s put that back into the Makefile.\r\n\r\nThere probably is a lesson in here. Not every seemingly obvious optimization will actually have any impact? Something like that. And, well, I guess when it comes to assembly code in general, the compiler will probably do a better job than I ever could. At least from code size point of view, but that\'s the point here - speed optimization would be a different story.\r\n\r\n## Digging into the binary and assembly files\r\n\r\nSo those were the obvious hardware related adjustments. As I mentioned in [the initial article on this](xbm-images-and-animations-on-a-nokia-lcd), changing the animation part into a split frame and therefore being able to store the 16bit address data in 8bit would be another improvement on the code size.\r\n\r\nBut what comes next? What would be our options after all the (more or less) obvious parts have been optimized?\r\n\r\nTo answer that, you\'ll have to know where the program-space-hungry parts actually are. Two places to look at that are each source code file\'s assembly listing, i.e. what the compiler will turn the C code into, and the linker map file, showing more details on the resulting binary\'s memory spaces.\r\n\r\nThe example code\'s Makefile is set up to generate both of those, i.e. `.lst` files for each source file\'s assembly code, and a `.map` file from the linker. There are other tools as well, for example `avr-objdump` and `avr-readelf` will give similar information on the binary file.\r\n\r\nWell, any one of those mentioned tools and files are worth their own article, so I won\'t be going into details on them at this point. Just have a look at the `.lst` and `.map` files to get some idea. It\'s all standard gcc related stuff, so documentation will be plentiful available on the internet.\r\n\r\n## Final words \r\n\r\nCode optimization can be a tedious task and at some point it might be wise to just settle on compromises - provided size constraints allow that (or speed constraints, but again, speed optimization is a different story). If you want to use a non-SMD ATmega with small enough footprint (like a DIP-28 package), 32kB program memory will be as good as it gets. If your current code needs more than that, you have to get creative.\r\n\r\nAnd if your code does need less than it, well, you might be able to use a smaller member of the family and save a few cents on the component. But if you\'re a hobbyist, you probably won\'t really benefit from those savings and are better off with the bigger devices in the long run.\r\n\r\nBut regardless of actual size constraints, code optimization is worth to have a look at, because in order to optimize your code, you need to know what you\'re doing, and you need to know your system. And this works the other way around as well, so trying to optimize your code will make you force to get to know your system, and it\'s definitely a place to learn new tricks.\r\n\r\nAll this is especially true in embedded systems and microcontrollers, but can also help you write more efficient code on less constraint system. Careful though, balance is key here; sacrificing all forms of readability and understandable logic to gain  1% is probably a bad idea unless you\'re at 101% capacity.','<p>My <a href=\"xbm-images-and-animations-on-a-nokia-lcd\">previous entry about the Nokia 5110/3310 LCD</a> was more a storytelling session than going into the technical parts or the source code. Well, speaking of source code, <a href=\"https://github.com/sgreg/xbm2nokia\">the Github repository</a> does cover the main usage concepts, but I still wanted to add a few paragraphs here now.</p>\n<p>After finishing the initial proof of concept and dumping the example code on Github, I had another look and tried to see what parts could be optimized. After all, the very core idea was to reduce the program memory size to display XBM image based animations, so why stop here yet.</p>\n<p>I was curious to see if I could fit the crappy-face-with-wobbling-eyes example animation into an AVR chip with only 2kB of flash memory, like an 8pin ATtiny25. That, however, will require one crucial adjustment regardless of program memory.</p>\n<h2>Cutting down on RAM usage</h2>\n<p>The original example was targeted for an ATmega328 with 32kB program memory and 2kB RAM. So if this goal succeeds, the whole example would fit into the RAM alone - which makes no sense in practice, and it doesn\'t work that way, but just to put in perspective. Especially putting in perspective what a spoiled fat cat these amounts of resources can make you.</p>\n<p>Sticking with the ATtiny25 as example target, the available RAM amount drops to a sad 128 bytes. That amount couldn\'t even store a full-length tweet, let alone the full display memory content. In fact, this is how far 128 byte display memory would get us:</p>\n<p><img src=\"/images/nokia5110-128bytes.jpg\" alt=\"Nokia LCD showing 128 byte content\" title=\"System bias got adjusted to show a bit more contrast\"></p>\n<p>Not to mention that filling up all the RAM like that would mean that there\'s no space left to have a stack. Kiss your local variables and functions altogether goodbye right here and now.</p>\n<p>Long story short, the LCD memory content can\'t be stored inside the code with that little RAM (and shouldn\'t be stored there either with just slightly more RAM than data, i.e. 512 bytes RAM, due to stack growth). Luckily that step isn\'t really necessary, and the LCD memory can to be updated by reading the image data directly from the program memory and sending it straight to the LCD.</p>\n<p>So let\'s take the example\'s initial implementation that keeps the LCD memory in RAM, copies the given data into that and then sends the whole thing to the LCD via SPI:</p>\n<pre class=\"lang-c line-numbers\"><code>/* internal LCD memory buffer */\nunsigned char nokia_lcd_memory[LCD_MEMORY_SIZE];\n\nvoid nokia_lcd_fullscreen(const uint8_t data[])\n{   \n    memcpy_P(nokia_lcd_memory, (PGM_P) data, 504);\n    nokia_lcd_update();\n}\n\nstatic void nokia_lcd_update(void)\n{   \n    uint8_t x;\n    uint8_t y;\n\n    for (y = 0; y &lt; LCD_Y_RES / 8; y++) {\n        spi_send_command(0x80);     // set X addr to 0x00\n        spi_send_command(0x40 | y); // set Y addr to y\n        for (x = 0; x &lt; LCD_X_RES; x++) {\n            spi_send_data(nokia_lcd_memory[y * LCD_X_RES + x]); // send data\n        }\n    }   \n}\n</code></pre>\n<p>Now let\'s get rid of all the <code>nokia_lcd_memory</code> related parts, which in the end will be simply one function directly sending the given image data to the LCD:</p>\n<pre class=\"lang-c line-numbers\"><code>void nokia_lcd_fullscreen(const uint8_t data[])\n{   \n    uint8_t x;\n    uint8_t y;\n\n    for (y = 0; y &lt; LCD_Y_RES / 8; y++) {\n        spi_send_command(0x80);     // set X addr to 0x00\n        spi_send_command(0x40 | y); // set Y addr to y\n        for (x = 0; x &lt; LCD_X_RES; x++) {\n            /* read data straight from PROGMEM variable and send it */\n            spi_send_data(pgm_read_byte(&amp;(data[y * LCD_X_RES + x])));\n        }\n    }   \n}\n</code></pre>\n<p>The <code>nokia_lcd_memory</code> char array  is however also used within the frame diff update functions for animations. I\'ll come back to that later. For now, we\'ll be using full screen animations, i.e. call <code>./xbm2nokia.sh -g</code>. Yeah, this is completely counterproductive as it will more than double the program memory size, but bear with me.</p>\n<h2>ELF binary sections and sizes</h2>\n<p>Assuming full screen animations were created from all 9 frames x1.xbm-x9.xbm, the <code>avr-size</code> command will reveal the differences:</p>\n<pre class=\"lang-bash line-numbers\"><code>$ avr-size v?/example.elf\n   text    data     bss     dec     hex filename\n   5054       0     523    5577    15c9 v1/example.elf\n   5038       0      19    5057    13c1 v2/example.elf\n</code></pre>\n<p>A few words on what each section means:</p>\n<ul>\n<li><code>text</code> stores the actual compiled program code</li>\n<li><code>data</code> stores all initial values for global variables that aren\'t zero</li>\n<li><code>bss</code> defines the size of all global variables that are uninitialized or initialized with zero</li>\n<li><code>dec</code> is the total size of the executable including <code>text</code>, <code>data</code> and <code>bss</code></li>\n<li><code>hex</code> is the same as <code>dec</code>, just as hexadecimal value</li>\n</ul>\n<p>As we can see, the <code>bss</code> size decreased drastically, by 504 bytes, the size of the internal LCD memory buffer. If you\'re wondering why <code>data</code> and <code>bss</code> are separated, it\'s because the <code>bss</code> section won\'t actually make it into the final Hex file that is flashed to the microcontroller. The C runtime library will - among other things - take care that the RAM is properly initialized before calling <code>main()</code>, by copying <code>data</code> content to it, and zeroing everything in the <code>bss</code> section. So only the location and size of that zero-initialized memory section needs to be known.</p>\n<p>To verify that the <code>bss</code> won\'t be flashed, have a look at at the final Hex file created from the ELF file, which will be flashed in the microntrollers program memory. If you know about the Intel Hex file format itself, you might be able to just look at the file, alternatively, <code>avr-size</code> works here as well:</p>\n<pre class=\"lang-bash line-numbers\"><code>$ avr-size v?/example.hex\n   text    data     bss     dec     hex filename\n      0    5054       0    5054    13be v1/example.hex\n      0    5038       0    5038    13ae v2/example.hex\n</code></pre>\n<p>Well, it\'s not an ELF file, so everything is shown as <code>data</code> section content, but it\'s still good enough to see, that these numbers are both times exactly the same as the ELF file\'s <code>text</code> section was. Since there is nothing stored in the <code>data</code> section, this adds up. If you have doubt, just add some <code>int abcd=123;</code> as global variable and see how to resulting 2 bytes in the <code>data</code> section (since int is 16 bit in AVR) add up accordingly.</p>\n<p>But regardless of being part of the to-be-flashed Hex file or not, it will be part of the size that is required in them RAM.</p>\n<h2>Coming back to animations</h2>\n<p>Well, as we can see from the <code>avr-size</code> output, eliminating the code that copies the image data into the internal buffer saved us a whooping 16 bytes in program memory. Too bad that\'s going to change.</p>\n<p>As I mentioned before, the functions that handle the frame diffs for animations still use the <code>nokia_lcd_memory</code> buffer. There are actually two different implementations of this functionality: one that sends the full buffer content via SPI after updating all its content based on the frame diff, and one that sends the new display data to the display while it is processing the diff data and updating the internal buffer.</p>\n<p>Getting rid of the internal buffer will leave us with option two as only choice. This however will require additional address calculations that will increase the program size but around 160 bytes.</p>\n<p>This way, we also won\'t need separation between those two choices any longer, and everything related to the <code>NOKIA_GFX_ANIMATION_FULL_UPDATE</code> preprocessor defines can be removed from both <code>nokia_lcd.h</code> and <code>nokia_lcd.c</code> and all that will be left is:</p>\n<pre class=\"lang-c line-numbers\"><code>void\nnokia_lcd_update_diff(const struct nokia_gfx_frame *frame)\n{\n    uint16_t i;\n...\n        diff.data = pgm_read_byte(&amp;(frame-&gt;diffs[i].data));\n        /* nokia_lcd_memory[diff.addr] = diff.data; */\n...\n}\n</code></pre>\n<p>Okay, time to recreate the image data for animations and recompile</p>\n<pre class=\"lang-txt line-numbers\"><code>/path/to/example$ ../xbm2nokia -a x?.xbm\n/path/to/example$ cd v1\n/path/to/example/v1$ make distclean\n/path/to/example/v1$ make\n/path/to/example$ cd ../v2\n/path/to/example/v2$ make distclean\n/path/to/example/v2$ make\n/path/to/example/v2$ cd ..\n/path/to/example$ avr-size v?/example.elf\n   text    data     bss     dec     hex filename\n   2210       0     523    2733     aad v1/example.elf\n   2352       0      19    2371     943 v2/example.elf\n/path/to/example$\n</code></pre>\n<p>So, we got rid of 504 bytes RAM and gained 142 bytes program memory. This sucks, but if RAM is scarce, we haven no choice - and in this case, anything under 1kB RAM would be not enough (as there\'s usually nothing between 512 and 1024 bytes with AVRs)</p>\n<h2>Adjusting for specific hardware</h2>\n<p>Before digging into assembly code and analyzing the compiled binaries, some other optimization places can be considered, especially when having a closer look at the hardware. In this case, it\'s just the LCD connected to the AVR. And that\'s exactly the point, it\'s the only thing connected. There is no other SPI slave to communicate with, so whenever we <em>do</em> communicate via SPI, it\'s always the LCD.</p>\n<p>So, there is no reason to control the chip select / chip enable signal, we can simply connect the LCD\'s CE pin to ground (since it\'s active low) and remove all code toggling its state.</p>\n<h3>Getting rid of chip select handling</h3>\n<p>Handling the signal is done via preprocessor macro that just toggles the pin. The easiest way is to just delete what the macro is doing, i.e. change</p>\n<pre class=\"lang-c line-numbers\"><code>#define spi_cs_high()   do { PORTB |=  (1 &lt;&lt; PB2); } while (0)\n#define spi_cs_low()    do { PORTB &amp;= ~(1 &lt;&lt; PB2); } while (0)\n</code></pre>\n<p>to</p>\n<pre class=\"lang-c line-numbers\"><code>#define spi_cs_high()\n#define spi_cs_low()\n</code></pre>\n<p>Or alternatively fully delete every occurrence of either macro - the result will be the same: 20 bytes less content in the <code>text</code> section. (I did seem to run into some signal stability here as the animation was some pixels off in some places. I might just blame it on the shitty breadboard.)</p>\n<p>An alternative in-between the previous handling and grounding the pin is to simply set the pin output to zero before sending the first command in the display init function. This way there\'s no need to toggle the pin before every single command or data sending.</p>\n<p>A second candidate here is the LCD reset signal. Instead of using the microcontroller pin to drive the signal on startup, the LCD reset pin can be connected to an RC element that will keep the signal long enough in low state during power-up.</p>\n<h3>Getting rid of LCD reset handling</h3>\n<p>Connecting an RC element (as in resistor and capacitor) between the supply voltage and LCD reset pin will delay the signal rise long enough to count as actual reset signal. According to the LCD driver\'s datasheet, a low pulse of at least 3Î¼s is required for this. Googling for \"RC delay calculator\" or \"RC time calculator\" should point you to formulas and online calculators to figure out good R and C values - <a href=\"http://www.ladyada.net/library/rccalc.html\">ladyada\'s old website has one for example</a>.</p>\n<p>I had a 22kÎ© resistor and 4.7Î¼F capacitor lying next to me - that combination works most of the time. However, sometimes, the display remains blank and I have to try again by with a power cycle. Keep in mind here, while basically anything over the required 3Î¼s is okay, the LCD driver needs to be out of the reset state by the time the first command is sent via SPI.</p>\n<p>Removing the pin handling: 4 bytes off<br>\nRemoving the delay between the signal change: 12 more bytes.<br>\nRemoving the <code>nokia_lcd_reset()</code> function altogether: 6 bytes!</p>\n<p>Yeah, we\'re obviously not getting anywhere with that.</p>\n<p>But then, if really thinking about a device like the ATtinyX5 with just 8 pins, reducing the number of required pins can be yet another crucial part.</p>\n<h3>You will not believe what happens next!</h3>\n<p>The only pin left to look at as the D/#C signal that toggles between command and data transfer with SPI. The actual SPI data and clock signals are fully in control of the AVR\'s SPI hardware module, so not much to do with these pins.</p>\n<p>Since D/#C signal needs to be high for data and low for commands, they need to be controlled inside the microcontroller firmware. But looking at my initial implementation of <code>spi_send_data()</code> and <code>spi_send_command()</code>, some parts are identical in both functions. In fact, everything but setting the D/#C signal level itself is identical. This calls for the next logical step: combine the common parts.</p>\n<p>This could end up as something like this:</p>\n<pre class=\"lang-c line-numbers\"><code>static void\nspi_send(uint8_t data)\n{\n    SPDR = data;\n    while (!(SPSR &amp; (1 &lt;&lt; SPIF))) {\n        /* wait */\n    }\n}\n\nstatic void\nspi_send_command(uint8_t command)\n{\n    spi_dc_low();\n    spi_send(command);\n}\n\nstatic void\nspi_send_data(uint8_t data)\n{\n    spi_dc_high();\n    spi_send(data);\n}\n</code></pre>\n<p>So at this point we had reached 2310 bytes <code>text</code> section size. Now, with this change in place, we get this:</p>\n<pre class=\"lang-txt line-numbers\"><code>   text    data     bss     dec     hex filename\n   2310       0      19    2329     919 example.elf\n</code></pre>\n<p>Yes. As it turns out, the compiler optimization was doing this re-arrangement all along.</p>\n<p>To see the real impact of this change, we could disable the compiler optimization by removing the \"<code>-Os</code>\" flag from from the <code>CFLAGS</code> variable. This will actually result in a compiler warning as it\'s generally a bad idea to disable compiler optimization.</p>\n<pre class=\"lang-text line-numbers\"><code>   text    data     bss     dec     hex filename\n   3536       0      19    3555     de3 example--duplicate-parts.elf\n   3528       0      19    3547     ddb example--shared-common-part.elf\n</code></pre>\n<p>Well, no significant difference, but still, separating the shared common parts into its own function saves a few bytes. And so does very clearly the compiler optimization, so let\'s put that back into the Makefile.</p>\n<p>There probably is a lesson in here. Not every seemingly obvious optimization will actually have any impact? Something like that. And, well, I guess when it comes to assembly code in general, the compiler will probably do a better job than I ever could. At least from code size point of view, but that\'s the point here - speed optimization would be a different story.</p>\n<h2>Digging into the binary and assembly files</h2>\n<p>So those were the obvious hardware related adjustments. As I mentioned in <a href=\"xbm-images-and-animations-on-a-nokia-lcd\">the initial article on this</a>, changing the animation part into a split frame and therefore being able to store the 16bit address data in 8bit would be another improvement on the code size.</p>\n<p>But what comes next? What would be our options after all the (more or less) obvious parts have been optimized?</p>\n<p>To answer that, you\'ll have to know where the program-space-hungry parts actually are. Two places to look at that are each source code file\'s assembly listing, i.e. what the compiler will turn the C code into, and the linker map file, showing more details on the resulting binary\'s memory spaces.</p>\n<p>The example code\'s Makefile is set up to generate both of those, i.e. <code>.lst</code> files for each source file\'s assembly code, and a <code>.map</code> file from the linker. There are other tools as well, for example <code>avr-objdump</code> and <code>avr-readelf</code> will give similar information on the binary file.</p>\n<p>Well, any one of those mentioned tools and files are worth their own article, so I won\'t be going into details on them at this point. Just have a look at the <code>.lst</code> and <code>.map</code> files to get some idea. It\'s all standard gcc related stuff, so documentation will be plentiful available on the internet.</p>\n<h2>Final words</h2>\n<p>Code optimization can be a tedious task and at some point it might be wise to just settle on compromises - provided size constraints allow that (or speed constraints, but again, speed optimization is a different story). If you want to use a non-SMD ATmega with small enough footprint (like a DIP-28 package), 32kB program memory will be as good as it gets. If your current code needs more than that, you have to get creative.</p>\n<p>And if your code does need less than it, well, you might be able to use a smaller member of the family and save a few cents on the component. But if you\'re a hobbyist, you probably won\'t really benefit from those savings and are better off with the bigger devices in the long run.</p>\n<p>But regardless of actual size constraints, code optimization is worth to have a look at, because in order to optimize your code, you need to know what you\'re doing, and you need to know your system. And this works the other way around as well, so trying to optimize your code will make you force to get to know your system, and it\'s definitely a place to learn new tricks.</p>\n<p>All this is especially true in embedded systems and microcontrollers, but can also help you write more efficient code on less constraint system. Careful though, balance is key here; sacrificing all forms of readability and understandable logic to gain  1% is probably a bad idea unless you\'re at 101% capacity.</p>\n','2017-05-12 23:45:29',1,1),(8,'Bare metal ARM Cortex-M Hello World on Linux','bare-metal-arm-cortexm-hello-world-on-linux','Getting started with one of many choices for bare metal ARM development: programming an STM32F103 Cortex-M3 microcontroller on the Linux command line using OpenOCD, libopencm3 and two choices of JTAG/SWD programmers.','arm_stm32f103.jpg','I probably should have written this sort of article as my very first AVR related article, to give a better understanding of my general development practices with AVR. Maybe it would make some of my code and ramblings easier to follow and understand for others. I guess it has been just too long since I started with AVR development that writing a basic user guide is difficult to get my mind into.\r\n\r\nThis is what I want to avoid with ARM development. I have a feeling there will be more focus on ARM with my personal projects in the future, so I want to create a proper base for anything that might come later on.\r\n\r\nMoving from 8bit AVR to bare metal 32bit ARM development has been a plan for a long time. Well, okay, I have worked professionally and back in my student days with ARM before, but every time, there was a ready development environment available. I never started from scratch building the environment myself. It simply never happened. Every time I started to look into it, I got confused about where to actually start, what I\'m going to need and how to actually do anything in the first place.\r\n\r\nIt somehow seems to me that the easiest option to get into ARM development is to pick one vendor and stick to that vendor only. Get their tools and accessories, and stick to that as well. I rather have a bit more generic approach, but I have the feeling that sooner or later, I\'ll be doing exactly that. But looking for that generic solution seemed more of a burden.\r\n\r\nWell, one day I didn\'t let loose and decided I wouldn\'t stop trying until I had flashed some hello world blinky to one of my dusty ARM boards - so here\'s my story about that. And then some.\r\n\r\nBut just to make sure there\'s no confusion, the \"*on Linux*\" part in the title refers to Linux as development environment. I won\'t be running Linux on a Cortex-M. Also, I\'m still at the state of *unknown unknowns* regarding ARM development. It\'s all still pretty fresh to me and I honestly don\'t even know what I don\'t know about this subject.\r\n\r\n## Choosing a development board\r\n\r\nOver the years, I have (quite randomly) acquired a few development boards from all sorts of vendors. As a very first start, I gathered them all together and tried to communicate with either one of them via JTAG. One [STM32F103](http://www.st.com/en/microcontrollers/stm32f103.html) based no-frills board I got [from Watterott in Germany](http://www.watterott.com/en/STM32F103TB-ARM-Cortex-M3-Development-Board) kinda worked the best for me, but unfortunately it\'s not very breadboard friendly. But turns out you\'ll get a very similar alternative for around half the price from China - same chip family with less flash but more pins. You\'ll probably find it as \"Mini STM32\", \"Blue Pill\" / \"Red Pill\" (depending on the PCB color) or just the cheapest ARM board available. For pinout, schematic and other information, check [Zoltan Hudak\'s blog article at mbed](https://developer.mbed.org/users/hudakz/code/STM32F103C8T6_Hello/).\r\n\r\n![Collection of ARM boards](/images/arm_boards.jpg \"NXP board to the left, Teensy in the center, STM32 everywhere else with the Blue Pill in the front\")\r\n\r\nFrom here on forward, it\'s assumed the cheapo China ARM board will be used. In theory, any other STM32F103 based board might do as well, but chances are there the hardware is not identical (e.g. if blinking a LED later on, the board\'s LED - if it has any - might be connected to a different microcontroller pin).\r\n\r\n## Connecting the board\r\n\r\nUnlike AVR which uses SPI, or ESP8266 which uses UART, you will most likely need a [JTAG](https://en.wikipedia.org/wiki/JTAG) or [SWD](https://en.wikipedia.org/wiki/JTAG#Serial_Wire_Debug) debugger to eventually flash the firmware to your ARM board and optionally debug your program. In case of the previously mentioned cheap STM32F103 board, the choice is SWD.\r\n\r\nOne option is to get a very generic debugger that supports both JTAG and SWD, like the [ARM-USB-OCD-H](https://www.olimex.com/Products/ARM/JTAG/ARM-USB-OCD-H/) with matching [SWD adapter](https://www.olimex.com/Products/ARM/JTAG/ARM-JTAG-SWD/). A more higher end option (at least based on the price tag - although there is a very affordable non-commercial option for educational purposes available) can be found from [Segger](https://www.segger.com/jlink-debug-probes.html). STMicroelectronics has the [ST-Link](http://www.st.com/en/development-tools/st-link-v2.html), which you can get as cheap SWD-only clone from China in a small USB stick package. Coincidentally, the cheap clone will work well enough with the cheap STM32F103 board.\r\n\r\n![JTAG and SWD debuggers](/images/arm_jtag_debuggers.jpg \"Olimex ARM-USB-OCD-H with SWD adapter and a cheap ST-Link China clone\")\r\n\r\nThe actual communication will happen via [OpenOCD](http://openocd.org/) which supports all JTAG/SWD debuggers mentioned so far (the Segger one is unconfirmed, but there\'s a config script for it, so it should work just fine). I personally have the Olimex and a ST-Link clone, so naturally I will use those.\r\n\r\n## Getting the software ready\r\n\r\nApart from [OpenOCD](http://openocd.org/), we will look into [libopencm3](https://github.com/libopencm3/libopencm3) as general support library for ARM Cortex-M3, and use an ARM toolchain for compiling, linking and all that, as well as GDB for debugging. GDB isn\'t fully necessary, but it\'s really nice to have in my opinion, so I recommend installing that along the way (lots of fiddling around with the hardware later is done with GDB).\r\n\r\n### ARM Toolchain\r\n\r\nYour distribution\'s package manager should have all you need: GCC, binutils and GDB. Again, GDB is optional, but thanks to JTAG and OpenOCD, we have an out-of-the-box debug interface readily available through GDB.\r\n\r\nIf you have Ubuntu, you can install it all via\r\n```txt\r\nsudo apt-get install gcc-arm-none-eabi binutils-arm-none-eabi gdb-arm-none-eabi\r\n```\r\n\r\nThe package names should be very similar if not identical on other Linux systems. If you\'re using the kind of distribution that doesn\'t have an ARM toolchain available from the package manager, you probably know how to get one.\r\n\r\n### OpenOCD\r\n\r\nAgain, OpenOCD is probably available from your Linux system\'s package manager. However, the available version might not be the latest one, which means in best case it\'s around 2 years old. It might not be a problem, the board and debuggers used in this article were already supported in the previous version (confirmed with 0.9.0, unknown for older versions). Either way, [check from here](http://openocd.org/getting-openocd/) if you want the latest version.\r\n\r\nOnce installed, a few notes on how OpenOCD operates. OpenOCD is mainly a bridge between the microcontroller attached via JTAG/SWD and the actual debug interface. This can be GDB, a simple telnet connection or some Tcl RPC API (never tried that one).\r\n\r\nOpenOCD comes with a set of configuration files ([Tcl](https://en.wikipedia.org/wiki/Tcl) scripts, actually) for both the JTAG debug interface, and the target board / microcontroller. The location of those files depends on where either you or your system\'s package manager installed them to. One option could be `/usr/share/openocd/scripts/`. If you build OpenOCD manually and without installing it system-wide, the directory is called `tcl` instead of `scripts`in the OpenOCD source tree.\r\n\r\nThere are other files as well, but for this article, only the `interface` and `target` directories inside the `scripts` (or `tcl`) directory are of interest. Have a look around in those directories and look into some files to get some idea what\'s going on.\r\n\r\nTo set up OpenOCD properly, we\'ll need to run it with the matching configuration for our hardware setup:\r\n* `target/stm32f1x.cfg` for the STM32F103 based board\r\n* `interface/stlink-v2.cfg` if using the ST-Link clone\r\n* `interface/ftdi/olimex-arm-usb-ocd-h.cfg` and `interface/ftdi/olimex-arm-jtag-swd.cfg` if using the Olimex JTAG debugger + SWD adapter\r\n\r\nSo to actually execute OpenOCD, you have to add each file with `-f` parameter:\r\n\r\n```txt\r\nopenocd -f /path/to/scripts/interface/stlink-v2.cfg -f /path/to/scripts/target/stm32f1x.cfg\r\n```\r\nwhen using the ST-Link clone, and\r\n```txt\r\nopenocd -f /path/to/scripts/interface/ftdi/olimex-arm-usb-ocd-h.cfg -f /path/to/scripts/interface/ftdi/olimex-arm-jtag-swd.cfg -f /path/to/scripts/target/stm32f1x.cfg\r\n```\r\nwhen using the Olimex ARM-USB-OCD-H + SWD adapter.\r\n\r\nCalling either of it at this point will fail - unless you actually connected the board to the JTAG debugger and powered it up. I\'ll come back to that later, for now, I\'ll finish the software installation part.\r\n\r\n### libopencm3\r\n\r\nCheck the [libopencm3 git repository](https://github.com/libopencm3/libopencm3) for installation instructions. I haven\'t looked into standalone setup yet, for now I just cloned it into `/opt/` and thought I can just point the GCC flags to it later.\r\n\r\nAn easier starting point for now will be the [libopencm3-examples repository](https://github.com/libopencm3/libopencm3-examples), which ships the library itself as submodule and comes with basic sample code for a variety of ARM devices. However, not for our cheap China board (unless I missed it). This is actually a good thing, as it gives us the opportunity to write our own example for it - based on an example for a similar device.\r\n\r\nBut first, getting the example code, the libopencm3 submodule, and setting it all up.\r\n\r\n```txt\r\n$ cd /path/to/wherever\r\n$ git clone https://github.com/libopencm3/libopencm3-examples.git\r\nCloning into \'libopencm3-examples\'...\r\n...\r\n$ cd libopencm3-examples\r\n$ git submodule init\r\nSubmodule \'libopencm3\' (https://github.com/libopencm3/libopencm3.git) registered for path \'libopencm3\'\r\n$ git submodule update\r\nCloning into \'libopencm3\'...\r\n...\r\n$ make\r\n...\r\n$\r\n```\r\n\r\nHopefully it all went through without any errors, and the library and examples are all built. Feel free to have a look around the directories and example source code. We\'ll have a look at `examples/stm32/f1/` in a little while, but first, we should make sure the hardware and JTAG communication actually works\r\n\r\n## Hooking up JTAG\r\n\r\nA little bit earlier, running OpenOCD failed, which was expected as it requires to actually communicate with the hardware to run successfully. So time to get that done.\r\n\r\nSince our board uses SWD, it\'s only four wires to connect, Vcc, GND, SWD clock and SWD data, which are conveniently routed to its own pin headers. For the ST-Link clone, it\'s easy to find those four pins as the printout is on the case itself. Only confusing part might be, which way to map the printout to the actual pins. In my case, there was an arrow on the connector pointing to pin number 1, but just in case, here\'s a picture:\r\n\r\n![SWD connections for ST-Link](/images/arm_jtag_wires_stlink.jpg \"Pin 1 marker visible on the connector\")\r\n\r\n| Pin | Color | Signal | Description |\r\n| --- | --- | --- | --- |\r\n| 2 | white | `SWCLK` | SWD Clock |\r\n| 4 | green | `SWDIO` | SWD Data |\r\n| 6 | black | `GND` | Ground |\r\n| 8 | red | `3.3V` | Vcc, this will also act as supply voltage for the board itself |\r\n\r\nFor the Olimex JTAG/SWD adapter it will require a look at [the adapter\'s schematic](https://www.olimex.com/Products/ARM/JTAG/ARM-JTAG-SWD/resources/ARM-JTAG-SWD-schematic.pdf) to find the correct pins. And even then it\'s not that clear on first sight, so let me save you some trouble:\r\n\r\n![SWD connections for Olimex ARM-USB-OCD-H](/images/arm_jtag_wires_olimex.jpg \"Ground can go to any other pin on the bottom row, except the rightmost pin, pin number 2\")\r\n\r\n| Pin | Color | Signal | Description |\r\n| --- | --- | --- | --- |\r\n| 1 | red | `VCC` | Supply voltage sense, this is NOT a power supply pin! |\r\n| 7 | green | `TMS_SWDIO` | SWD Data |\r\n| 9 | white | `TCK` | SWD Clock |\r\n| 4 | black | `GND` | Ground (also all other even numbered pins except pin 2) |\r\n\r\nAs you can see from both tables, the Vcc connection will act different on the programmers. While the ST-Link can provide both 3.3V and 5V voltages, the Olimex SWD adapter provides only 5V on pin 19 ([see schematic](https://www.olimex.com/Products/ARM/JTAG/ARM-JTAG-SWD/resources/ARM-JTAG-SWD-schematic.pdf)). Our board requires 3.3V (as the pin Vcc is connected to states), so the ST-Link can directly power it through the 3.3V pin. When using the Olimex programmer, it\'s probably easiest to just power the board through its USB connector.\r\n\r\nHowever, the board\'s 3.3V pin still needs to be connected to the Olimex programmer\'s pin 1 (VCC) as it is acting as a power detection input. Without this connection, OpenOCD won\'t be able to detect the board.\r\n\r\n## Hello Board\r\n\r\nFinally, we should be able to establish a connection via OpenOCD to the board. I\'ll save you the scrolling and will just copy the OpenOCD command lines again. This time, it\'s assumed you\'re in the OpenOCD `scripts` directory (or `tcl` directory, see above), so the parameters are relative to that directory (easier to copy and paste I guess)\r\n\r\nST-Link:\r\n```txt\r\nopenocd -f ./interface/stlink-v2.cfg -f ./target/stm32f1x.cfg\r\n```\r\n\r\nOlimex ARM-USB-OCD-H + SWD adater:\r\n```txt\r\nopenocd -f ./interface/ftdi/olimex-arm-usb-ocd-h.cfg -f ./interface/ftdi/olimex-arm-jtag-swd.cfg -f ./target/stm32f1x.cfg\r\n```\r\n\r\nRemember to power up the board through USB if you\'re using the Olimex programmer. With the ST-Link, you can also power the board through USB, but in that case it might be better to remove the 3.3V connection between the programmer and the board. Once powered up, the board\'s default program should make the red LED flash.\r\n\r\nIf everything is set up properly, calling OpenOCD will give you some debug and info output - just like before as it failed, but this time it should not return back to the shell but keep running in the foreground. The output will look something like this:\r\n\r\n```txt\r\nOpen On-Chip Debugger 0.10.0\r\nLicensed under GNU GPL v2\r\nFor bug reports, read\r\n	http://openocd.org/doc/doxygen/bugs.html\r\nInfo : FTDI SWD mode enabled\r\nadapter speed: 1000 kHz\r\nadapter_nsrst_delay: 100\r\nnone separate\r\ncortex_m reset_config sysresetreq\r\nInfo : clock speed 1000 kHz\r\nInfo : SWD DPIDR 0x1ba01477\r\nInfo : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints\r\n  \r\n```\r\n\r\n### Well, now what?\r\n\r\nTyping anything into the running OpenOCD instance doesn\'t seem to have any effect. Some time earlier I wrote how OpenOCD is basically just a bridge, so in that sense, it doesn\'t provide a direct way to interact with it. Instead, it provides three  network daemons on different ports:\r\n* GDB server on port 3333\r\n* telnet server on port 4444\r\n* Tcl server on port 6666\r\n\r\nTo make sure that\'s the case, `netstat` can confirm this, at least the ports:\r\n```txt\r\n$ sudo netstat -nltp |grep openocd\r\ntcp        0      0 0.0.0.0:6666            0.0.0.0:*               LISTEN      21001/openocd   \r\ntcp        0      0 0.0.0.0:4444            0.0.0.0:*               LISTEN      21001/openocd   \r\ntcp        0      0 0.0.0.0:3333            0.0.0.0:*               LISTEN      21001/openocd   \r\n```\r\n\r\nAs you can see, the listening address is `0.0.0.0`, i.e. \"any address available on this machine\", which means the OpenOCD instance is accessible through the network.\r\n\r\nIf you prefer to keep the connections limited to localhost, you would need to add \"`bindto 127.0.0.1`\" to OpenOCD. You can do this with the `openocd -c <cmd>` parameter, or then add it to your own config script you add with the `-f` paremeter.\r\n```txt\r\nopenocd -c \"bindto 127.0.0.1\" -f ./interface/stlink-v2.cfg -f ./target/stm32f1x.cfg\r\n```\r\n\r\nSee also the [OpenOCD user manual\'s \"General Commands\"](http://openocd.org/doc/html/General-Commands.html). To change the ports, have a look at the [Server Configuration](http://openocd.org/doc/html/Server-Configuration.html) chapter. And for anything else, well, [the whole manual](http://openocd.org/doc/html/index.html).\r\n\r\n### Where was I...\r\n\r\nYes, by default, there\'s a telnet server running on port 4444, and a GDB server on port 3333. I\'m still going to ignore the Tcl interface, and will do so for the rest of this writing.\r\n\r\nLet\'s start with telnet. Open a second terminal and connect to the telnet server:\r\n```txt\r\n$ telnet localhost 4444\r\nTrying 127.0.0.1...\r\nConnected to localhost.\r\nEscape character is \'^]\'.\r\nOpen On-Chip Debugger\r\n> \r\n```\r\n\r\nIn the terminal your OpenOCD is running, you should see something like this:\r\n```txt\r\nInfo : accepting \'telnet\' connection on tcp/4444\r\n```\r\n\r\nGreat. Let\'s dump the register content with the `reg` command for no obvious reason, just to have some basic interaction with the hardware. But before we can do that, we need to halt the processor first, using the `halt` command.\r\n\r\n```txt\r\n> halt\r\ntarget halted due to debug-request, current mode: Thread \r\nxPSR: 0x21000000 pc: 0x08000198 msp: 0x20000400\r\n```\r\n\r\nThis already shows some of the registers\' content, namely the *Program Status Register* (xPSR), *Program Counter* (PC) and the *Stack Pointer* (MSP). Now, let\'s get the rest of them:\r\n\r\n```txt\r\n> reg\r\n===== arm v7m registers\r\n(0) r0 (/32): 0x00006252\r\n(1) r1 (/32): 0x422201B4\r\n(2) r2 (/32): 0x40011000\r\n(3) r3 (/32): 0x10032000\r\n(4) r4 (/32): 0x080004CC\r\n(5) r5 (/32): 0x080004CC\r\n(6) r6 (/32): 0x8AA71453\r\n(7) r7 (/32): 0x395B32E8\r\n(8) r8 (/32): 0xFF7FEF97\r\n(9) r9 (/32): 0xFFFFBFFD\r\n(10) r10 (/32): 0xB666D97B\r\n(11) r11 (/32): 0xB63648FC\r\n(12) r12 (/32): 0x00002000\r\n(13) sp (/32): 0x20000400\r\n(14) lr (/32): 0x08000493\r\n(15) pc (/32): 0x08000198\r\n(16) xPSR (/32): 0x21000000\r\n(17) msp (/32): 0x20000400\r\n(18) psp (/32): 0xB6FFA7F0\r\n...\r\n```\r\n\r\n..and so on. Needless to say, your values may vary. And you should see the same response from the telnet session in the OpenOCD instance terminal.\r\n\r\nPlay around if you want to, check the `help` command as a starting point and wade through the [OpenOCD user manual](http://openocd.org/doc/html/index.html). For the purpose of this article, I\'ll be moving on to GDB now. Let\'s reset the processor and quit the telnet session\r\n\r\n```txt\r\n> reset\r\n> ^]\r\ntelnet> quit\r\nConnection closed.\r\n$\r\n```\r\n\r\nThat `^]` means pressing `CTRL + ]` to enter the telnet command line. \r\n\r\n### Connecting with GDB\r\n\r\nYou can use GDB from any architecture you want, but to get the best support - and also the correct registers and everything, you\'re better off using the ARM toolchain\'s version of GDB. In our case, `arm-none-eabi-gdb`.\r\n\r\n```txt\r\n$ arm-none-eabi-gdb \r\nGNU gdb (7.10-1ubuntu3+9) 7.10\r\nCopyright (C) 2015 Free Software Foundation, Inc.\r\n...\r\nType \"apropos word\" to search for commands related to \"word\".\r\n(gdb) \r\n```\r\n\r\nFirst, we need to connect to OpenOCD:\r\n\r\n```txt\r\n(gdb) target remote localhost:3333\r\nRemote debugging using localhost:3333\r\n0x00000000 in ?? ()\r\n(gdb)\r\n```\r\n\r\nSince we don\'t have any information on what\'s running on the board, we cannot do much useful with GDB at this point. Well, it clearly blinks the LED, and sure, we could analyze the program flow, but I\'ll keep that for later, when we\'re flashing our own blinking LED program. For now, let\'s just do the same we did in the telnet session: halt the processor and dump the register content.\r\n\r\n```txt\r\n(gdb) monitor reset halt\r\ntarget halted due to debug-request, current mode: Thread \r\nxPSR: 0x01000000 pc: 0x08000144 msp: 0x20000400\r\n(gdb) continue\r\nContinuing.\r\n^C\r\nProgram received signal SIGINT, Interrupt.\r\n0x08000198 in ?? ()\r\n(gdb) info registers\r\nr0             0xa63b3	680883\r\nr1             0x42220000	1109524480\r\nr2             0x40011000	1073811456\r\nr3             0x10032000	268640256\r\nr4             0x80004cc	134218956\r\nr5             0x80004cc	134218956\r\nr6             0x9aa7144b	-1700326325\r\nr7             0x395b33e8	962278376\r\nr8             0xff7fef97	-8392809\r\nr9             0xffffbffd	-16387\r\nr10            0xf6e6d97f	-152643201\r\nr11            0xb63648fc	-1237956356\r\nr12            0x2000	8192\r\nsp             0x20000400	0x20000400\r\nlr             0x80004ad	134218925\r\npc             0x8000198	0x8000198\r\nxPSR           0x21000000	553648128\r\n(gdb)\r\n```\r\n\r\nAlso, since we\'re just running a random program here, we don\'t have any debug information or symbol table or anything at all available. It also seems there is no register data available without continuing the program first, and then interrupt it. There might be a more elegant way to do this, but this one will have to do now.\r\n\r\nIf you\'re used to GDB, you definitely want to continue using it. If you\'re not familiar with GDB, I\'d say you should get familiar with it. Maybe start with [OpenOCD\'s user manual entry on GDB](http://openocd.org/doc/html/GDB-and-OpenOCD.html) and continue with any tutorial you\'ll find. \r\n\r\nOn a side note, GDB commands can be heavily abbreviated. For example, when I wrote \"`info registers`\", \"`i r`\" would do the same. When I wrote \"`continue`\", \"`cont`\" or simply \"`c`\" would work as well. For the beginning, using the full commands is probably less confusing, but just for you to know.\r\n\r\n## Write me something\r\n\r\nNow that the OpenOCD, JTAG programmer and other general basics have been at least somewhat covered, it\'s time to continue with the actual programming. Please note, this article won\'t provide much more deeper insight into any of these subjects. These basics alone result already in a way too long article that anyone would ever want to read, going further into details just seems like a waste of time. My intention is to have a basic all-round article with a few extra information here and there. I hope I can give enough pointers for you to know, what other information you may want to look for. The internet should provide plenty of resources on more focused subjects within these areas.\r\n\r\nMoving on.\r\n\r\nAs I mentioned while installing the libopencm3 examples, our cheap China board won\'t have out-of-the-box support for any of the libopencm3 examples. For the purpose of education, I\'ll see this as a good thing. All I really want to do in this article, is to get the on-board LED blinking. The Hello World of microcontroller programming - toggling one simple pin.\r\n\r\nSome of the supported boards in the libopencm3 examples have a project called *miniblink* that is doing exactly that. Let\'s find them.\r\n\r\n```txt\r\n$ cd /path/to/wherever/libopencm3-examples\r\n$ cd examples/stm32/f1\r\n$ find . -type d -name miniblink\r\n./waveshare-open103r/miniblink\r\n./stm32-h103/miniblink\r\n./stm32vl-discovery/miniblink\r\n./stm32-maple/miniblink\r\n```\r\n\r\nOne of those four boards could provide us the base for our own board. I\'ll be choosing the stm32vl-discovery board for no real reason (maybe nostalgia, this was my first ARM board as far as I remember).\r\n\r\nBesides the `miniblink` code, we\'ll be needing a linker script. The ones in the examples only define RAM and ROM sizes, everything else is handled by a generic STM32F1 linker script. Let\'s use the *bluepill* name for the cheap China board, and copy the required files into a new directory inside the `stm32/f1/` example directory.\r\n\r\n```txt\r\n$ mkdir bluepill\r\n$ cp stm32vl-discovery/stm32vl-discovery.ld bluepill/bluepill.ld\r\n$ mkdir bluepill/miniblink\r\n$ cp stm32vl-discovery/miniblink/Makefile bluepill/miniblink/\r\n$ cp stm32vl-discovery/miniblink/miniblink.c bluepill/miniblink/\r\n$ cd bluepill\r\n```\r\n\r\nLet\'s start by adjusting the linker script. Open `bluepill.ld` in your editor and adjust the `MEMORY` definition to match the STM32F103C8T6\'s 64kB of flash and 20kB of RAM.\r\n\r\n```clike\r\nMEMORY\r\n{\r\n    rom (rx)  : ORIGIN = 0x08000000, LENGTH = 64K\r\n    ram (rwx) : ORIGIN = 0x20000000, LENGTH = 20K\r\n}\r\n```\r\n\r\nThe origin addresses will remain the same. Feel free to verify this by checking the device\'s memory map in the datasheet, where you will find *SRAM* section at address 0x20000000 and *Flash Memory* at address 0x08000000.\r\n\r\nNext, we\'ll look into the `minibink/Makefile`. Chances are we have to adjust a path or name to match our `bluepill` name. And yes, turns out it\'s the case for the linker script variable `LDSCRIPT`:\r\n\r\n```makefile\r\nLDSCRIPT = ../bluepill.ld\r\n```\r\n\r\nAt this point, we can have a test run to see if everything is set up correct and, as a start, compilation will succeed. By default, libopencm3 builds very quietly, which means you won\'t get any output. Use the `V=1` parameter for `make` (or add it to your Makefile) to get a more verbose compilation process.\r\n\r\n```txt\r\n$ make V=1\r\nUsing ../../../../../libopencm3/ path to library\r\narm-none-eabi-gcc -Os -std=c99 -g -mthumb -mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd -Wextra -Wshadow -Wimplicit-function-declaration -Wredundant-decls -Wmissing-prototypes -Wstrict-prototypes -fno-common -ffunction-sections -fdata-sections  -MD -Wall -Wundef -DSTM32F1 -I../../../../../libopencm3//include  -o miniblink.o -c miniblink.c\r\narm-none-eabi-gcc --static -nostartfiles -T../bluepill.ld -mthumb -mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd -Wl,-Map=miniblink.map -Wl,--gc-sections -L../../../../../libopencm3//lib miniblink.o -lopencm3_stm32f1 -Wl,--start-group -lc -lgcc -lnosys -Wl,--end-group -o miniblink.elf\r\n\r\n```\r\n\r\nGreat, looks like all is set up. Unfortunately we cannot flash this to our board and get the desired result. Time to get the code right.\r\n\r\n### Finally, some actual code!\r\n\r\nOpen the `bluepill/miniblink/miniblink.c` in your editor and have a look at it. As one would expect, pretty much all there is to do to get the LED blink is to initially set up the port as output, have a clock, and then periodically toggle the pin\'s state for all eternity.\r\n\r\nI like how the examples have comments of how to do the same thing by accessing the registers directly. Well yes, this shows how so much more convenient libopencm3 is in comparison, but it\'s also a great starting point to get down to that level. I should probably do that so this article can deserve the \"bare metal\" part in the title, this just seems high-level stuff now. Well.. I leave this as exercise to the reader.\r\n\r\nRegardless of the general comments in the code, it appears the STM32 Discovery board has its LED on pin `PA_1`, i.e. port A (`GPIOA`) pin 1 (`GPIO1`). A look at our board ([or the schematic](https://developer.mbed.org/media/uploads/hudakz/stm32f103c8t6_schematic.png)) will show, it has the on-board LED connected to pin ` PC_13`. So all there is to do, is adjusting those values.\r\n\r\nFor readability, I\'ll omit the original comments from the code now. \r\n\r\n```c\r\n#include <libopencm3/stm32/rcc.h>\r\n#include <libopencm3/stm32/gpio.h>\r\n\r\nstatic void gpio_setup(void)\r\n{\r\n    rcc_periph_clock_enable(RCC_GPIOC); /* was RCC_GPIOA */\r\n    gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ,\r\n              GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);\r\n}\r\n\r\nint main(void)\r\n{\r\n    int i;\r\n    gpio_setup();\r\n\r\n    while (1) {\r\n        gpio_toggle(GPIOC, GPIO13); /* LED on/off */\r\n        for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n            __asm__(\"nop\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n```\r\n\r\nBesides all the port and pin adjustments, I also reduced the loop counter value from 800000 to 200000 which will make it blink faster. I am very sure, the board\'s original program is the exact same original *miniblink* example, so making it blink faster will instantly show if our own program was really uploaded to the board.\r\n\r\nSpeaking of which, let\'s compile this and do exactly that: flash it to the board. The libopencm3 examples work directly with OpenOCD, so there isn\'t anything to set up for this step. Except, well, having your OpenOCD instance still running.\r\n\r\n```txt\r\n$ make\r\n$ make flash\r\n...\r\n** Verified OK **\r\n** Resetting Target **\r\n$\r\n```\r\n\r\nYour board\'s LED should now blink faster. If so, congratulations, you just wrote and flashed your first ARM program. Feel free to adjust the loop counter next and flash the new program again. If your setup is like mine, chances are it will fail to actually flash it, and timeout instead. Trying a second time to flash should succeed in that case. I didn\'t look into the reason for that yet, but wanted to mention it, so you won\'t have to panic if flashing suddenly doesn\'t work anymore.\r\n\r\n## Another look on the inside\r\n\r\nOkay, it\'s been a long road, and we finally arrived somewhere with a result. You can be happy with that and call it a day. But now that we actually have the binary and all, I would like to get one last time into GDB. This time, calling it with our freshly compiled `miniblink.elf` file. Note, if anything feels like it\'s misbehaving - not being able to stop or continue execution, easiest solution might be to quite GDB, abort OpenOCD with CTRL+C, and maybe also power off the device and start over.\r\n\r\n```txt\r\n$ arm-none-eabi-gdb miniblink.elf\r\n...\r\nReading symbols from miniblink.elf...done.\r\n(gdb) target remote localhost:3333\r\nRemote debugging using localhost:3333\r\n0x00000000 in ?? ()\r\n(gdb) c\r\nContinuing.\r\nWARNING! The target is already running. All changes GDB did to registers will be discarded! Waiting for target to halt.\r\n^C\r\nProgram received signal SIGINT, Interrupt.\r\n0x08000178 in main () at miniblink.c:66\r\n66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n```\r\n\r\nYes, we now have our source code included in GDB. Want to see what the current value for `i` is?\r\n\r\n```txt\r\n(gdb) print i\r\n$1 = 138927\r\n```\r\nThere you go, it\'s 138927.\r\n\r\nStepping one instruction at a time through the program for a while and looking again at the value of `i`:\r\n```txt\r\n(gdb) stepi\r\n67                              __asm__(\"nop\");\r\n(gdb) \r\n66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n0x08000178      66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n67                              __asm__(\"nop\");\r\n(gdb) \r\n66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n0x08000178      66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n67                              __asm__(\"nop\");\r\n(gdb) print i\r\n$2 = 138929\r\n(gdb) \r\n```\r\n\r\nTo shorten it, `si` will do the same. But if you simply press Enter without any new instruction, GDB will always use the last command. Also note that GDB creates new internal variables when you print a symbol. This means, `print $1` will display 138927, the value `i` had first time it was looked into. Again, your values most certainly will differ.\r\n\r\nNow, in theory we should be able to not only read, but also assign a value to the variable. Unfortunately trying so with a variable not declared `volatile` will not work. Not sure if this is ARM related or because it\'s remote debugging or something completely different.\r\n\r\nBut we can modify register content. Let\'s see if our counter variable `i` is stored in one\r\n\r\n```txt\r\n(gdb) info reg\r\nr0             0x40011000       1073811456\r\nr1             0x20000000       536870912\r\nr2             0x2000   8192\r\nr3             0xee8f   61071\r\nr4             0x80002a8        134218408\r\nr5             0xdb7ffef3       -612368653\r\nr6             0x8aa71c43       -1968759741\r\nr7             0x395b33e8       962278376\r\nr8             0xff7fef97       -8392809\r\nr9             0xffffbffd       -16387\r\nr10            0xf666d97b       -161031813\r\nr11            0xb63648fc       -1237956356\r\nr12            0x2000   8192\r\nsp             0x20004ff8       0x20004ff8\r\nlr             0x8000173        134218099\r\npc             0x8000174        0x8000174 <main+36>\r\nxPSR           0x21000000       553648128\r\n(gdb) \r\n```\r\n\r\nThis shows the register names, the hexadecimal value and the decimal value. None of these values are 138929 though. But let\'s see what happens if we have another cycle or two with single step instructions and check again.\r\n\r\n```txt\r\n(gdb) si\r\n66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n0x08000178      66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n67                              __asm__(\"nop\");\r\n(gdb) \r\n66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n0x08000178      66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n67                              __asm__(\"nop\");\r\n(gdb) print i\r\n$4 = 138931\r\n(gdb) info reg\r\nr0             0x40011000       1073811456\r\nr1             0x20000000       536870912\r\nr2             0x2000   8192\r\nr3             0xee8d   61069\r\nr4             0x80002a8        134218408\r\nr5             0xdb7ffef3       -612368653\r\nr6             0x8aa71c43       -1968759741\r\nr7             0x395b33e8       962278376\r\nr8             0xff7fef97       -8392809\r\nr9             0xffffbffd       -16387\r\nr10            0xf666d97b       -161031813\r\nr11            0xb63648fc       -1237956356\r\nr12            0x2000   8192\r\nsp             0x20004ff8       0x20004ff8\r\nlr             0x8000173        134218099\r\npc             0x8000174        0x8000174 <main+36>\r\nxPSR           0x21000000       553648128\r\n```\r\n\r\nWell, we incremented `i` two more times, and if we compare the register values, register `r3` was decreased by two. And if we add `i` and `r3`, we actually end up with 200000, our loop counter value. It simply counts in the other direction to eventually compare with zero - which makes sense, processors usually have an instruction to compare against zero.\r\n\r\n### One final trick\r\n\r\nThe CPU is currently halted and (in my case) the LED is on. The LED might be off in your case, that doesn\'t matter. Let\'s toggle it from inside GDB.\r\n\r\nSo we found out we cannot set `i` directly, but register `r3` is used to store its value. Once the register value is zero, the loop will end. Right now, this would take anoter 61069 cycles. Let\'s speed that up by setting `r3` to one. Setting it to zero might be more logical, but this won\'t update the status register that is required for the zero comparison check.\r\n\r\n```txt\r\n(gdb) set $r3 = 1\r\n(gdb) info reg r3\r\nr3             0x1      1\r\n(gdb) \r\n```\r\n\r\nThe last instruction was the `nop` assembly code, next is the for loop check, so let\'s see how the execution goes after that.\r\n\r\n```txt\r\n(gdb) si\r\n66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n0x08000178      66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n0x0800017a      66                      for (i = 0; i < 200000; i++)    /* Wait a bit. */\r\n(gdb) \r\n65                      gpio_toggle(GPIOC, GPIO13);     /* LED on/off */\r\n(gdb) \r\n0x0800016a      65                      gpio_toggle(GPIOC, GPIO13);     /* LED on/off */\r\n(gdb) \r\n0x0800016e      65                      gpio_toggle(GPIOC, GPIO13);     /* LED on/off */\r\n(gdb) \r\ngpio_toggle (gpioport=gpioport@entry=1073811456, gpios=gpios@entry=8192) at ../common/gpio_common_all.c:88\r\n88              uint32_t port = GPIO_ODR(gpioport);\r\n(gdb) \r\n89              GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);\r\n(gdb) \r\n0x080001ee      89              GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);\r\n(gdb) \r\n0x080001f0      89              GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);\r\n(gdb) \r\n0x080001f4      89              GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);\r\n(gdb) \r\n0x080001f6      89              GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);\r\n(gdb) \r\n```\r\n\r\nAt this point the LED will turn off (or back on).\r\n\r\nThe duplicate source code lines shown here are caused by C code simply using multiple assembly instructions. To see what\'s happening deeper, check the `disassemble` (`disas`) command to, eh, disassemble the code. Which, by the way, would have instantly shown that register `r3` is indeed used to store the loop counter. Oh well..\r\n\r\nBut let\'s say we want to avoid the register `r3` manipulation all together and instead force the program counter register `pc` straight to the `gpio_toggle()` function. As we can see from the output above, the `gpio_toggle()` call happens around address 0x0800016a, so let\'s see what we got there. It will actually display data for the whole function the memory address is part of, in this case `main()`, so let\'s focus on the interesting part. Note, using `/m` will display the C code next to it, see `help disas` for more info.\r\n\r\n```txt\r\n(gdb) disas /m 0x0800016a\r\n...\r\n65                      gpio_toggle(GPIOC, GPIO13);     /* LED on/off */\r\n   0x08000168 <+24>:    ldr     r0, [pc, #16]   ; (0x800017c <main+44>)\r\n   0x0800016a <+26>:    mov.w   r1, #8192       ; 0x2000\r\n   0x0800016e <+30>:    bl      0x80001e8 <gpio_toggle>\r\n   0x08000172 <+34>:    ldr     r3, [pc, #12]   ; (0x8000180 <main+48>)\r\n...\r\n(gdb)\r\n```\r\n\r\nThe actual branch call to `gpio_toggle()` is at address 0x0800016e, but setting the program counter to that address won\'t do anything to the LED, since the LED port itself is given as parameter. The parameter is set in 0x800016a (I didn\'t look too deep into it, I would expect two parameters to be loaded, but that\'s not the case). Here we go:\r\n\r\n```txt\r\n(gdb) set $pc = 0x800016a\r\n(gdb) si\r\n0x0800016e      65                      gpio_toggle(GPIOC, GPIO13);     /* LED on/off */\r\n(gdb) \r\ngpio_toggle (gpioport=gpioport@entry=1073811456, gpios=gpios@entry=8192) at ../common/gpio_common_all.c:88\r\n88              uint32_t port = GPIO_ODR(gpioport);\r\n(gdb) \r\n89              GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);\r\n(gdb) \r\n0x080001ee      89              GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);\r\n(gdb) \r\n0x080001f0      89              GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);\r\n(gdb) \r\n0x080001f4      89              GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);\r\n(gdb) \r\n0x080001f6      89              GPIO_BSRR(gpioport) = ((port & gpios) << 16) | (~port & gpios);\r\n(gdb) \r\n```\r\n\r\nYep, LED goes on/off here. Doing this multiple times in a row will always toggle the LED, so feel free to actually try it with 0x0800016e as program counter value to see, nothing will happen in that case. And if you keep on stepping the single instruction, it will always return to the counter. Of course, with such a simple program, there aren\'t too many side effects. Things will be different in a more complex program (especially with code size optimization, I could assume), so careful with wildly writing into registers.\r\n\r\n## Last words\r\n\r\nPhew, what a journey. But well, while in the end, all we got was a blinking LED (which we already had as default program on the board), all the main parts that are needed to continue from here were basically covered, and I hope this was a good start for further explorations. \r\n\r\n### Continuing from here\r\n\r\nYeah, don\'t worry, nothing will continue in this article anymore. As for myself, I will continue with libopencm3 and their examples for a while, maybe starting with SPI or UART. I know I will reach the library\'s limits eventually and have to get to vendor specific implementations and meet the [Cortex Microcontroller Software Interface Standard (CMSIS)](https://www.arm.com/products/processors/cortex-m/cortex-microcontroller-software-interface-standard.php), which I purposely haven\'t even mentioned here.\r\n','<p>I probably should have written this sort of article as my very first AVR related article, to give a better understanding of my general development practices with AVR. Maybe it would make some of my code and ramblings easier to follow and understand for others. I guess it has been just too long since I started with AVR development that writing a basic user guide is difficult to get my mind into.</p>\n<p>This is what I want to avoid with ARM development. I have a feeling there will be more focus on ARM with my personal projects in the future, so I want to create a proper base for anything that might come later on.</p>\n<p>Moving from 8bit AVR to bare metal 32bit ARM development has been a plan for a long time. Well, okay, I have worked professionally and back in my student days with ARM before, but every time, there was a ready development environment available. I never started from scratch building the environment myself. It simply never happened. Every time I started to look into it, I got confused about where to actually start, what I\'m going to need and how to actually do anything in the first place.</p>\n<p>It somehow seems to me that the easiest option to get into ARM development is to pick one vendor and stick to that vendor only. Get their tools and accessories, and stick to that as well. I rather have a bit more generic approach, but I have the feeling that sooner or later, I\'ll be doing exactly that. But looking for that generic solution seemed more of a burden.</p>\n<p>Well, one day I didn\'t let loose and decided I wouldn\'t stop trying until I had flashed some hello world blinky to one of my dusty ARM boards - so here\'s my story about that. And then some.</p>\n<p>But just to make sure there\'s no confusion, the \"<em>on Linux</em>\" part in the title refers to Linux as development environment. I won\'t be running Linux on a Cortex-M. Also, I\'m still at the state of <em>unknown unknowns</em> regarding ARM development. It\'s all still pretty fresh to me and I honestly don\'t even know what I don\'t know about this subject.</p>\n<h2>Choosing a development board</h2>\n<p>Over the years, I have (quite randomly) acquired a few development boards from all sorts of vendors. As a very first start, I gathered them all together and tried to communicate with either one of them via JTAG. One <a href=\"http://www.st.com/en/microcontrollers/stm32f103.html\">STM32F103</a> based no-frills board I got <a href=\"http://www.watterott.com/en/STM32F103TB-ARM-Cortex-M3-Development-Board\">from Watterott in Germany</a> kinda worked the best for me, but unfortunately it\'s not very breadboard friendly. But turns out you\'ll get a very similar alternative for around half the price from China - same chip family with less flash but more pins. You\'ll probably find it as \"Mini STM32\", \"Blue Pill\" / \"Red Pill\" (depending on the PCB color) or just the cheapest ARM board available. For pinout, schematic and other information, check <a href=\"https://developer.mbed.org/users/hudakz/code/STM32F103C8T6_Hello/\">Zoltan Hudak\'s blog article at mbed</a>.</p>\n<p><img src=\"/images/arm_boards.jpg\" alt=\"Collection of ARM boards\" title=\"NXP board to the left, Teensy in the center, STM32 everywhere else with the Blue Pill in the front\"></p>\n<p>From here on forward, it\'s assumed the cheapo China ARM board will be used. In theory, any other STM32F103 based board might do as well, but chances are there the hardware is not identical (e.g. if blinking a LED later on, the board\'s LED - if it has any - might be connected to a different microcontroller pin).</p>\n<h2>Connecting the board</h2>\n<p>Unlike AVR which uses SPI, or ESP8266 which uses UART, you will most likely need a <a href=\"https://en.wikipedia.org/wiki/JTAG\">JTAG</a> or <a href=\"https://en.wikipedia.org/wiki/JTAG#Serial_Wire_Debug\">SWD</a> debugger to eventually flash the firmware to your ARM board and optionally debug your program. In case of the previously mentioned cheap STM32F103 board, the choice is SWD.</p>\n<p>One option is to get a very generic debugger that supports both JTAG and SWD, like the <a href=\"https://www.olimex.com/Products/ARM/JTAG/ARM-USB-OCD-H/\">ARM-USB-OCD-H</a> with matching <a href=\"https://www.olimex.com/Products/ARM/JTAG/ARM-JTAG-SWD/\">SWD adapter</a>. A more higher end option (at least based on the price tag - although there is a very affordable non-commercial option for educational purposes available) can be found from <a href=\"https://www.segger.com/jlink-debug-probes.html\">Segger</a>. STMicroelectronics has the <a href=\"http://www.st.com/en/development-tools/st-link-v2.html\">ST-Link</a>, which you can get as cheap SWD-only clone from China in a small USB stick package. Coincidentally, the cheap clone will work well enough with the cheap STM32F103 board.</p>\n<p><img src=\"/images/arm_jtag_debuggers.jpg\" alt=\"JTAG and SWD debuggers\" title=\"Olimex ARM-USB-OCD-H with SWD adapter and a cheap ST-Link China clone\"></p>\n<p>The actual communication will happen via <a href=\"http://openocd.org/\">OpenOCD</a> which supports all JTAG/SWD debuggers mentioned so far (the Segger one is unconfirmed, but there\'s a config script for it, so it should work just fine). I personally have the Olimex and a ST-Link clone, so naturally I will use those.</p>\n<h2>Getting the software ready</h2>\n<p>Apart from <a href=\"http://openocd.org/\">OpenOCD</a>, we will look into <a href=\"https://github.com/libopencm3/libopencm3\">libopencm3</a> as general support library for ARM Cortex-M3, and use an ARM toolchain for compiling, linking and all that, as well as GDB for debugging. GDB isn\'t fully necessary, but it\'s really nice to have in my opinion, so I recommend installing that along the way (lots of fiddling around with the hardware later is done with GDB).</p>\n<h3>ARM Toolchain</h3>\n<p>Your distribution\'s package manager should have all you need: GCC, binutils and GDB. Again, GDB is optional, but thanks to JTAG and OpenOCD, we have an out-of-the-box debug interface readily available through GDB.</p>\n<p>If you have Ubuntu, you can install it all via</p>\n<pre class=\"lang-txt line-numbers\"><code>sudo apt-get install gcc-arm-none-eabi binutils-arm-none-eabi gdb-arm-none-eabi\n</code></pre>\n<p>The package names should be very similar if not identical on other Linux systems. If you\'re using the kind of distribution that doesn\'t have an ARM toolchain available from the package manager, you probably know how to get one.</p>\n<h3>OpenOCD</h3>\n<p>Again, OpenOCD is probably available from your Linux system\'s package manager. However, the available version might not be the latest one, which means in best case it\'s around 2 years old. It might not be a problem, the board and debuggers used in this article were already supported in the previous version (confirmed with 0.9.0, unknown for older versions). Either way, <a href=\"http://openocd.org/getting-openocd/\">check from here</a> if you want the latest version.</p>\n<p>Once installed, a few notes on how OpenOCD operates. OpenOCD is mainly a bridge between the microcontroller attached via JTAG/SWD and the actual debug interface. This can be GDB, a simple telnet connection or some Tcl RPC API (never tried that one).</p>\n<p>OpenOCD comes with a set of configuration files (<a href=\"https://en.wikipedia.org/wiki/Tcl\">Tcl</a> scripts, actually) for both the JTAG debug interface, and the target board / microcontroller. The location of those files depends on where either you or your system\'s package manager installed them to. One option could be <code>/usr/share/openocd/scripts/</code>. If you build OpenOCD manually and without installing it system-wide, the directory is called <code>tcl</code> instead of <code>scripts</code>in the OpenOCD source tree.</p>\n<p>There are other files as well, but for this article, only the <code>interface</code> and <code>target</code> directories inside the <code>scripts</code> (or <code>tcl</code>) directory are of interest. Have a look around in those directories and look into some files to get some idea what\'s going on.</p>\n<p>To set up OpenOCD properly, we\'ll need to run it with the matching configuration for our hardware setup:</p>\n<ul>\n<li><code>target/stm32f1x.cfg</code> for the STM32F103 based board</li>\n<li><code>interface/stlink-v2.cfg</code> if using the ST-Link clone</li>\n<li><code>interface/ftdi/olimex-arm-usb-ocd-h.cfg</code> and <code>interface/ftdi/olimex-arm-jtag-swd.cfg</code> if using the Olimex JTAG debugger + SWD adapter</li>\n</ul>\n<p>So to actually execute OpenOCD, you have to add each file with <code>-f</code> parameter:</p>\n<pre class=\"lang-txt line-numbers\"><code>openocd -f /path/to/scripts/interface/stlink-v2.cfg -f /path/to/scripts/target/stm32f1x.cfg\n</code></pre>\n<p>when using the ST-Link clone, and</p>\n<pre class=\"lang-txt line-numbers\"><code>openocd -f /path/to/scripts/interface/ftdi/olimex-arm-usb-ocd-h.cfg -f /path/to/scripts/interface/ftdi/olimex-arm-jtag-swd.cfg -f /path/to/scripts/target/stm32f1x.cfg\n</code></pre>\n<p>when using the Olimex ARM-USB-OCD-H + SWD adapter.</p>\n<p>Calling either of it at this point will fail - unless you actually connected the board to the JTAG debugger and powered it up. I\'ll come back to that later, for now, I\'ll finish the software installation part.</p>\n<h3>libopencm3</h3>\n<p>Check the <a href=\"https://github.com/libopencm3/libopencm3\">libopencm3 git repository</a> for installation instructions. I haven\'t looked into standalone setup yet, for now I just cloned it into <code>/opt/</code> and thought I can just point the GCC flags to it later.</p>\n<p>An easier starting point for now will be the <a href=\"https://github.com/libopencm3/libopencm3-examples\">libopencm3-examples repository</a>, which ships the library itself as submodule and comes with basic sample code for a variety of ARM devices. However, not for our cheap China board (unless I missed it). This is actually a good thing, as it gives us the opportunity to write our own example for it - based on an example for a similar device.</p>\n<p>But first, getting the example code, the libopencm3 submodule, and setting it all up.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ cd /path/to/wherever\n$ git clone https://github.com/libopencm3/libopencm3-examples.git\nCloning into &#39;libopencm3-examples&#39;...\n...\n$ cd libopencm3-examples\n$ git submodule init\nSubmodule &#39;libopencm3&#39; (https://github.com/libopencm3/libopencm3.git) registered for path &#39;libopencm3&#39;\n$ git submodule update\nCloning into &#39;libopencm3&#39;...\n...\n$ make\n...\n$\n</code></pre>\n<p>Hopefully it all went through without any errors, and the library and examples are all built. Feel free to have a look around the directories and example source code. We\'ll have a look at <code>examples/stm32/f1/</code> in a little while, but first, we should make sure the hardware and JTAG communication actually works</p>\n<h2>Hooking up JTAG</h2>\n<p>A little bit earlier, running OpenOCD failed, which was expected as it requires to actually communicate with the hardware to run successfully. So time to get that done.</p>\n<p>Since our board uses SWD, it\'s only four wires to connect, Vcc, GND, SWD clock and SWD data, which are conveniently routed to its own pin headers. For the ST-Link clone, it\'s easy to find those four pins as the printout is on the case itself. Only confusing part might be, which way to map the printout to the actual pins. In my case, there was an arrow on the connector pointing to pin number 1, but just in case, here\'s a picture:</p>\n<p><img src=\"/images/arm_jtag_wires_stlink.jpg\" alt=\"SWD connections for ST-Link\" title=\"Pin 1 marker visible on the connector\"></p>\n<table>\n<thead><tr>\n<th>Pin</th>\n<th>Color</th>\n<th>Signal</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>white</td>\n<td><code>SWCLK</code></td>\n<td>SWD Clock</td>\n</tr>\n<tr>\n<td>4</td>\n<td>green</td>\n<td><code>SWDIO</code></td>\n<td>SWD Data</td>\n</tr>\n<tr>\n<td>6</td>\n<td>black</td>\n<td><code>GND</code></td>\n<td>Ground</td>\n</tr>\n<tr>\n<td>8</td>\n<td>red</td>\n<td><code>3.3V</code></td>\n<td>Vcc, this will also act as supply voltage for the board itself</td>\n</tr>\n</tbody>\n</table>\n<p>For the Olimex JTAG/SWD adapter it will require a look at <a href=\"https://www.olimex.com/Products/ARM/JTAG/ARM-JTAG-SWD/resources/ARM-JTAG-SWD-schematic.pdf\">the adapter\'s schematic</a> to find the correct pins. And even then it\'s not that clear on first sight, so let me save you some trouble:</p>\n<p><img src=\"/images/arm_jtag_wires_olimex.jpg\" alt=\"SWD connections for Olimex ARM-USB-OCD-H\" title=\"Ground can go to any other pin on the bottom row, except the rightmost pin, pin number 2\"></p>\n<table>\n<thead><tr>\n<th>Pin</th>\n<th>Color</th>\n<th>Signal</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>red</td>\n<td><code>VCC</code></td>\n<td>Supply voltage sense, this is NOT a power supply pin!</td>\n</tr>\n<tr>\n<td>7</td>\n<td>green</td>\n<td><code>TMS_SWDIO</code></td>\n<td>SWD Data</td>\n</tr>\n<tr>\n<td>9</td>\n<td>white</td>\n<td><code>TCK</code></td>\n<td>SWD Clock</td>\n</tr>\n<tr>\n<td>4</td>\n<td>black</td>\n<td><code>GND</code></td>\n<td>Ground (also all other even numbered pins except pin 2)</td>\n</tr>\n</tbody>\n</table>\n<p>As you can see from both tables, the Vcc connection will act different on the programmers. While the ST-Link can provide both 3.3V and 5V voltages, the Olimex SWD adapter provides only 5V on pin 19 (<a href=\"https://www.olimex.com/Products/ARM/JTAG/ARM-JTAG-SWD/resources/ARM-JTAG-SWD-schematic.pdf\">see schematic</a>). Our board requires 3.3V (as the pin Vcc is connected to states), so the ST-Link can directly power it through the 3.3V pin. When using the Olimex programmer, it\'s probably easiest to just power the board through its USB connector.</p>\n<p>However, the board\'s 3.3V pin still needs to be connected to the Olimex programmer\'s pin 1 (VCC) as it is acting as a power detection input. Without this connection, OpenOCD won\'t be able to detect the board.</p>\n<h2>Hello Board</h2>\n<p>Finally, we should be able to establish a connection via OpenOCD to the board. I\'ll save you the scrolling and will just copy the OpenOCD command lines again. This time, it\'s assumed you\'re in the OpenOCD <code>scripts</code> directory (or <code>tcl</code> directory, see above), so the parameters are relative to that directory (easier to copy and paste I guess)</p>\n<p>ST-Link:</p>\n<pre class=\"lang-txt line-numbers\"><code>openocd -f ./interface/stlink-v2.cfg -f ./target/stm32f1x.cfg\n</code></pre>\n<p>Olimex ARM-USB-OCD-H + SWD adater:</p>\n<pre class=\"lang-txt line-numbers\"><code>openocd -f ./interface/ftdi/olimex-arm-usb-ocd-h.cfg -f ./interface/ftdi/olimex-arm-jtag-swd.cfg -f ./target/stm32f1x.cfg\n</code></pre>\n<p>Remember to power up the board through USB if you\'re using the Olimex programmer. With the ST-Link, you can also power the board through USB, but in that case it might be better to remove the 3.3V connection between the programmer and the board. Once powered up, the board\'s default program should make the red LED flash.</p>\n<p>If everything is set up properly, calling OpenOCD will give you some debug and info output - just like before as it failed, but this time it should not return back to the shell but keep running in the foreground. The output will look something like this:</p>\n<pre class=\"lang-txt line-numbers\"><code>Open On-Chip Debugger 0.10.0\nLicensed under GNU GPL v2\nFor bug reports, read\n    http://openocd.org/doc/doxygen/bugs.html\nInfo : FTDI SWD mode enabled\nadapter speed: 1000 kHz\nadapter_nsrst_delay: 100\nnone separate\ncortex_m reset_config sysresetreq\nInfo : clock speed 1000 kHz\nInfo : SWD DPIDR 0x1ba01477\nInfo : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints\n</code></pre>\n<h3>Well, now what?</h3>\n<p>Typing anything into the running OpenOCD instance doesn\'t seem to have any effect. Some time earlier I wrote how OpenOCD is basically just a bridge, so in that sense, it doesn\'t provide a direct way to interact with it. Instead, it provides three  network daemons on different ports:</p>\n<ul>\n<li>GDB server on port 3333</li>\n<li>telnet server on port 4444</li>\n<li>Tcl server on port 6666</li>\n</ul>\n<p>To make sure that\'s the case, <code>netstat</code> can confirm this, at least the ports:</p>\n<pre class=\"lang-txt line-numbers\"><code>$ sudo netstat -nltp |grep openocd\ntcp        0      0 0.0.0.0:6666            0.0.0.0:*               LISTEN      21001/openocd   \ntcp        0      0 0.0.0.0:4444            0.0.0.0:*               LISTEN      21001/openocd   \ntcp        0      0 0.0.0.0:3333            0.0.0.0:*               LISTEN      21001/openocd\n</code></pre>\n<p>As you can see, the listening address is <code>0.0.0.0</code>, i.e. \"any address available on this machine\", which means the OpenOCD instance is accessible through the network.</p>\n<p>If you prefer to keep the connections limited to localhost, you would need to add \"<code>bindto 127.0.0.1</code>\" to OpenOCD. You can do this with the <code>openocd -c &lt;cmd&gt;</code> parameter, or then add it to your own config script you add with the <code>-f</code> paremeter.</p>\n<pre class=\"lang-txt line-numbers\"><code>openocd -c &quot;bindto 127.0.0.1&quot; -f ./interface/stlink-v2.cfg -f ./target/stm32f1x.cfg\n</code></pre>\n<p>See also the <a href=\"http://openocd.org/doc/html/General-Commands.html\">OpenOCD user manual\'s \"General Commands\"</a>. To change the ports, have a look at the <a href=\"http://openocd.org/doc/html/Server-Configuration.html\">Server Configuration</a> chapter. And for anything else, well, <a href=\"http://openocd.org/doc/html/index.html\">the whole manual</a>.</p>\n<h3>Where was I...</h3>\n<p>Yes, by default, there\'s a telnet server running on port 4444, and a GDB server on port 3333. I\'m still going to ignore the Tcl interface, and will do so for the rest of this writing.</p>\n<p>Let\'s start with telnet. Open a second terminal and connect to the telnet server:</p>\n<pre class=\"lang-txt line-numbers\"><code>$ telnet localhost 4444\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is &#39;^]&#39;.\nOpen On-Chip Debugger\n&gt;\n</code></pre>\n<p>In the terminal your OpenOCD is running, you should see something like this:</p>\n<pre class=\"lang-txt line-numbers\"><code>Info : accepting &#39;telnet&#39; connection on tcp/4444\n</code></pre>\n<p>Great. Let\'s dump the register content with the <code>reg</code> command for no obvious reason, just to have some basic interaction with the hardware. But before we can do that, we need to halt the processor first, using the <code>halt</code> command.</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; halt\ntarget halted due to debug-request, current mode: Thread \nxPSR: 0x21000000 pc: 0x08000198 msp: 0x20000400\n</code></pre>\n<p>This already shows some of the registers\' content, namely the <em>Program Status Register</em> (xPSR), <em>Program Counter</em> (PC) and the <em>Stack Pointer</em> (MSP). Now, let\'s get the rest of them:</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; reg\n===== arm v7m registers\n(0) r0 (/32): 0x00006252\n(1) r1 (/32): 0x422201B4\n(2) r2 (/32): 0x40011000\n(3) r3 (/32): 0x10032000\n(4) r4 (/32): 0x080004CC\n(5) r5 (/32): 0x080004CC\n(6) r6 (/32): 0x8AA71453\n(7) r7 (/32): 0x395B32E8\n(8) r8 (/32): 0xFF7FEF97\n(9) r9 (/32): 0xFFFFBFFD\n(10) r10 (/32): 0xB666D97B\n(11) r11 (/32): 0xB63648FC\n(12) r12 (/32): 0x00002000\n(13) sp (/32): 0x20000400\n(14) lr (/32): 0x08000493\n(15) pc (/32): 0x08000198\n(16) xPSR (/32): 0x21000000\n(17) msp (/32): 0x20000400\n(18) psp (/32): 0xB6FFA7F0\n...\n</code></pre>\n<p>..and so on. Needless to say, your values may vary. And you should see the same response from the telnet session in the OpenOCD instance terminal.</p>\n<p>Play around if you want to, check the <code>help</code> command as a starting point and wade through the <a href=\"http://openocd.org/doc/html/index.html\">OpenOCD user manual</a>. For the purpose of this article, I\'ll be moving on to GDB now. Let\'s reset the processor and quit the telnet session</p>\n<pre class=\"lang-txt line-numbers\"><code>&gt; reset\n&gt; ^]\ntelnet&gt; quit\nConnection closed.\n$\n</code></pre>\n<p>That <code>^]</code> means pressing <code>CTRL + ]</code> to enter the telnet command line.</p>\n<h3>Connecting with GDB</h3>\n<p>You can use GDB from any architecture you want, but to get the best support - and also the correct registers and everything, you\'re better off using the ARM toolchain\'s version of GDB. In our case, <code>arm-none-eabi-gdb</code>.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ arm-none-eabi-gdb \nGNU gdb (7.10-1ubuntu3+9) 7.10\nCopyright (C) 2015 Free Software Foundation, Inc.\n...\nType &quot;apropos word&quot; to search for commands related to &quot;word&quot;.\n(gdb)\n</code></pre>\n<p>First, we need to connect to OpenOCD:</p>\n<pre class=\"lang-txt line-numbers\"><code>(gdb) target remote localhost:3333\nRemote debugging using localhost:3333\n0x00000000 in ?? ()\n(gdb)\n</code></pre>\n<p>Since we don\'t have any information on what\'s running on the board, we cannot do much useful with GDB at this point. Well, it clearly blinks the LED, and sure, we could analyze the program flow, but I\'ll keep that for later, when we\'re flashing our own blinking LED program. For now, let\'s just do the same we did in the telnet session: halt the processor and dump the register content.</p>\n<pre class=\"lang-txt line-numbers\"><code>(gdb) monitor reset halt\ntarget halted due to debug-request, current mode: Thread \nxPSR: 0x01000000 pc: 0x08000144 msp: 0x20000400\n(gdb) continue\nContinuing.\n^C\nProgram received signal SIGINT, Interrupt.\n0x08000198 in ?? ()\n(gdb) info registers\nr0             0xa63b3    680883\nr1             0x42220000    1109524480\nr2             0x40011000    1073811456\nr3             0x10032000    268640256\nr4             0x80004cc    134218956\nr5             0x80004cc    134218956\nr6             0x9aa7144b    -1700326325\nr7             0x395b33e8    962278376\nr8             0xff7fef97    -8392809\nr9             0xffffbffd    -16387\nr10            0xf6e6d97f    -152643201\nr11            0xb63648fc    -1237956356\nr12            0x2000    8192\nsp             0x20000400    0x20000400\nlr             0x80004ad    134218925\npc             0x8000198    0x8000198\nxPSR           0x21000000    553648128\n(gdb)\n</code></pre>\n<p>Also, since we\'re just running a random program here, we don\'t have any debug information or symbol table or anything at all available. It also seems there is no register data available without continuing the program first, and then interrupt it. There might be a more elegant way to do this, but this one will have to do now.</p>\n<p>If you\'re used to GDB, you definitely want to continue using it. If you\'re not familiar with GDB, I\'d say you should get familiar with it. Maybe start with <a href=\"http://openocd.org/doc/html/GDB-and-OpenOCD.html\">OpenOCD\'s user manual entry on GDB</a> and continue with any tutorial you\'ll find.</p>\n<p>On a side note, GDB commands can be heavily abbreviated. For example, when I wrote \"<code>info registers</code>\", \"<code>i r</code>\" would do the same. When I wrote \"<code>continue</code>\", \"<code>cont</code>\" or simply \"<code>c</code>\" would work as well. For the beginning, using the full commands is probably less confusing, but just for you to know.</p>\n<h2>Write me something</h2>\n<p>Now that the OpenOCD, JTAG programmer and other general basics have been at least somewhat covered, it\'s time to continue with the actual programming. Please note, this article won\'t provide much more deeper insight into any of these subjects. These basics alone result already in a way too long article that anyone would ever want to read, going further into details just seems like a waste of time. My intention is to have a basic all-round article with a few extra information here and there. I hope I can give enough pointers for you to know, what other information you may want to look for. The internet should provide plenty of resources on more focused subjects within these areas.</p>\n<p>Moving on.</p>\n<p>As I mentioned while installing the libopencm3 examples, our cheap China board won\'t have out-of-the-box support for any of the libopencm3 examples. For the purpose of education, I\'ll see this as a good thing. All I really want to do in this article, is to get the on-board LED blinking. The Hello World of microcontroller programming - toggling one simple pin.</p>\n<p>Some of the supported boards in the libopencm3 examples have a project called <em>miniblink</em> that is doing exactly that. Let\'s find them.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ cd /path/to/wherever/libopencm3-examples\n$ cd examples/stm32/f1\n$ find . -type d -name miniblink\n./waveshare-open103r/miniblink\n./stm32-h103/miniblink\n./stm32vl-discovery/miniblink\n./stm32-maple/miniblink\n</code></pre>\n<p>One of those four boards could provide us the base for our own board. I\'ll be choosing the stm32vl-discovery board for no real reason (maybe nostalgia, this was my first ARM board as far as I remember).</p>\n<p>Besides the <code>miniblink</code> code, we\'ll be needing a linker script. The ones in the examples only define RAM and ROM sizes, everything else is handled by a generic STM32F1 linker script. Let\'s use the <em>bluepill</em> name for the cheap China board, and copy the required files into a new directory inside the <code>stm32/f1/</code> example directory.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ mkdir bluepill\n$ cp stm32vl-discovery/stm32vl-discovery.ld bluepill/bluepill.ld\n$ mkdir bluepill/miniblink\n$ cp stm32vl-discovery/miniblink/Makefile bluepill/miniblink/\n$ cp stm32vl-discovery/miniblink/miniblink.c bluepill/miniblink/\n$ cd bluepill\n</code></pre>\n<p>Let\'s start by adjusting the linker script. Open <code>bluepill.ld</code> in your editor and adjust the <code>MEMORY</code> definition to match the STM32F103C8T6\'s 64kB of flash and 20kB of RAM.</p>\n<pre class=\"lang-clike line-numbers\"><code>MEMORY\n{\n    rom (rx)  : ORIGIN = 0x08000000, LENGTH = 64K\n    ram (rwx) : ORIGIN = 0x20000000, LENGTH = 20K\n}\n</code></pre>\n<p>The origin addresses will remain the same. Feel free to verify this by checking the device\'s memory map in the datasheet, where you will find <em>SRAM</em> section at address 0x20000000 and <em>Flash Memory</em> at address 0x08000000.</p>\n<p>Next, we\'ll look into the <code>minibink/Makefile</code>. Chances are we have to adjust a path or name to match our <code>bluepill</code> name. And yes, turns out it\'s the case for the linker script variable <code>LDSCRIPT</code>:</p>\n<pre class=\"lang-makefile line-numbers\"><code>LDSCRIPT = ../bluepill.ld\n</code></pre>\n<p>At this point, we can have a test run to see if everything is set up correct and, as a start, compilation will succeed. By default, libopencm3 builds very quietly, which means you won\'t get any output. Use the <code>V=1</code> parameter for <code>make</code> (or add it to your Makefile) to get a more verbose compilation process.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ make V=1\nUsing ../../../../../libopencm3/ path to library\narm-none-eabi-gcc -Os -std=c99 -g -mthumb -mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd -Wextra -Wshadow -Wimplicit-function-declaration -Wredundant-decls -Wmissing-prototypes -Wstrict-prototypes -fno-common -ffunction-sections -fdata-sections  -MD -Wall -Wundef -DSTM32F1 -I../../../../../libopencm3//include  -o miniblink.o -c miniblink.c\narm-none-eabi-gcc --static -nostartfiles -T../bluepill.ld -mthumb -mcpu=cortex-m3 -msoft-float -mfix-cortex-m3-ldrd -Wl,-Map=miniblink.map -Wl,--gc-sections -L../../../../../libopencm3//lib miniblink.o -lopencm3_stm32f1 -Wl,--start-group -lc -lgcc -lnosys -Wl,--end-group -o miniblink.elf\n</code></pre>\n<p>Great, looks like all is set up. Unfortunately we cannot flash this to our board and get the desired result. Time to get the code right.</p>\n<h3>Finally, some actual code!</h3>\n<p>Open the <code>bluepill/miniblink/miniblink.c</code> in your editor and have a look at it. As one would expect, pretty much all there is to do to get the LED blink is to initially set up the port as output, have a clock, and then periodically toggle the pin\'s state for all eternity.</p>\n<p>I like how the examples have comments of how to do the same thing by accessing the registers directly. Well yes, this shows how so much more convenient libopencm3 is in comparison, but it\'s also a great starting point to get down to that level. I should probably do that so this article can deserve the \"bare metal\" part in the title, this just seems high-level stuff now. Well.. I leave this as exercise to the reader.</p>\n<p>Regardless of the general comments in the code, it appears the STM32 Discovery board has its LED on pin <code>PA_1</code>, i.e. port A (<code>GPIOA</code>) pin 1 (<code>GPIO1</code>). A look at our board (<a href=\"https://developer.mbed.org/media/uploads/hudakz/stm32f103c8t6_schematic.png\">or the schematic</a>) will show, it has the on-board LED connected to pin <code>PC_13</code>. So all there is to do, is adjusting those values.</p>\n<p>For readability, I\'ll omit the original comments from the code now.</p>\n<pre class=\"lang-c line-numbers\"><code>#include &lt;libopencm3/stm32/rcc.h&gt;\n#include &lt;libopencm3/stm32/gpio.h&gt;\n\nstatic void gpio_setup(void)\n{\n    rcc_periph_clock_enable(RCC_GPIOC); /* was RCC_GPIOA */\n    gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ,\n              GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);\n}\n\nint main(void)\n{\n    int i;\n    gpio_setup();\n\n    while (1) {\n        gpio_toggle(GPIOC, GPIO13); /* LED on/off */\n        for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n            __asm__(&quot;nop&quot;);\n    }\n\n    return 0;\n}\n</code></pre>\n<p>Besides all the port and pin adjustments, I also reduced the loop counter value from 800000 to 200000 which will make it blink faster. I am very sure, the board\'s original program is the exact same original <em>miniblink</em> example, so making it blink faster will instantly show if our own program was really uploaded to the board.</p>\n<p>Speaking of which, let\'s compile this and do exactly that: flash it to the board. The libopencm3 examples work directly with OpenOCD, so there isn\'t anything to set up for this step. Except, well, having your OpenOCD instance still running.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ make\n$ make flash\n...\n** Verified OK **\n** Resetting Target **\n$\n</code></pre>\n<p>Your board\'s LED should now blink faster. If so, congratulations, you just wrote and flashed your first ARM program. Feel free to adjust the loop counter next and flash the new program again. If your setup is like mine, chances are it will fail to actually flash it, and timeout instead. Trying a second time to flash should succeed in that case. I didn\'t look into the reason for that yet, but wanted to mention it, so you won\'t have to panic if flashing suddenly doesn\'t work anymore.</p>\n<h2>Another look on the inside</h2>\n<p>Okay, it\'s been a long road, and we finally arrived somewhere with a result. You can be happy with that and call it a day. But now that we actually have the binary and all, I would like to get one last time into GDB. This time, calling it with our freshly compiled <code>miniblink.elf</code> file. Note, if anything feels like it\'s misbehaving - not being able to stop or continue execution, easiest solution might be to quite GDB, abort OpenOCD with CTRL+C, and maybe also power off the device and start over.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ arm-none-eabi-gdb miniblink.elf\n...\nReading symbols from miniblink.elf...done.\n(gdb) target remote localhost:3333\nRemote debugging using localhost:3333\n0x00000000 in ?? ()\n(gdb) c\nContinuing.\nWARNING! The target is already running. All changes GDB did to registers will be discarded! Waiting for target to halt.\n^C\nProgram received signal SIGINT, Interrupt.\n0x08000178 in main () at miniblink.c:66\n66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb)\n</code></pre>\n<p>Yes, we now have our source code included in GDB. Want to see what the current value for <code>i</code> is?</p>\n<pre class=\"lang-txt line-numbers\"><code>(gdb) print i\n$1 = 138927\n</code></pre>\n<p>There you go, it\'s 138927.</p>\n<p>Stepping one instruction at a time through the program for a while and looking again at the value of <code>i</code>:</p>\n<pre class=\"lang-txt line-numbers\"><code>(gdb) stepi\n67                              __asm__(&quot;nop&quot;);\n(gdb) \n66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n0x08000178      66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n67                              __asm__(&quot;nop&quot;);\n(gdb) \n66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n0x08000178      66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n67                              __asm__(&quot;nop&quot;);\n(gdb) print i\n$2 = 138929\n(gdb)\n</code></pre>\n<p>To shorten it, <code>si</code> will do the same. But if you simply press Enter without any new instruction, GDB will always use the last command. Also note that GDB creates new internal variables when you print a symbol. This means, <code>print $1</code> will display 138927, the value <code>i</code> had first time it was looked into. Again, your values most certainly will differ.</p>\n<p>Now, in theory we should be able to not only read, but also assign a value to the variable. Unfortunately trying so with a variable not declared <code>volatile</code> will not work. Not sure if this is ARM related or because it\'s remote debugging or something completely different.</p>\n<p>But we can modify register content. Let\'s see if our counter variable <code>i</code> is stored in one</p>\n<pre class=\"lang-txt line-numbers\"><code>(gdb) info reg\nr0             0x40011000       1073811456\nr1             0x20000000       536870912\nr2             0x2000   8192\nr3             0xee8f   61071\nr4             0x80002a8        134218408\nr5             0xdb7ffef3       -612368653\nr6             0x8aa71c43       -1968759741\nr7             0x395b33e8       962278376\nr8             0xff7fef97       -8392809\nr9             0xffffbffd       -16387\nr10            0xf666d97b       -161031813\nr11            0xb63648fc       -1237956356\nr12            0x2000   8192\nsp             0x20004ff8       0x20004ff8\nlr             0x8000173        134218099\npc             0x8000174        0x8000174 &lt;main+36&gt;\nxPSR           0x21000000       553648128\n(gdb)\n</code></pre>\n<p>This shows the register names, the hexadecimal value and the decimal value. None of these values are 138929 though. But let\'s see what happens if we have another cycle or two with single step instructions and check again.</p>\n<pre class=\"lang-txt line-numbers\"><code>(gdb) si\n66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n0x08000178      66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n67                              __asm__(&quot;nop&quot;);\n(gdb) \n66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n0x08000178      66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n67                              __asm__(&quot;nop&quot;);\n(gdb) print i\n$4 = 138931\n(gdb) info reg\nr0             0x40011000       1073811456\nr1             0x20000000       536870912\nr2             0x2000   8192\nr3             0xee8d   61069\nr4             0x80002a8        134218408\nr5             0xdb7ffef3       -612368653\nr6             0x8aa71c43       -1968759741\nr7             0x395b33e8       962278376\nr8             0xff7fef97       -8392809\nr9             0xffffbffd       -16387\nr10            0xf666d97b       -161031813\nr11            0xb63648fc       -1237956356\nr12            0x2000   8192\nsp             0x20004ff8       0x20004ff8\nlr             0x8000173        134218099\npc             0x8000174        0x8000174 &lt;main+36&gt;\nxPSR           0x21000000       553648128\n</code></pre>\n<p>Well, we incremented <code>i</code> two more times, and if we compare the register values, register <code>r3</code> was decreased by two. And if we add <code>i</code> and <code>r3</code>, we actually end up with 200000, our loop counter value. It simply counts in the other direction to eventually compare with zero - which makes sense, processors usually have an instruction to compare against zero.</p>\n<h3>One final trick</h3>\n<p>The CPU is currently halted and (in my case) the LED is on. The LED might be off in your case, that doesn\'t matter. Let\'s toggle it from inside GDB.</p>\n<p>So we found out we cannot set <code>i</code> directly, but register <code>r3</code> is used to store its value. Once the register value is zero, the loop will end. Right now, this would take anoter 61069 cycles. Let\'s speed that up by setting <code>r3</code> to one. Setting it to zero might be more logical, but this won\'t update the status register that is required for the zero comparison check.</p>\n<pre class=\"lang-txt line-numbers\"><code>(gdb) set $r3 = 1\n(gdb) info reg r3\nr3             0x1      1\n(gdb)\n</code></pre>\n<p>The last instruction was the <code>nop</code> assembly code, next is the for loop check, so let\'s see how the execution goes after that.</p>\n<pre class=\"lang-txt line-numbers\"><code>(gdb) si\n66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n0x08000178      66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n0x0800017a      66                      for (i = 0; i &lt; 200000; i++)    /* Wait a bit. */\n(gdb) \n65                      gpio_toggle(GPIOC, GPIO13);     /* LED on/off */\n(gdb) \n0x0800016a      65                      gpio_toggle(GPIOC, GPIO13);     /* LED on/off */\n(gdb) \n0x0800016e      65                      gpio_toggle(GPIOC, GPIO13);     /* LED on/off */\n(gdb) \ngpio_toggle (gpioport=gpioport@entry=1073811456, gpios=gpios@entry=8192) at ../common/gpio_common_all.c:88\n88              uint32_t port = GPIO_ODR(gpioport);\n(gdb) \n89              GPIO_BSRR(gpioport) = ((port &amp; gpios) &lt;&lt; 16) | (~port &amp; gpios);\n(gdb) \n0x080001ee      89              GPIO_BSRR(gpioport) = ((port &amp; gpios) &lt;&lt; 16) | (~port &amp; gpios);\n(gdb) \n0x080001f0      89              GPIO_BSRR(gpioport) = ((port &amp; gpios) &lt;&lt; 16) | (~port &amp; gpios);\n(gdb) \n0x080001f4      89              GPIO_BSRR(gpioport) = ((port &amp; gpios) &lt;&lt; 16) | (~port &amp; gpios);\n(gdb) \n0x080001f6      89              GPIO_BSRR(gpioport) = ((port &amp; gpios) &lt;&lt; 16) | (~port &amp; gpios);\n(gdb)\n</code></pre>\n<p>At this point the LED will turn off (or back on).</p>\n<p>The duplicate source code lines shown here are caused by C code simply using multiple assembly instructions. To see what\'s happening deeper, check the <code>disassemble</code> (<code>disas</code>) command to, eh, disassemble the code. Which, by the way, would have instantly shown that register <code>r3</code> is indeed used to store the loop counter. Oh well..</p>\n<p>But let\'s say we want to avoid the register <code>r3</code> manipulation all together and instead force the program counter register <code>pc</code> straight to the <code>gpio_toggle()</code> function. As we can see from the output above, the <code>gpio_toggle()</code> call happens around address 0x0800016a, so let\'s see what we got there. It will actually display data for the whole function the memory address is part of, in this case <code>main()</code>, so let\'s focus on the interesting part. Note, using <code>/m</code> will display the C code next to it, see <code>help disas</code> for more info.</p>\n<pre class=\"lang-txt line-numbers\"><code>(gdb) disas /m 0x0800016a\n...\n65                      gpio_toggle(GPIOC, GPIO13);     /* LED on/off */\n   0x08000168 &lt;+24&gt;:    ldr     r0, [pc, #16]   ; (0x800017c &lt;main+44&gt;)\n   0x0800016a &lt;+26&gt;:    mov.w   r1, #8192       ; 0x2000\n   0x0800016e &lt;+30&gt;:    bl      0x80001e8 &lt;gpio_toggle&gt;\n   0x08000172 &lt;+34&gt;:    ldr     r3, [pc, #12]   ; (0x8000180 &lt;main+48&gt;)\n...\n(gdb)\n</code></pre>\n<p>The actual branch call to <code>gpio_toggle()</code> is at address 0x0800016e, but setting the program counter to that address won\'t do anything to the LED, since the LED port itself is given as parameter. The parameter is set in 0x800016a (I didn\'t look too deep into it, I would expect two parameters to be loaded, but that\'s not the case). Here we go:</p>\n<pre class=\"lang-txt line-numbers\"><code>(gdb) set $pc = 0x800016a\n(gdb) si\n0x0800016e      65                      gpio_toggle(GPIOC, GPIO13);     /* LED on/off */\n(gdb) \ngpio_toggle (gpioport=gpioport@entry=1073811456, gpios=gpios@entry=8192) at ../common/gpio_common_all.c:88\n88              uint32_t port = GPIO_ODR(gpioport);\n(gdb) \n89              GPIO_BSRR(gpioport) = ((port &amp; gpios) &lt;&lt; 16) | (~port &amp; gpios);\n(gdb) \n0x080001ee      89              GPIO_BSRR(gpioport) = ((port &amp; gpios) &lt;&lt; 16) | (~port &amp; gpios);\n(gdb) \n0x080001f0      89              GPIO_BSRR(gpioport) = ((port &amp; gpios) &lt;&lt; 16) | (~port &amp; gpios);\n(gdb) \n0x080001f4      89              GPIO_BSRR(gpioport) = ((port &amp; gpios) &lt;&lt; 16) | (~port &amp; gpios);\n(gdb) \n0x080001f6      89              GPIO_BSRR(gpioport) = ((port &amp; gpios) &lt;&lt; 16) | (~port &amp; gpios);\n(gdb)\n</code></pre>\n<p>Yep, LED goes on/off here. Doing this multiple times in a row will always toggle the LED, so feel free to actually try it with 0x0800016e as program counter value to see, nothing will happen in that case. And if you keep on stepping the single instruction, it will always return to the counter. Of course, with such a simple program, there aren\'t too many side effects. Things will be different in a more complex program (especially with code size optimization, I could assume), so careful with wildly writing into registers.</p>\n<h2>Last words</h2>\n<p>Phew, what a journey. But well, while in the end, all we got was a blinking LED (which we already had as default program on the board), all the main parts that are needed to continue from here were basically covered, and I hope this was a good start for further explorations.</p>\n<h3>Continuing from here</h3>\n<p>Yeah, don\'t worry, nothing will continue in this article anymore. As for myself, I will continue with libopencm3 and their examples for a while, maybe starting with SPI or UART. I know I will reach the library\'s limits eventually and have to get to vendor specific implementations and meet the <a href=\"https://www.arm.com/products/processors/cortex-m/cortex-microcontroller-software-interface-standard.php\">Cortex Microcontroller Software Interface Standard (CMSIS)</a>, which I purposely haven\'t even mentioned here.</p>\n','2017-05-27 01:25:40',1,1);
/*!40000 ALTER TABLE `blog_entry` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_tag`
--

DROP TABLE IF EXISTS `blog_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL,
  `link` varchar(64) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `link` (`link`)
) ENGINE=MyISAM AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_tag`
--

LOCK TABLES `blog_tag` WRITE;
/*!40000 ALTER TABLE `blog_tag` DISABLE KEYS */;
INSERT INTO `blog_tag` VALUES (1,'AVR','avr'),(2,'ATmega','atmega'),(3,'ATtiny','attiny'),(4,'LEDs','leds'),(5,'4chord MIDI','4chord-midi'),(6,'Battletray','battletray'),(7,'protoboard','protoboard'),(8,'avrdude','avrdude'),(9,'GSM','gsm'),(10,'GPRS','gprs'),(11,'SIM800L','sim800l'),(12,'ESP8266','esp8266'),(13,'IoT','iot'),(14,'Python','python'),(15,'LCD','lcd'),(16,'Analysis','analysis'),(17,'Optimization','optimization'),(18,'ARM','arm'),(19,'Cortex-M','cortexm'),(20,'JTAG','jtag'),(21,'GDB','gdb'),(22,'Bluetooth','bluetooth');
/*!40000 ALTER TABLE `blog_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_tag_map`
--

DROP TABLE IF EXISTS `blog_tag_map`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_tag_map` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `blog_entry_id` int(11) NOT NULL,
  `blog_tag_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `tag_map` (`blog_entry_id`,`blog_tag_id`),
  KEY `blog_tag_id` (`blog_tag_id`)
) ENGINE=MyISAM AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_tag_map`
--

LOCK TABLES `blog_tag_map` WRITE;
/*!40000 ALTER TABLE `blog_tag_map` DISABLE KEYS */;
INSERT INTO `blog_tag_map` VALUES (1,1,1),(2,1,2),(3,1,4),(4,1,6),(5,2,7),(6,2,1),(7,2,2),(8,2,8),(9,3,9),(10,3,10),(11,3,11),(12,4,12),(13,5,12),(14,5,13),(15,5,14),(16,6,1),(17,6,2),(18,6,15),(19,7,1),(20,7,2),(21,7,3),(22,7,15),(23,7,16),(24,7,17),(25,8,18),(26,8,19),(27,8,20),(28,8,21),(29,9,1),(30,9,2),(31,9,22);
/*!40000 ALTER TABLE `blog_tag_map` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `news`
--

DROP TABLE IF EXISTS `news`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `news` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` varchar(100) NOT NULL,
  `created` datetime NOT NULL,
  `published` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `news`
--

LOCK TABLES `news` WRITE;
/*!40000 ALTER TABLE `news` DISABLE KEYS */;
/*!40000 ALTER TABLE `news` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `project`
--

DROP TABLE IF EXISTS `project`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `project` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `link` varchar(100) NOT NULL,
  `description` varchar(200) NOT NULL,
  `image` varchar(100) NOT NULL,
  `start_page` int(11) DEFAULT '-1',
  `blog_tag_link` varchar(100) DEFAULT '',
  `github` varchar(100) DEFAULT NULL,
  `hackaday` varchar(100) DEFAULT NULL,
  `twitter` varchar(100) DEFAULT NULL,
  `other_links` tinyint(1) DEFAULT '0',
  `published` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `link` (`link`),
  UNIQUE KEY `link_2` (`link`)
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `project`
--

LOCK TABLES `project` WRITE;
/*!40000 ALTER TABLE `project` DISABLE KEYS */;
INSERT INTO `project` VALUES (1,'4chord MIDI','4chord-midi','The 4 Chord USB MIDI keyboard. Play all those hit pop songs using the infamous four chord progression (I-V-vi-IV) with just a press of a few buttons.','project-list-4chord-midi.jpg',1,'','4chord-midi','26078-4chord-midi','',1,1),(2,'Battletray','battletray','RGB LEDs in a shot glass tray. Have some nice, colorful party lighting, or turn the tray into a drinking game as simple and effective as a round of Heads or Tails.','project-list-battletray.jpg',2,'','battletray','','',0,0),(3,'Roameo','roameo','The \"fitness tracker\" Android app that counts your steps you\'re walking while roaming around like a maniac during phone calls. Collect statistics for yourself or upload them to Google Fit.','roameo-phone.jpg',6,'','Roameo','','',1,1);
/*!40000 ALTER TABLE `project` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `project_link`
--

DROP TABLE IF EXISTS `project_link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `project_link` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `project_id` int(11) NOT NULL,
  `link_type_id` int(11) NOT NULL,
  `title` varchar(100) NOT NULL,
  `url` varchar(200) NOT NULL,
  `weight` int(11) NOT NULL DEFAULT '99',
  PRIMARY KEY (`id`),
  KEY `project_id` (`project_id`),
  KEY `link_type_id` (`link_type_id`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `project_link`
--

LOCK TABLES `project_link` WRITE;
/*!40000 ALTER TABLE `project_link` DISABLE KEYS */;
INSERT INTO `project_link` VALUES (1,3,1,'Official website','http://roameo.craplab.fi',1),(2,3,1,'Google Play','https://play.google.com/store/apps/details?id=fi.craplab.roameo',2),(3,1,3,'Introduction video','https://www.youtube.com/watch?v=ST9YMk_YUhk',10),(4,1,1,'Hackaday article','http://hackaday.com/2017/07/28/four-chords-should-be-enough-for-anyone/',20);
/*!40000 ALTER TABLE `project_link` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `project_link_type`
--

DROP TABLE IF EXISTS `project_link_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `project_link_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  `icon_type` varchar(10) DEFAULT NULL,
  `icon` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `project_link_type`
--

LOCK TABLES `project_link_type` WRITE;
/*!40000 ALTER TABLE `project_link_type` DISABLE KEYS */;
INSERT INTO `project_link_type` VALUES (1,'web','fa','globe'),(2,'oshpark','fsg','oshpark'),(3,'youtube','fa','youtube-play'),(4,'soundcloud','fa','soundcloud');
/*!40000 ALTER TABLE `project_link_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `project_page`
--

DROP TABLE IF EXISTS `project_page`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `project_page` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `project_id` int(11) NOT NULL,
  `title` varchar(100) NOT NULL,
  `link` varchar(100) NOT NULL,
  `weight` int(11) NOT NULL DEFAULT '99',
  `modified` datetime NOT NULL,
  `published` tinyint(1) DEFAULT '0',
  `content` text NOT NULL,
  `parsed` text NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `project_link` (`project_id`,`link`)
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `project_page`
--

LOCK TABLES `project_page` WRITE;
/*!40000 ALTER TABLE `project_page` DISABLE KEYS */;
INSERT INTO `project_page` VALUES (1,1,'Overview','overview',1,'2016-03-10 22:14:13',1,'#4 Chord USB MIDI Keyboard\r\n\r\n![4chord MIDI board](/images/project-4chord-midi-overview.jpg \"Assembeld 4chord MIDI PCB revision A\")\r\n\r\n4chord MIDI is a USB MIDI keyboard to simply play the four chords of the [I-V-vi-IV progression](https://en.wikipedia.org/wiki/I%E2%80%93V%E2%80%93vi%E2%80%93IV_progression). Why? Because [The Axis of Awesome made it clear](https://www.youtube.com/watch?v=5pidokakU4I), all it takes to make a hit pop song is those four chords.\r\n\r\n4chord MIDI functions like a regular USB MIDI controller just like any other MIDI keyboard, except it has only four playback buttons - and of course additional buttons and a LCD as user interface to adjust the playback. Playing just the chords as triads is a bit limiting after all.\r\n\r\n## Features\r\n\r\n4chord MIDI is under active development and therefore new features will come.\r\nAs of right now, the following features are already implemented:\r\n\r\n- I-V-vi-IV chord progression in any key\r\n- Chord, arpeggio and mixed playback modes\r\n- Arpeggio playback in any tempo from 30bpm to 240bpm\r\n- User interface to selected key, mode and tempo\r\n\r\n## Details\r\n4chord MIDI is built around an ATmega328 microcontroller with custom firmware using [V-USB](https://www.obdev.at/products/vusb/index.html). A Nokia 3310 LCD and three buttons serve as user interface. The PCB is credit card sized, uses SMD components and is directly powered from USB, so no extra power supply needed.\r\n\r\nSee the [Technical Details page](/projects/4chord-midi/details) for further information on hardware and firmware.\r\n\r\n## License\r\n4chord MIDI is fully open. The hardware is licensed under the [CERN Open Hardware License v.1.2](http://www.ohwr.org/projects/cernohl/wiki) and the software is released under the [GNU General Public License version 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html).','<h1>4 Chord USB MIDI Keyboard</h1>\n<p><img src=\"/images/project-4chord-midi-overview.jpg\" alt=\"4chord MIDI board\" title=\"Assembeld 4chord MIDI PCB revision A\"></p>\n<p>4chord MIDI is a USB MIDI keyboard to simply play the four chords of the <a href=\"https://en.wikipedia.org/wiki/I%E2%80%93V%E2%80%93vi%E2%80%93IV_progression\">I-V-vi-IV progression</a>. Why? Because <a href=\"https://www.youtube.com/watch?v=5pidokakU4I\">The Axis of Awesome made it clear</a>, all it takes to make a hit pop song is those four chords.</p>\n<p>4chord MIDI functions like a regular USB MIDI controller just like any other MIDI keyboard, except it has only four playback buttons - and of course additional buttons and a LCD as user interface to adjust the playback. Playing just the chords as triads is a bit limiting after all.</p>\n<h2>Features</h2>\n<p>4chord MIDI is under active development and therefore new features will come.\nAs of right now, the following features are already implemented:</p>\n<ul>\n<li>I-V-vi-IV chord progression in any key</li>\n<li>Chord, arpeggio and mixed playback modes</li>\n<li>Arpeggio playback in any tempo from 30bpm to 240bpm</li>\n<li>User interface to selected key, mode and tempo</li>\n</ul>\n<h2>Details</h2>\n<p>4chord MIDI is built around an ATmega328 microcontroller with custom firmware using <a href=\"https://www.obdev.at/products/vusb/index.html\">V-USB</a>. A Nokia 3310 LCD and three buttons serve as user interface. The PCB is credit card sized, uses SMD components and is directly powered from USB, so no extra power supply needed.</p>\n<p>See the <a href=\"/projects/4chord-midi/details\">Technical Details page</a> for further information on hardware and firmware.</p>\n<h2>License</h2>\n<p>4chord MIDI is fully open. The hardware is licensed under the <a href=\"http://www.ohwr.org/projects/cernohl/wiki\">CERN Open Hardware License v.1.2</a> and the software is released under the <a href=\"http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html\">GNU General Public License version 2</a>.</p>\n'),(2,2,'Overview','overview',1,'2016-03-21 20:15:51',1,'No content yet','No content yet'),(3,1,'Status and Roadmap','status',2,'2016-03-26 20:11:13',1,'#Status and Roadmap\r\n\r\n![4chord MIDI board](/images/project-4chord-midi-status.jpg \"First batch of revision A PCBs from OSH Park\")\r\n\r\n## Status\r\n\r\nThe first hardware revision A is done and proven and work, firmware version 1.0 is officially done as well. PCB design and sources can be found on Github.\r\n\r\n### Hardware Revision A\r\n* Credit card sized PCB layout\r\n* ATmega328P TQFP32 microcontroller running at 16MHz\r\n* Nokia 3310 LCD with backlight connected via SPI\r\n* USB powered with 3.3V voltage regulator\r\n* Three button menu interface\r\n* Four button chord playback\r\n* UART interface\r\n* 10-pin ISP interface\r\n\r\n### Firmware Version 1.0\r\n* MIDI message handling for note on/off commands for each playback key\r\n* Hardware timer based tempo handling for arpeggio and mixed mode playback\r\n* Graphical user interface to display current playback key, mode and tempo\r\n* UART command line interface to emulate button press (38400 8N1)\r\n* USB and MIDI message handling via V-USB\r\n\r\n### Additional Tools\r\nFor easier development, I created some additional tools:\r\n* XBM images to C char arrays conversion tool for easier UI design\r\n* ATmega328P fuse dump tool to output human readable fuse settings\r\n\r\n## Roadmap\r\n\r\nFuture development plans involve both the PCB and the firmware.\r\n\r\n### PCB\r\nWhile functional, the PCB requires some improvements.\r\n\r\n#### LCD Backlight\r\nRevision A includes connectors to add a backlight to the Nokia 3310 LCD. Unfortunately, due to mechanical factors, it is not possible to attach it. The connector cable for the LCD is too short to properly fit it to the connector and place the rather high backlight under it.\r\n\r\nMoving the LCD connector closer towards the PCB edge might be a solution worth trying as a backlight would come in very handy. Otherwise the whole PCB would require a redesign to place the connector on the front side, which I prefer to avoid.\r\n\r\n#### Crystal Oscillator\r\nCurrently the microcontroller is running at 16MHZ, which is within specification when running at 5V. However, since the LCD uses 3.3V, the whole PCB is powered with a 3.3V regulator, which technically is out of spec for 16MHz. Although it appears to run without problems so far, I feel more comfortably not to overclock the controller.\r\n\r\nAdditionally, when I first sourced the components, I ended up with a crystal with rather odd form factors that might not be easily found somewhere else. I\'d prefer a more common form factor.\r\n\r\n### Firmware\r\n\r\nVersion 1.0 features many under the hood basics that can be used to further extend the playback and mode handling functionality. The actual playback is a bit limiting still at this point, so work will be focused on improvements on that side, i.e. adding more playback modes for different metres and notes\r\n\r\nUltimately I will add a configuration method to user-define playback modes, keys, predefined tempos and all in all make 4chord MIDI adjustable for everyone\'s own personal taste.\r\n','<h1>Status and Roadmap</h1>\n<p><img src=\"/images/project-4chord-midi-status.jpg\" alt=\"4chord MIDI board\" title=\"First batch of revision A PCBs from OSH Park\"></p>\n<h2>Status</h2>\n<p>The first hardware revision A is done and proven and work, firmware version 1.0 is officially done as well. PCB design and sources can be found on Github.</p>\n<h3>Hardware Revision A</h3>\n<ul>\n<li>Credit card sized PCB layout</li>\n<li>ATmega328P TQFP32 microcontroller running at 16MHz</li>\n<li>Nokia 3310 LCD with backlight connected via SPI</li>\n<li>USB powered with 3.3V voltage regulator</li>\n<li>Three button menu interface</li>\n<li>Four button chord playback</li>\n<li>UART interface</li>\n<li>10-pin ISP interface</li>\n</ul>\n<h3>Firmware Version 1.0</h3>\n<ul>\n<li>MIDI message handling for note on/off commands for each playback key</li>\n<li>Hardware timer based tempo handling for arpeggio and mixed mode playback</li>\n<li>Graphical user interface to display current playback key, mode and tempo</li>\n<li>UART command line interface to emulate button press (38400 8N1)</li>\n<li>USB and MIDI message handling via V-USB</li>\n</ul>\n<h3>Additional Tools</h3>\n<p>For easier development, I created some additional tools:</p>\n<ul>\n<li>XBM images to C char arrays conversion tool for easier UI design</li>\n<li>ATmega328P fuse dump tool to output human readable fuse settings</li>\n</ul>\n<h2>Roadmap</h2>\n<p>Future development plans involve both the PCB and the firmware.</p>\n<h3>PCB</h3>\n<p>While functional, the PCB requires some improvements.</p>\n<h4>LCD Backlight</h4>\n<p>Revision A includes connectors to add a backlight to the Nokia 3310 LCD. Unfortunately, due to mechanical factors, it is not possible to attach it. The connector cable for the LCD is too short to properly fit it to the connector and place the rather high backlight under it.</p>\n<p>Moving the LCD connector closer towards the PCB edge might be a solution worth trying as a backlight would come in very handy. Otherwise the whole PCB would require a redesign to place the connector on the front side, which I prefer to avoid.</p>\n<h4>Crystal Oscillator</h4>\n<p>Currently the microcontroller is running at 16MHZ, which is within specification when running at 5V. However, since the LCD uses 3.3V, the whole PCB is powered with a 3.3V regulator, which technically is out of spec for 16MHz. Although it appears to run without problems so far, I feel more comfortably not to overclock the controller.</p>\n<p>Additionally, when I first sourced the components, I ended up with a crystal with rather odd form factors that might not be easily found somewhere else. I\'d prefer a more common form factor.</p>\n<h3>Firmware</h3>\n<p>Version 1.0 features many under the hood basics that can be used to further extend the playback and mode handling functionality. The actual playback is a bit limiting still at this point, so work will be focused on improvements on that side, i.e. adding more playback modes for different metres and notes</p>\n<p>Ultimately I will add a configuration method to user-define playback modes, keys, predefined tempos and all in all make 4chord MIDI adjustable for everyone\'s own personal taste.</p>\n'),(6,3,'Overview','overview',1,'2017-06-17 23:57:02',1,'# Roameo\r\n\r\nRoameo is an Android app that counts your walked steps while talking on the phone.\r\nTo quote the description from its [official website](http://roameo.craplab.fi):\r\n\r\n*Roameo is the one missing fitness tracker for the physical inactive. Is roaming through the rooms like a maniac while being on the phone the only workout you get? Roameo will track your step count so you can share it with the world. Don\'t miss out anymore to tell your friends about your awesome sportiness!*\r\n\r\nWell, yeah, that pretty much describes me.\r\n\r\n## Some history\r\n\r\nI do indeed pace and roam around a lot while talking on the phone. I could sit down completely calm and relaxed, and as soon as I was on the phone, I had the urge to get up and walk around. I know I\'m not alone with that.\r\n\r\nAt some point, I had a work gig at a company that creates sport and fitness tracking equipment, with all the app and web services to analyze your training and workouts and all around it. Naturally, I wondered what it would take to sneak \"Phone call\" as a sport / workout type into their system, but the code review process would make that rather difficult. So instead, I decided I\'ll create my own app that records the step count during phone calls and lets you upload it as session to [Google Fit](https://www.google.com/fit/).\r\n\r\nProject *Ringstagram* was born and eventually (well, actually very soon after) renamed to *Roameo*.\r\n\r\nI did present the app to said company though, they didn\'t make me an acquisition offer. But, and that was my main intention, neither did they had any issues with me publishing such an app.\r\n\r\n## In a nutshell\r\n\r\nSo what is Roameo doing exactly? Again, let me quote the description [from its website](http://roameo.craplab.fi) ..and technically quote myself then I guess.\r\n\r\n*Roameo will detect incoming and outgoing phone calls and utilizes the phone\'s step count sensor to keep track of your walking around. All call sessions are individually accessible for minute by minute step count break down and can be shared to social media and messaging apps on your phone - or optionally uploaded to Google Fit. A weekly summary of all call sessions and the daily achieved step count, session duration and average pace (i.e. steps per minute) is graphically displayed for you.*\r\n\r\nThis is how this looks like in practice, and in very small size:\r\n\r\n![Roameo app summary part one](/images/roameo-app-summary-a.jpg \"The main menu, a call session detail page, and the notification bar after ending a call.\")\r\n\r\n![Roameo app summary part two](/images/roameo-app-summary-b.jpg \"Weekly statistics of step count, duration, and pace (steps per minute). Each day\'s call session list is shown on touching the day value in the graph, and each session\'s details are opened when touching it from the list.\")\r\n\r\n## License\r\n\r\nThe [Roameo source code](https://github.com/sgreg/Roameo) is released under the [GNU General Public License version 2](http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html). ','<h1>Roameo</h1>\n<p>Roameo is an Android app that counts your walked steps while talking on the phone.\nTo quote the description from its <a href=\"http://roameo.craplab.fi\">official website</a>:</p>\n<p><em>Roameo is the one missing fitness tracker for the physical inactive. Is roaming through the rooms like a maniac while being on the phone the only workout you get? Roameo will track your step count so you can share it with the world. Don\'t miss out anymore to tell your friends about your awesome sportiness!</em></p>\n<p>Well, yeah, that pretty much describes me.</p>\n<h2>Some history</h2>\n<p>I do indeed pace and roam around a lot while talking on the phone. I could sit down completely calm and relaxed, and as soon as I was on the phone, I had the urge to get up and walk around. I know I\'m not alone with that.</p>\n<p>At some point, I had a work gig at a company that creates sport and fitness tracking equipment, with all the app and web services to analyze your training and workouts and all around it. Naturally, I wondered what it would take to sneak \"Phone call\" as a sport / workout type into their system, but the code review process would make that rather difficult. So instead, I decided I\'ll create my own app that records the step count during phone calls and lets you upload it as session to <a href=\"https://www.google.com/fit/\">Google Fit</a>.</p>\n<p>Project <em>Ringstagram</em> was born and eventually (well, actually very soon after) renamed to <em>Roameo</em>.</p>\n<p>I did present the app to said company though, they didn\'t make me an acquisition offer. But, and that was my main intention, neither did they had any issues with me publishing such an app.</p>\n<h2>In a nutshell</h2>\n<p>So what is Roameo doing exactly? Again, let me quote the description <a href=\"http://roameo.craplab.fi\">from its website</a> ..and technically quote myself then I guess.</p>\n<p><em>Roameo will detect incoming and outgoing phone calls and utilizes the phone\'s step count sensor to keep track of your walking around. All call sessions are individually accessible for minute by minute step count break down and can be shared to social media and messaging apps on your phone - or optionally uploaded to Google Fit. A weekly summary of all call sessions and the daily achieved step count, session duration and average pace (i.e. steps per minute) is graphically displayed for you.</em></p>\n<p>This is how this looks like in practice, and in very small size:</p>\n<p><img src=\"/images/roameo-app-summary-a.jpg\" alt=\"Roameo app summary part one\" title=\"The main menu, a call session detail page, and the notification bar after ending a call.\"></p>\n<p><img src=\"/images/roameo-app-summary-b.jpg\" alt=\"Roameo app summary part two\" title=\"Weekly statistics of step count, duration, and pace (steps per minute). Each day&#39;s call session list is shown on touching the day value in the graph, and each session&#39;s details are opened when touching it from the list.\"></p>\n<h2>License</h2>\n<p>The <a href=\"https://github.com/sgreg/Roameo\">Roameo source code</a> is released under the <a href=\"http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html\">GNU General Public License version 2</a>.</p>\n'),(4,1,'Musical Details','musical-details',4,'2016-03-26 20:12:09',1,'# Musical Details\r\n![4chord MIDI board](/images/project-4chord-midi-music-details.jpg \"4chord MIDI user interface\")\r\n## Playback keys\r\n\r\n4chord MIDI provides playback in any chosen key. At this point, the pitch is however hard coded. The long-term goal is to make this user-definable, but at this point the following chords are used with each key:\r\n\r\nKey | I | V | vi | IV\r\n--- | --- | --- | --- | ---\r\nC   | C3| G2| A2 | F2\r\nC#| C#3|G#2|Bb2|F#2\r\nD  | D3 | A2|B2|G2\r\nD#|D#3|Bb2|C3|G#2\r\nE |E3 |B2| C#3| A2\r\nF| F3 |C3 | D3 | Bb2\r\nF#| F#3 |C#3 |D#3| B2\r\nG | G2 |D3 | E3 | C3\r\nG#| G#2 | D#3 | F3 | C#3\r\nA |A2 | E3 | F#3 | D3\r\nBb| Bb2 | F2 | G2 | D#2\r\nB |B2 | F#2 | G#2 | E2\r\n\r\n## Playback tempo\r\n\r\nThe playback tempo can be selected in single steps from 30bpm to 240bpm. Future plans will include a list of pre-defined playback tempos.\r\n\r\nPlayback tempo affects all the arpeggio playback modes. Currently playback is only in 4/4 bar with quarter notes only.\r\n\r\n## Playback modes\r\n\r\nThere are currently five playback modes implemented. This will also be extended at some point and offer more flexible, user definable modes.\r\n\r\nMode | first | second | third | fourth\r\n--- | --- | --- | --- | ---\r\n1 | - | - | - | -\r\n2 | 1-3-5 triad | third | fifth | third\r\n3 | 1-3-5 triad | third | fifth | octave\r\n4 | root | third | fifth | third\r\n5 | root | third | fifth | octave\r\n\r\nDepending on the chord, the third is naturally either the major (I, V, IV) or the minor (vi) third.','<h1>Musical Details</h1>\n<p><img src=\"/images/project-4chord-midi-music-details.jpg\" alt=\"4chord MIDI board\" title=\"4chord MIDI user interface\"></p>\n<h2>Playback keys</h2>\n<p>4chord MIDI provides playback in any chosen key. At this point, the pitch is however hard coded. The long-term goal is to make this user-definable, but at this point the following chords are used with each key:</p>\n<table>\n<thead><tr>\n<th>Key</th>\n<th>I</th>\n<th>V</th>\n<th>vi</th>\n<th>IV</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C</td>\n<td>C3</td>\n<td>G2</td>\n<td>A2</td>\n<td>F2</td>\n</tr>\n<tr>\n<td>C#</td>\n<td>C#3</td>\n<td>G#2</td>\n<td>Bb2</td>\n<td>F#2</td>\n</tr>\n<tr>\n<td>D</td>\n<td>D3</td>\n<td>A2</td>\n<td>B2</td>\n<td>G2</td>\n</tr>\n<tr>\n<td>D#</td>\n<td>D#3</td>\n<td>Bb2</td>\n<td>C3</td>\n<td>G#2</td>\n</tr>\n<tr>\n<td>E</td>\n<td>E3</td>\n<td>B2</td>\n<td>C#3</td>\n<td>A2</td>\n</tr>\n<tr>\n<td>F</td>\n<td>F3</td>\n<td>C3</td>\n<td>D3</td>\n<td>Bb2</td>\n</tr>\n<tr>\n<td>F#</td>\n<td>F#3</td>\n<td>C#3</td>\n<td>D#3</td>\n<td>B2</td>\n</tr>\n<tr>\n<td>G</td>\n<td>G2</td>\n<td>D3</td>\n<td>E3</td>\n<td>C3</td>\n</tr>\n<tr>\n<td>G#</td>\n<td>G#2</td>\n<td>D#3</td>\n<td>F3</td>\n<td>C#3</td>\n</tr>\n<tr>\n<td>A</td>\n<td>A2</td>\n<td>E3</td>\n<td>F#3</td>\n<td>D3</td>\n</tr>\n<tr>\n<td>Bb</td>\n<td>Bb2</td>\n<td>F2</td>\n<td>G2</td>\n<td>D#2</td>\n</tr>\n<tr>\n<td>B</td>\n<td>B2</td>\n<td>F#2</td>\n<td>G#2</td>\n<td>E2</td>\n</tr>\n</tbody>\n</table>\n<h2>Playback tempo</h2>\n<p>The playback tempo can be selected in single steps from 30bpm to 240bpm. Future plans will include a list of pre-defined playback tempos.</p>\n<p>Playback tempo affects all the arpeggio playback modes. Currently playback is only in 4/4 bar with quarter notes only.</p>\n<h2>Playback modes</h2>\n<p>There are currently five playback modes implemented. This will also be extended at some point and offer more flexible, user definable modes.</p>\n<table>\n<thead><tr>\n<th>Mode</th>\n<th>first</th>\n<th>second</th>\n<th>third</th>\n<th>fourth</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1-3-5 triad</td>\n<td>third</td>\n<td>fifth</td>\n<td>third</td>\n</tr>\n<tr>\n<td>3</td>\n<td>1-3-5 triad</td>\n<td>third</td>\n<td>fifth</td>\n<td>octave</td>\n</tr>\n<tr>\n<td>4</td>\n<td>root</td>\n<td>third</td>\n<td>fifth</td>\n<td>third</td>\n</tr>\n<tr>\n<td>5</td>\n<td>root</td>\n<td>third</td>\n<td>fifth</td>\n<td>octave</td>\n</tr>\n</tbody>\n</table>\n<p>Depending on the chord, the third is naturally either the major (I, V, IV) or the minor (vi) third.</p>\n'),(5,1,'Basic Usage','basic-usage',5,'2016-03-26 20:12:52',1,'# Using 4chord MIDI\r\n\r\n![4chord MIDI board](/images/project-4chord-midi-basic-usage.jpg \"Using 4chord MIDI\")\r\n\r\nFirst off, all I can tell about here refers to Linux. But since 4chord MIDI implements standard USB and MIDI specifications, other operating systems should treat it also as a normal MIDI device, so any general MIDI setup\r\ninstructions should work just fine.\r\n\r\nI usually use [JACK](http://www.jackaudio.org/) for audio routing and [Ardour](http://ardour.org/) for recording in general, and [a2jmidid](http://manual.ardour.org/setting-up-your-system/setting-up-midi/midi-on-linux/),\r\n[Calf plugins](http://calf-studio-gear.org/) and [Fluidsynth](http://www.fluidsynth.org/) sound fonts for MIDI in particular. I never used [Rosegarden](http://www.rosegardenmusic.com/), [MusE](http://muse-sequencer.org/)\r\nor anything alike, but then again, 4chord MIDI is a regular USB MIDI device, so it should work as any other MIDI controller.\r\n\r\n## Plug it in\r\n\r\nConnect 4chord MIDI to your computer and check if it got recognized. Since it uses the V-USB library for USB handling, `dmesg` should show something like this:\r\n```txt\r\n[3038097.883853] usb 1-1.1.1: new low-speed USB device number 112 using ehci-pci\r\n[3038099.140623] usb 1-1.1.1: New USB device found, idVendor=16c0, idProduct=05e4\r\n[3038099.140626] usb 1-1.1.1: New USB device strings: Mfr=1, Product=2, SerialNumber=0\r\n[3038099.140627] usb 1-1.1.1: Product: 4chord MIDI\r\n[3038099.140628] usb 1-1.1.1: Manufacturer: github.com/sgreg\r\n```\r\nand `lsusb` should show something like this:\r\n```txt\r\nBus 001 Device 112: ID 16c0:05e4 Van Ooijen Technische Informatica Free shared USB VID/PID pair for MIDI devices\r\n```\r\nThe VID/PID pair (`16c0:05e4`) should be the same, the Device number is most likely different.\r\n\r\n## Simple playback\r\n\r\nBefore going too deep into home recording under Linux etc, simple playback can be achieved with ALSA as well.\r\nFor Ubuntu, the required packages are `alsa-tools fluidsynth fluidsynth-soundfont-gm`, for any other distribution ..well, I guess they should have similar names?\r\n\r\nFirst, start fluidsynth as server in one terminal:\r\n\r\n```txt\r\n$ fluidsynth -a alsa -m alsa_seq -s -g 1.0 /usr/share/sounds/sf2/FluidR3_GM.sf2\r\n```\r\nIf it complains about the soundfont path, check where they are installed to and adjust the path.\r\n\r\nThen, in a second terminal, check for available MIDI input and output ports using `aconnect`, which should output something like this:\r\n\r\n```txt\r\n$ aconnect -i\r\nclient 20: \'4chord MIDI\' [type=kernel]\r\n    0 \'4chord MIDI MIDI 1\'\r\n\r\n$ aconnect -o\r\nclient 129: \'FLUID Synth (32590)\' [type=user]\r\n    0 \'Synth input port (32590:0)\'\r\n```\r\n\r\nThis tells us MIDI input is port `20:0` and MIDI output is port `129:0`. Now we connect them.\r\n\r\n```txt\r\n$ aconnect 20:0 129:0\r\n```\r\n\r\nThat\'s it.\r\n\r\nIn theory, you should hear now a piano sound when pressing any of the four chord buttons.\r\n\r\n**Note:** while testing with ALSA, I did encounter quite some noise in the output. I haven\'t seen this with JACK and it\'s possible some ALSA tweaking can take care of that.\r\n\r\n## User Interface\r\n\r\nThere are three buttons to set up the playback:\r\n1. Minues\r\n2. Select\r\n3. Plus\r\n\r\nThe *Select* button toggles through the three main options mode, key and tempo. The *Plus* and *Minus* buttons increases and decreases each option\'s value.\r\n','<h1>Using 4chord MIDI</h1>\n<p><img src=\"/images/project-4chord-midi-basic-usage.jpg\" alt=\"4chord MIDI board\" title=\"Using 4chord MIDI\"></p>\n<p>First off, all I can tell about here refers to Linux. But since 4chord MIDI implements standard USB and MIDI specifications, other operating systems should treat it also as a normal MIDI device, so any general MIDI setup\ninstructions should work just fine.</p>\n<p>I usually use <a href=\"http://www.jackaudio.org/\">JACK</a> for audio routing and <a href=\"http://ardour.org/\">Ardour</a> for recording in general, and <a href=\"http://manual.ardour.org/setting-up-your-system/setting-up-midi/midi-on-linux/\">a2jmidid</a>,\n<a href=\"http://calf-studio-gear.org/\">Calf plugins</a> and <a href=\"http://www.fluidsynth.org/\">Fluidsynth</a> sound fonts for MIDI in particular. I never used <a href=\"http://www.rosegardenmusic.com/\">Rosegarden</a>, <a href=\"http://muse-sequencer.org/\">MusE</a>\nor anything alike, but then again, 4chord MIDI is a regular USB MIDI device, so it should work as any other MIDI controller.</p>\n<h2>Plug it in</h2>\n<p>Connect 4chord MIDI to your computer and check if it got recognized. Since it uses the V-USB library for USB handling, <code>dmesg</code> should show something like this:</p>\n<pre class=\"lang-txt line-numbers\"><code>[3038097.883853] usb 1-1.1.1: new low-speed USB device number 112 using ehci-pci\n[3038099.140623] usb 1-1.1.1: New USB device found, idVendor=16c0, idProduct=05e4\n[3038099.140626] usb 1-1.1.1: New USB device strings: Mfr=1, Product=2, SerialNumber=0\n[3038099.140627] usb 1-1.1.1: Product: 4chord MIDI\n[3038099.140628] usb 1-1.1.1: Manufacturer: github.com/sgreg\n</code></pre>\n<p>and <code>lsusb</code> should show something like this:</p>\n<pre class=\"lang-txt line-numbers\"><code>Bus 001 Device 112: ID 16c0:05e4 Van Ooijen Technische Informatica Free shared USB VID/PID pair for MIDI devices\n</code></pre>\n<p>The VID/PID pair (<code>16c0:05e4</code>) should be the same, the Device number is most likely different.</p>\n<h2>Simple playback</h2>\n<p>Before going too deep into home recording under Linux etc, simple playback can be achieved with ALSA as well.\nFor Ubuntu, the required packages are <code>alsa-tools fluidsynth fluidsynth-soundfont-gm</code>, for any other distribution ..well, I guess they should have similar names?</p>\n<p>First, start fluidsynth as server in one terminal:</p>\n<pre class=\"lang-txt line-numbers\"><code>$ fluidsynth -a alsa -m alsa_seq -s -g 1.0 /usr/share/sounds/sf2/FluidR3_GM.sf2\n</code></pre>\n<p>If it complains about the soundfont path, check where they are installed to and adjust the path.</p>\n<p>Then, in a second terminal, check for available MIDI input and output ports using <code>aconnect</code>, which should output something like this:</p>\n<pre class=\"lang-txt line-numbers\"><code>$ aconnect -i\nclient 20: &#39;4chord MIDI&#39; [type=kernel]\n    0 &#39;4chord MIDI MIDI 1&#39;\n\n$ aconnect -o\nclient 129: &#39;FLUID Synth (32590)&#39; [type=user]\n    0 &#39;Synth input port (32590:0)&#39;\n</code></pre>\n<p>This tells us MIDI input is port <code>20:0</code> and MIDI output is port <code>129:0</code>. Now we connect them.</p>\n<pre class=\"lang-txt line-numbers\"><code>$ aconnect 20:0 129:0\n</code></pre>\n<p>That\'s it.</p>\n<p>In theory, you should hear now a piano sound when pressing any of the four chord buttons.</p>\n<p><strong>Note:</strong> while testing with ALSA, I did encounter quite some noise in the output. I haven\'t seen this with JACK and it\'s possible some ALSA tweaking can take care of that.</p>\n<h2>User Interface</h2>\n<p>There are three buttons to set up the playback:</p>\n<ol>\n<li>Minues</li>\n<li>Select</li>\n<li>Plus</li>\n</ol>\n<p>The <em>Select</em> button toggles through the three main options mode, key and tempo. The <em>Plus</em> and <em>Minus</em> buttons increases and decreases each option\'s value.</p>\n'),(7,3,'Status and Roadmap','status-and-roadmap',2,'2017-06-17 23:58:03',1,'# Status and Roadmap\r\n\r\n### Latest Version: [1.2.0](https://play.google.com/store/apps/details?id=fi.craplab.roameo)\r\n\r\n## Features\r\n\r\n* Count steps for every phone call and record it as a session in an internal database\r\n* Display\r\n  * summary statistics for all recorded sessions available\r\n  * statistics for each week graphically summarized (step count, duration, pace (steps per minute)) and list the individual session for each day in the week\r\n  * statistics for each individual session: step, count, duration, pace, bar graph to break down the steps for each minute either absolute or as deviation from the session\'s average value\r\n  * Upload individual call sessions to Google Fit\r\n  * Share individual call sessions to messaging and social media apps (calling the apps directly, so you\'ll need them installed)\r\n* **1.1.0**: Display summary statistics for each week\r\n* **1.2.0**: Export recorded call sessions as JSON\r\n\r\n## TODO\r\n\r\nTechnically, all (important) main ideas were implemented by the version 1.0.0 release. Clearly, the development didn\'t stop there, and some extra ideas came up here and there along the way.\r\n\r\nSome nice-to-have ideas have been around since day one and may or may not be implemented in the course of time. And keep in mind, this app is not really meant to be taken seriously, at least I don\'t, so the nature of (some?) of those ideas are ..matching it very well.\r\n\r\n* Improve \"Share session\" feature\r\n  * Currently, only a simple pre-defined text about the duration and step count is provided. Change the text to several pre-defined options based on duration and step count to indicate how \"intense\" the \"workout\" was.\r\n* Record walk pattern\r\n  * Experimenting with accelerometer and magnetometer to see if walking direction can be tracked and graphically displayed afterwards\r\n* Add heart rate data through external BLE heart rate monitor\r\n  * See how stressed or exciting a phone call was\r\n* Add Session Import feature\r\n  * Read back JSON file of previously exported sessions and fill internal database from it\r\n\r\n## Version History\r\n\r\n### 1.2.0\r\n\r\n* New feature: Session Exporter\r\n  * Export internally stored call sessions to JSON file\r\n  * Select start date and date through dialog\r\n  * Select to include the call session\'s phone numbers or not\r\n  \r\n  ![Session Exporter dialog](/images/roameo-export-sessions.jpg \"Select time frame or simply every available session and whether to include phone numbers or not. Accessible from the main menu\")\r\n\r\n\r\n### 1.1.0\r\n\r\n* New feature: Weekly Summary\r\n  * Add summary dialog for each week individually\r\n  * Accessible through the *Statistics* view\r\n  * Containing same information than the main *Summary* view\r\n  \r\n  ![Weekly Summary dialog](/images/roameo-weekly-summary.jpg \"Weekly summary the the current week, accessible through the top right button\")\r\n\r\n### 1.0.1\r\n\r\n* Bug fix: Week offset calculation couldn\'t handle change of the year\r\n\r\n### 1.0.0\r\n\r\n* Initial Release with all features planned for the app in the first place\r\n  * Detect incoming and outgoing phone calls\r\n  * Record step count with timestamp while call is ongoing\r\n  * Convert timestamp information to minute-by-minute statistics\r\n  * Write all phone call information to database\r\n  * Show step count, duration, pace (steps/minute) and a minute-by-minute graph of walked steps for each phone call\r\n  * Show weekly summary graph of step count, duration and pace, with individual session information accessible through it\r\n  * Add optional connection with Google Fit to upload individual sessions to it (only manual, no automatic upload for privacy reasons)\r\n  * Share individual sessions through other installed apps\r\n  * Settings dialog for general behavior and privacy options\r\n','<h1>Status and Roadmap</h1>\n<h3>Latest Version: <a href=\"https://play.google.com/store/apps/details?id=fi.craplab.roameo\">1.2.0</a></h3>\n<h2>Features</h2>\n<ul>\n<li>Count steps for every phone call and record it as a session in an internal database</li>\n<li>Display<ul>\n<li>summary statistics for all recorded sessions available</li>\n<li>statistics for each week graphically summarized (step count, duration, pace (steps per minute)) and list the individual session for each day in the week</li>\n<li>statistics for each individual session: step, count, duration, pace, bar graph to break down the steps for each minute either absolute or as deviation from the session\'s average value</li>\n<li>Upload individual call sessions to Google Fit</li>\n<li>Share individual call sessions to messaging and social media apps (calling the apps directly, so you\'ll need them installed)</li>\n</ul>\n</li>\n<li><strong>1.1.0</strong>: Display summary statistics for each week</li>\n<li><strong>1.2.0</strong>: Export recorded call sessions as JSON</li>\n</ul>\n<h2>TODO</h2>\n<p>Technically, all (important) main ideas were implemented by the version 1.0.0 release. Clearly, the development didn\'t stop there, and some extra ideas came up here and there along the way.</p>\n<p>Some nice-to-have ideas have been around since day one and may or may not be implemented in the course of time. And keep in mind, this app is not really meant to be taken seriously, at least I don\'t, so the nature of (some?) of those ideas are ..matching it very well.</p>\n<ul>\n<li>Improve \"Share session\" feature<ul>\n<li>Currently, only a simple pre-defined text about the duration and step count is provided. Change the text to several pre-defined options based on duration and step count to indicate how \"intense\" the \"workout\" was.</li>\n</ul>\n</li>\n<li>Record walk pattern<ul>\n<li>Experimenting with accelerometer and magnetometer to see if walking direction can be tracked and graphically displayed afterwards</li>\n</ul>\n</li>\n<li>Add heart rate data through external BLE heart rate monitor<ul>\n<li>See how stressed or exciting a phone call was</li>\n</ul>\n</li>\n<li>Add Session Import feature<ul>\n<li>Read back JSON file of previously exported sessions and fill internal database from it</li>\n</ul>\n</li>\n</ul>\n<h2>Version History</h2>\n<h3>1.2.0</h3>\n<ul>\n<li><p>New feature: Session Exporter</p>\n<ul>\n<li>Export internally stored call sessions to JSON file</li>\n<li>Select start date and date through dialog</li>\n<li>Select to include the call session\'s phone numbers or not</li>\n</ul>\n<p><img src=\"/images/roameo-export-sessions.jpg\" alt=\"Session Exporter dialog\" title=\"Select time frame or simply every available session and whether to include phone numbers or not. Accessible from the main menu\"></p>\n</li>\n</ul>\n<h3>1.1.0</h3>\n<ul>\n<li><p>New feature: Weekly Summary</p>\n<ul>\n<li>Add summary dialog for each week individually</li>\n<li>Accessible through the <em>Statistics</em> view</li>\n<li>Containing same information than the main <em>Summary</em> view</li>\n</ul>\n<p><img src=\"/images/roameo-weekly-summary.jpg\" alt=\"Weekly Summary dialog\" title=\"Weekly summary the the current week, accessible through the top right button\"></p>\n</li>\n</ul>\n<h3>1.0.1</h3>\n<ul>\n<li>Bug fix: Week offset calculation couldn\'t handle change of the year</li>\n</ul>\n<h3>1.0.0</h3>\n<ul>\n<li>Initial Release with all features planned for the app in the first place<ul>\n<li>Detect incoming and outgoing phone calls</li>\n<li>Record step count with timestamp while call is ongoing</li>\n<li>Convert timestamp information to minute-by-minute statistics</li>\n<li>Write all phone call information to database</li>\n<li>Show step count, duration, pace (steps/minute) and a minute-by-minute graph of walked steps for each phone call</li>\n<li>Show weekly summary graph of step count, duration and pace, with individual session information accessible through it</li>\n<li>Add optional connection with Google Fit to upload individual sessions to it (only manual, no automatic upload for privacy reasons)</li>\n<li>Share individual sessions through other installed apps</li>\n<li>Settings dialog for general behavior and privacy options</li>\n</ul>\n</li>\n</ul>\n'),(8,3,'Technical Details','technical-details',3,'2017-06-18 00:39:24',1,'# Technical details\r\n\r\nThis just scratches the surface of the very basic concepts used in Roameo, just a few words about the parts that are not visible.\r\n\r\n## Behind the scenes\r\n\r\nRoameo\'s main component is the [`SensorService`](https://github.com/sgreg/Roameo/blob/master/app/src/main/java/fi/craplab/roameo/sensor/SensorService.java), a background service listening to the phone state, receiving events whenever a call is incoming or initiated by yourself. The service then registers itself to the phone\'s sensor manager to receive information whenever the step count sensor triggers an event - i.e. when one or more steps are counted. If your phone doesn\'t have a step counter ..you shouldn\'t be able to install the app in the first place, so nothing to handle here.\r\n\r\nEach step counter event is buffered internally by storing the current time stamp with the amount of steps counted since the last event.  Once the call is finished, the actual processing is done: the buffered timestamp-counter value gets transformed into a minute-by-minute list, storing the amount of steps for each minute within the call. This list gets stored along with all the other call information into the internal SQLite database.\r\n\r\n## Database schema\r\n\r\nTo store all the information, two tables are used and mapped to the app via [ActiveAndroid](https://github.com/pardom/ActiveAndroid): on for call sessions, one for the minute-by-minute step list associated to each call session.\r\n\r\n### Call Sessions\r\n\r\nMapped as [`CallSession`](https://github.com/sgreg/Roameo/blob/master/app/src/main/java/fi/craplab/roameo/model/CallSession.java), all basic call information gets stored here:\r\n* call time stamp\r\n* call duration\r\n* incoming or outgoing call\r\n* phone number (if enabled in the settings)\r\n* steps counted\r\n\r\nYes, counted steps could be derived from the minute based list, but the information is static. Once a call session is recorded, it won\'t change, no need to calculate it in the app or database every time the value is needed.\r\n\r\nA couple helper methods are added for easy filtering when displaying or otherwise using the data. \r\n\r\n### Minutes List\r\n\r\nMapped as [`MinuteSteps`](https://github.com/sgreg/Roameo/blob/master/app/src/main/java/fi/craplab/roameo/model/MinuteSteps.java), every minute of each call session gets an entry here with the amount of steps counted for that specific minute. And that is all there is.\r\n\r\nIf no steps were counted for a specific minute, it still gets stored with value zero. Admittedly, this wastes some space, but again, further processing is a lot more efficient if you don\'t have to check *every* time for zero values between minutes and calculate if the end of the call was already reached or was there just no movement.\r\n\r\n## A note on step counters\r\n\r\nI haven\'t done extensive testing with different devices here, mostly just with two, three same devices. But I noted already here that the accuracy of the phone\'s step counter sensor can vary vastly. It might be related to the position of the accelerometer inside the phone, or some filtering in the driver, or then it\'s just physics and the way you hold the phone. Never really looked into it, just noticed very bad step count behavior in one of the devices - as in, most of them are missed.\r\n\r\nWell, the step count sensor is mostly meant for full-time fitness tracking, so when you carry your phone most of the time in a pocket. Detecting steps from the movement and acceleration data with the phone in your pants pocket is a different story than detecting them while holding the phone to your face. Head and arms are easily absorbing a lot of the forces necessary to detect movement.\r\n\r\nSo.. this said, your experience might suck and most of your walked steps are actually lost.\r\n\r\nNot much that can be done from app level. You might just have to step a lot harder while walking or use hands-free..\r\n\r\n## External libraries\r\n\r\nCan\'t do *everything* from scratch, so Roameo make use of a few external libraries:\r\n\r\n* [ActiveAndroid](https://github.com/pardom/ActiveAndroid), as already mentioned, as ORM\r\n* [Gson](https://github.com/google/gson) to export the database content as JSON\r\n* [HelloCharts](https://github.com/lecho/hellocharts-android) to create all the charts\r\n* [Iconify](https://github.com/JoanZapata/android-iconify) to have some happy little icons here and there\r\n* [Joda-Time](https://github.com/JodaOrg/joda-time) for date and time handling\r\n\r\nAlso, Google Play Services are used for uploading sessions to Google Fit.','<h1>Technical details</h1>\n<p>This just scratches the surface of the very basic concepts used in Roameo, just a few words about the parts that are not visible.</p>\n<h2>Behind the scenes</h2>\n<p>Roameo\'s main component is the <a href=\"https://github.com/sgreg/Roameo/blob/master/app/src/main/java/fi/craplab/roameo/sensor/SensorService.java\"><code>SensorService</code></a>, a background service listening to the phone state, receiving events whenever a call is incoming or initiated by yourself. The service then registers itself to the phone\'s sensor manager to receive information whenever the step count sensor triggers an event - i.e. when one or more steps are counted. If your phone doesn\'t have a step counter ..you shouldn\'t be able to install the app in the first place, so nothing to handle here.</p>\n<p>Each step counter event is buffered internally by storing the current time stamp with the amount of steps counted since the last event.  Once the call is finished, the actual processing is done: the buffered timestamp-counter value gets transformed into a minute-by-minute list, storing the amount of steps for each minute within the call. This list gets stored along with all the other call information into the internal SQLite database.</p>\n<h2>Database schema</h2>\n<p>To store all the information, two tables are used and mapped to the app via <a href=\"https://github.com/pardom/ActiveAndroid\">ActiveAndroid</a>: on for call sessions, one for the minute-by-minute step list associated to each call session.</p>\n<h3>Call Sessions</h3>\n<p>Mapped as <a href=\"https://github.com/sgreg/Roameo/blob/master/app/src/main/java/fi/craplab/roameo/model/CallSession.java\"><code>CallSession</code></a>, all basic call information gets stored here:</p>\n<ul>\n<li>call time stamp</li>\n<li>call duration</li>\n<li>incoming or outgoing call</li>\n<li>phone number (if enabled in the settings)</li>\n<li>steps counted</li>\n</ul>\n<p>Yes, counted steps could be derived from the minute based list, but the information is static. Once a call session is recorded, it won\'t change, no need to calculate it in the app or database every time the value is needed.</p>\n<p>A couple helper methods are added for easy filtering when displaying or otherwise using the data.</p>\n<h3>Minutes List</h3>\n<p>Mapped as <a href=\"https://github.com/sgreg/Roameo/blob/master/app/src/main/java/fi/craplab/roameo/model/MinuteSteps.java\"><code>MinuteSteps</code></a>, every minute of each call session gets an entry here with the amount of steps counted for that specific minute. And that is all there is.</p>\n<p>If no steps were counted for a specific minute, it still gets stored with value zero. Admittedly, this wastes some space, but again, further processing is a lot more efficient if you don\'t have to check <em>every</em> time for zero values between minutes and calculate if the end of the call was already reached or was there just no movement.</p>\n<h2>A note on step counters</h2>\n<p>I haven\'t done extensive testing with different devices here, mostly just with two, three same devices. But I noted already here that the accuracy of the phone\'s step counter sensor can vary vastly. It might be related to the position of the accelerometer inside the phone, or some filtering in the driver, or then it\'s just physics and the way you hold the phone. Never really looked into it, just noticed very bad step count behavior in one of the devices - as in, most of them are missed.</p>\n<p>Well, the step count sensor is mostly meant for full-time fitness tracking, so when you carry your phone most of the time in a pocket. Detecting steps from the movement and acceleration data with the phone in your pants pocket is a different story than detecting them while holding the phone to your face. Head and arms are easily absorbing a lot of the forces necessary to detect movement.</p>\n<p>So.. this said, your experience might suck and most of your walked steps are actually lost.</p>\n<p>Not much that can be done from app level. You might just have to step a lot harder while walking or use hands-free..</p>\n<h2>External libraries</h2>\n<p>Can\'t do <em>everything</em> from scratch, so Roameo make use of a few external libraries:</p>\n<ul>\n<li><a href=\"https://github.com/pardom/ActiveAndroid\">ActiveAndroid</a>, as already mentioned, as ORM</li>\n<li><a href=\"https://github.com/google/gson\">Gson</a> to export the database content as JSON</li>\n<li><a href=\"https://github.com/lecho/hellocharts-android\">HelloCharts</a> to create all the charts</li>\n<li><a href=\"https://github.com/JoanZapata/android-iconify\">Iconify</a> to have some happy little icons here and there</li>\n<li><a href=\"https://github.com/JodaOrg/joda-time\">Joda-Time</a> for date and time handling</li>\n</ul>\n<p>Also, Google Play Services are used for uploading sessions to Google Fit.</p>\n');
/*!40000 ALTER TABLE `project_page` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `project_type`
--

DROP TABLE IF EXISTS `project_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `project_type` (
  `id` int(11) NOT NULL,
  `name` varchar(50) DEFAULT NULL,
  `icon_type` varchar(10) DEFAULT NULL,
  `icon` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `project_type`
--

LOCK TABLES `project_type` WRITE;
/*!40000 ALTER TABLE `project_type` DISABLE KEYS */;
INSERT INTO `project_type` VALUES (1,'Software','svg','software'),(2,'Hardware','svg','hardware'),(3,'Firmware','svg','firmware'),(4,'App','fa','tablet'),(5,'Mechanics','fa','wrench'),(6,'Webservice','fa','wifi');
/*!40000 ALTER TABLE `project_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `project_type_map`
--

DROP TABLE IF EXISTS `project_type_map`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `project_type_map` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `project_id` int(11) NOT NULL,
  `project_type_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `project_id` (`project_id`,`project_type_id`),
  KEY `project_type_id` (`project_type_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `project_type_map`
--

LOCK TABLES `project_type_map` WRITE;
/*!40000 ALTER TABLE `project_type_map` DISABLE KEYS */;
/*!40000 ALTER TABLE `project_type_map` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `static_page`
--

DROP TABLE IF EXISTS `static_page`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `static_page` (
  `id` int(11) NOT NULL,
  `title` varchar(100) NOT NULL,
  `link` varchar(100) NOT NULL,
  `content` text,
  `parsed` text,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `static_page`
--

LOCK TABLES `static_page` WRITE;
/*!40000 ALTER TABLE `static_page` DISABLE KEYS */;
INSERT INTO `static_page` VALUES (1,'About','about','# Hello, my name is Sven.\r\n\r\nI\'m a German guy living in Northern Finland. But otherwise I\'m fine.\r\n\r\nI spend my days as a software engineering mercenary/prostitute/consultant - whichever you prefer, and my nights tinkering with microcontrollers, programming and creating music. I actually have a life besides that, too, but that\'s not the point here.\r\n\r\n## About sgreg.fi\r\n\r\nThe main idea behind this website is for me to have a common place to provide general information about my personal projects and document my tinkering and other activities with programming, electronics and home recording. In a way as portfolio to brag about my doings, but also as information resource and maybe even encouragement for other people to catch up with these subjects.\r\n\r\nWhile (at least at this point) not aiming to provide actual tutorials, my intention is to simply share what I\'m doing and how I do things, and in the process of it, meticulously document it. Yes, I will reinvent the wheel along that way. Yes, probably lots of things I do could be achieved in two minutes by googling and copy&pasting some Arduino source code or whatever. If that\'s your thing, fine, keep on doing so. And go away. If instead you want to actually understand how things work and improve yourself, I salute you. And I hope my writings will be of help to you.\r\n\r\n## A Short History of Mine\r\n\r\nMy path to programming began probably somewhere back in the year 2000 through good old IRC and the mIRC client. All the leet kids had their own themes and did some own scripting stuff with it, so, being an impressionable teenager, I naturally wanted to be part of that. Well, it wasn\'t really going anywhere with that.\r\n\r\nAround the same time I learned about Linux and I gave it a try. Fascinating new worlds opening up for me. Here were the leet kids bragging about their shell accounts, and suddenly, all I had to do was open a terminal and I had one for myself. But all mockery aside, seeing the sheer limitless possibilities with Linux and demystifying the concept of the internet through it, I was sold and never went back to anything else. (admittedly, not really knowing about dual boot and messing up the MBR might have played a role here at first, too)\r\n\r\nUnderstanding a command line can be used for more than just navigating through the file system, I learned about bash scripting and was soon looking for more. I got myself books on Perl, C and PHP programming and fumbled around with those languages. After finishing my vocational training in electronics engineering in 2002, I ended up working the late shift assembling and repairing RF amplifiers, discovering the magic of the night to pursue my programming hobby. Striving for more, I soon after decided that this isn\'t what I want out of life, quit the job and went back to school to eventually enroll in a computer engineering degree program. \r\n\r\nGaining interest in other fields of computer science and struggling which direction to go, I decided to change my major to computer networking and focused my elective courses on more electronics and embedded system subjects, including a year abroad as exchange student in Finland where I fully delved into microcontrollers, FPGAs and DSP. Fascinated by FPGAs, I wrote my final thesis about soft processors and graduated with a diploma in computer science in early 2009.\r\n\r\nFreshly graduated, I did some Linux kernel, driver and system development for FPGA based systems until the global financial crisis provided me the opportunity to find something else. So I actually moved back to Finland and at first continued with Linux kernel and system development, but as time passed, little by little I moved to all kinds of directions, always finding something new to learn, improving myself and remain interdisciplinary with it all. But I can\'t deny that at heart, I\'m a low level guy, pushing bits and debug with an oscilloscope, that\'s the dream. So along the way, I went back to my roots with electronics and spend my free time nowadays - among other things - with microcontroller programming and some PCB designing.\r\n\r\nYet somehow I also ended up hacking together this website.. Oh well.\r\n','<h1>Hello, my name is Sven.</h1>\n<p>I\'m a German guy living in Northern Finland. But otherwise I\'m fine.</p>\n<p>I spend my days as a software engineering mercenary/prostitute/consultant - whichever you prefer, and my nights tinkering with microcontrollers, programming and creating music. I actually have a life besides that, too, but that\'s not the point here.</p>\n<h2>About sgreg.fi</h2>\n<p>The main idea behind this website is for me to have a common place to provide general information about my personal projects and document my tinkering and other activities with programming, electronics and home recording. In a way as portfolio to brag about my doings, but also as information resource and maybe even encouragement for other people to catch up with these subjects.</p>\n<p>While (at least at this point) not aiming to provide actual tutorials, my intention is to simply share what I\'m doing and how I do things, and in the process of it, meticulously document it. Yes, I will reinvent the wheel along that way. Yes, probably lots of things I do could be achieved in two minutes by googling and copy&amp;pasting some Arduino source code or whatever. If that\'s your thing, fine, keep on doing so. And go away. If instead you want to actually understand how things work and improve yourself, I salute you. And I hope my writings will be of help to you.</p>\n<h2>A Short History of Mine</h2>\n<p>My path to programming began probably somewhere back in the year 2000 through good old IRC and the mIRC client. All the leet kids had their own themes and did some own scripting stuff with it, so, being an impressionable teenager, I naturally wanted to be part of that. Well, it wasn\'t really going anywhere with that.</p>\n<p>Around the same time I learned about Linux and I gave it a try. Fascinating new worlds opening up for me. Here were the leet kids bragging about their shell accounts, and suddenly, all I had to do was open a terminal and I had one for myself. But all mockery aside, seeing the sheer limitless possibilities with Linux and demystifying the concept of the internet through it, I was sold and never went back to anything else. (admittedly, not really knowing about dual boot and messing up the MBR might have played a role here at first, too)</p>\n<p>Understanding a command line can be used for more than just navigating through the file system, I learned about bash scripting and was soon looking for more. I got myself books on Perl, C and PHP programming and fumbled around with those languages. After finishing my vocational training in electronics engineering in 2002, I ended up working the late shift assembling and repairing RF amplifiers, discovering the magic of the night to pursue my programming hobby. Striving for more, I soon after decided that this isn\'t what I want out of life, quit the job and went back to school to eventually enroll in a computer engineering degree program.</p>\n<p>Gaining interest in other fields of computer science and struggling which direction to go, I decided to change my major to computer networking and focused my elective courses on more electronics and embedded system subjects, including a year abroad as exchange student in Finland where I fully delved into microcontrollers, FPGAs and DSP. Fascinated by FPGAs, I wrote my final thesis about soft processors and graduated with a diploma in computer science in early 2009.</p>\n<p>Freshly graduated, I did some Linux kernel, driver and system development for FPGA based systems until the global financial crisis provided me the opportunity to find something else. So I actually moved back to Finland and at first continued with Linux kernel and system development, but as time passed, little by little I moved to all kinds of directions, always finding something new to learn, improving myself and remain interdisciplinary with it all. But I can\'t deny that at heart, I\'m a low level guy, pushing bits and debug with an oscilloscope, that\'s the dream. So along the way, I went back to my roots with electronics and spend my free time nowadays - among other things - with microcontroller programming and some PCB designing.</p>\n<p>Yet somehow I also ended up hacking together this website.. Oh well.</p>\n'),(2,'Contact','contact',NULL,NULL);
/*!40000 ALTER TABLE `static_page` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-10-14  1:46:13
